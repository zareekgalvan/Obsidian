Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    LPAR
    RETURN
    LESS
    READ
    VOID
    RPAR
    LBRACKET
    WHILE
    MULTIPLICATION
    TRUE
    MINUS
    PLUS
    DIVISION
    DIFFERENT
    LESSOREQUAL
    EQUALEQUALS
    WRITE
    FUNC
    IF
    AND
    MAIN
    FALSE
    GREATER
    GREATEROREQUAL
    RBRACKET
    OR
    MOD

Grammar

Rule 0     S' -> program
Rule 1     program -> more_vars more_func main
Rule 2     more_vars -> vars
Rule 3     more_vars -> <empty>
Rule 4     vars -> var_type vars_aux SEMICOLON more_vars
Rule 5     var_type -> BOOL
Rule 6     var_type -> INT
Rule 7     var_type -> DOUBLE
Rule 8     vars_aux -> ID arr var_assign more_vars_aux
Rule 9     var_assign -> EQUALS var_cte
Rule 10    var_assign -> <empty>
Rule 11    more_vars_aux -> COMMA vars_aux
Rule 12    more_vars_aux -> <empty>
Rule 13    arr -> LSQRTBRACKET const RSQRTBRACKET arr
Rule 14    arr -> <empty>
Rule 15    var_cte -> CTEINT
Rule 16    var_cte -> CTEDOUBLE
Rule 17    var_cte -> CTEBOOL
Rule 18    var_cte -> ID arr
Rule 19    var_cte -> func_call
Rule 20    const -> CTEINT
Rule 21    const -> CTEDOUBLE
Rule 22    const -> CTEBOOL
Rule 23    more_func -> func
Rule 24    more_func -> <empty>
Rule 25    func -> <empty>
Rule 26    func_call -> <empty>
Rule 27    main -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 5
COMMA                : 11
CTEBOOL              : 17 22
CTEDOUBLE            : 16 21
CTEINT               : 15 20
DIFFERENT            : 
DIVISION             : 
DOUBLE               : 7
EQUALEQUALS          : 
EQUALS               : 9
FALSE                : 
FUNC                 : 
GREATER              : 
GREATEROREQUAL       : 
ID                   : 8 18
IF                   : 
INT                  : 6
LBRACKET             : 
LESS                 : 
LESSOREQUAL          : 
LPAR                 : 
LSQRTBRACKET         : 13
MAIN                 : 
MINUS                : 
MOD                  : 
MULTIPLICATION       : 
OR                   : 
PLUS                 : 
RBRACKET             : 
READ                 : 
RETURN               : 
RPAR                 : 
RSQRTBRACKET         : 13
SEMICOLON            : 4
TRUE                 : 
VOID                 : 
WHILE                : 
WRITE                : 
error                : 

Nonterminals, with rules where they appear

arr                  : 8 13 18
const                : 13
func                 : 23
func_call            : 19
main                 : 1
more_func            : 1
more_vars            : 1 4
more_vars_aux        : 8
program              : 0
var_assign           : 8
var_cte              : 9
var_type             : 4
vars                 : 2
vars_aux             : 4 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . more_vars more_func main
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    $end            reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    program                        shift and go to state 5
    more_vars                      shift and go to state 7

state 1

    (2) more_vars -> vars .

    $end            reduce using rule 2 (more_vars -> vars .)


state 2

    (4) vars -> var_type . vars_aux SEMICOLON more_vars
    (8) vars_aux -> . ID arr var_assign more_vars_aux

    ID              shift and go to state 9

    vars_aux                       shift and go to state 8

state 3

    (6) var_type -> INT .

    ID              reduce using rule 6 (var_type -> INT .)


state 4

    (7) var_type -> DOUBLE .

    ID              reduce using rule 7 (var_type -> DOUBLE .)


state 5

    (0) S' -> program .



state 6

    (5) var_type -> BOOL .

    ID              reduce using rule 5 (var_type -> BOOL .)


state 7

    (1) program -> more_vars . more_func main
    (23) more_func -> . func
    (24) more_func -> .
    (25) func -> .

  ! reduce/reduce conflict for $end resolved using rule 24 (more_func -> .)
    $end            reduce using rule 24 (more_func -> .)

  ! $end            [ reduce using rule 25 (func -> .) ]

    func                           shift and go to state 10
    more_func                      shift and go to state 11

state 8

    (4) vars -> var_type vars_aux . SEMICOLON more_vars

    SEMICOLON       shift and go to state 12


state 9

    (8) vars_aux -> ID . arr var_assign more_vars_aux
    (13) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (14) arr -> .

    LSQRTBRACKET    shift and go to state 14
    EQUALS          reduce using rule 14 (arr -> .)
    COMMA           reduce using rule 14 (arr -> .)
    SEMICOLON       reduce using rule 14 (arr -> .)

    arr                            shift and go to state 13

state 10

    (23) more_func -> func .

    $end            reduce using rule 23 (more_func -> func .)


state 11

    (1) program -> more_vars more_func . main
    (27) main -> .

    $end            reduce using rule 27 (main -> .)

    main                           shift and go to state 15

state 12

    (4) vars -> var_type vars_aux SEMICOLON . more_vars
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    $end            reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    more_vars                      shift and go to state 16
    var_type                       shift and go to state 2

state 13

    (8) vars_aux -> ID arr . var_assign more_vars_aux
    (9) var_assign -> . EQUALS var_cte
    (10) var_assign -> .

    EQUALS          shift and go to state 17
    COMMA           reduce using rule 10 (var_assign -> .)
    SEMICOLON       reduce using rule 10 (var_assign -> .)

    var_assign                     shift and go to state 18

state 14

    (13) arr -> LSQRTBRACKET . const RSQRTBRACKET arr
    (20) const -> . CTEINT
    (21) const -> . CTEDOUBLE
    (22) const -> . CTEBOOL

    CTEINT          shift and go to state 22
    CTEDOUBLE       shift and go to state 19
    CTEBOOL         shift and go to state 21

    const                          shift and go to state 20

state 15

    (1) program -> more_vars more_func main .

    $end            reduce using rule 1 (program -> more_vars more_func main .)


state 16

    (4) vars -> var_type vars_aux SEMICOLON more_vars .

    $end            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)


state 17

    (9) var_assign -> EQUALS . var_cte
    (15) var_cte -> . CTEINT
    (16) var_cte -> . CTEDOUBLE
    (17) var_cte -> . CTEBOOL
    (18) var_cte -> . ID arr
    (19) var_cte -> . func_call
    (26) func_call -> .

    CTEINT          shift and go to state 26
    CTEDOUBLE       shift and go to state 23
    CTEBOOL         shift and go to state 25
    ID              shift and go to state 28
    COMMA           reduce using rule 26 (func_call -> .)
    SEMICOLON       reduce using rule 26 (func_call -> .)

    func_call                      shift and go to state 24
    var_cte                        shift and go to state 27

state 18

    (8) vars_aux -> ID arr var_assign . more_vars_aux
    (11) more_vars_aux -> . COMMA vars_aux
    (12) more_vars_aux -> .

    COMMA           shift and go to state 30
    SEMICOLON       reduce using rule 12 (more_vars_aux -> .)

    more_vars_aux                  shift and go to state 29

state 19

    (21) const -> CTEDOUBLE .

    RSQRTBRACKET    reduce using rule 21 (const -> CTEDOUBLE .)


state 20

    (13) arr -> LSQRTBRACKET const . RSQRTBRACKET arr

    RSQRTBRACKET    shift and go to state 31


state 21

    (22) const -> CTEBOOL .

    RSQRTBRACKET    reduce using rule 22 (const -> CTEBOOL .)


state 22

    (20) const -> CTEINT .

    RSQRTBRACKET    reduce using rule 20 (const -> CTEINT .)


state 23

    (16) var_cte -> CTEDOUBLE .

    COMMA           reduce using rule 16 (var_cte -> CTEDOUBLE .)
    SEMICOLON       reduce using rule 16 (var_cte -> CTEDOUBLE .)


state 24

    (19) var_cte -> func_call .

    COMMA           reduce using rule 19 (var_cte -> func_call .)
    SEMICOLON       reduce using rule 19 (var_cte -> func_call .)


state 25

    (17) var_cte -> CTEBOOL .

    COMMA           reduce using rule 17 (var_cte -> CTEBOOL .)
    SEMICOLON       reduce using rule 17 (var_cte -> CTEBOOL .)


state 26

    (15) var_cte -> CTEINT .

    COMMA           reduce using rule 15 (var_cte -> CTEINT .)
    SEMICOLON       reduce using rule 15 (var_cte -> CTEINT .)


state 27

    (9) var_assign -> EQUALS var_cte .

    COMMA           reduce using rule 9 (var_assign -> EQUALS var_cte .)
    SEMICOLON       reduce using rule 9 (var_assign -> EQUALS var_cte .)


state 28

    (18) var_cte -> ID . arr
    (13) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (14) arr -> .

    LSQRTBRACKET    shift and go to state 14
    COMMA           reduce using rule 14 (arr -> .)
    SEMICOLON       reduce using rule 14 (arr -> .)

    arr                            shift and go to state 32

state 29

    (8) vars_aux -> ID arr var_assign more_vars_aux .

    SEMICOLON       reduce using rule 8 (vars_aux -> ID arr var_assign more_vars_aux .)


state 30

    (11) more_vars_aux -> COMMA . vars_aux
    (8) vars_aux -> . ID arr var_assign more_vars_aux

    ID              shift and go to state 9

    vars_aux                       shift and go to state 33

state 31

    (13) arr -> LSQRTBRACKET const RSQRTBRACKET . arr
    (13) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (14) arr -> .

    LSQRTBRACKET    shift and go to state 14
    EQUALS          reduce using rule 14 (arr -> .)
    COMMA           reduce using rule 14 (arr -> .)
    SEMICOLON       reduce using rule 14 (arr -> .)

    arr                            shift and go to state 34

state 32

    (18) var_cte -> ID arr .

    COMMA           reduce using rule 18 (var_cte -> ID arr .)
    SEMICOLON       reduce using rule 18 (var_cte -> ID arr .)


state 33

    (11) more_vars_aux -> COMMA vars_aux .

    SEMICOLON       reduce using rule 11 (more_vars_aux -> COMMA vars_aux .)


state 34

    (13) arr -> LSQRTBRACKET const RSQRTBRACKET arr .

    COMMA           reduce using rule 13 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    SEMICOLON       reduce using rule 13 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    EQUALS          reduce using rule 13 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 7 resolved using rule (more_func -> <empty>)
WARNING: rejected rule (func -> <empty>) in state 7
WARNING: Rule (func -> <empty>) is never reduced
