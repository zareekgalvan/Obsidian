Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> more_vars more_func main
Rule 2     more_vars -> vars
Rule 3     more_vars -> <empty>
Rule 4     vars -> var_type vars_aux SEMICOLON more_vars
Rule 5     var_type -> BOOL
Rule 6     var_type -> INT
Rule 7     var_type -> DOUBLE
Rule 8     vars_aux -> ID arr to_var_table var_assign more_vars_aux
Rule 9     to_var_table -> <empty>
Rule 10    var_assign -> EQUALS var_cte
Rule 11    var_assign -> <empty>
Rule 12    more_vars_aux -> COMMA vars_aux
Rule 13    more_vars_aux -> <empty>
Rule 14    arr -> LSQRTBRACKET const RSQRTBRACKET arr
Rule 15    arr -> <empty>
Rule 16    var_cte -> const
Rule 17    var_cte -> ID arr
Rule 18    var_cte -> func_call
Rule 19    const -> CTEINT
Rule 20    const -> CTEDOUBLE
Rule 21    const -> CTEBOOL
Rule 22    more_func -> func
Rule 23    more_func -> <empty>
Rule 24    func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func
Rule 25    to_proc_dir -> <empty>
Rule 26    func_type -> VOID
Rule 27    func_type -> BOOL
Rule 28    func_type -> INT
Rule 29    func_type -> DOUBLE
Rule 30    arguments -> var_type ID to_args more_args
Rule 31    arguments -> <empty>
Rule 32    more_args -> COMMA var_type ID to_args more_args
Rule 33    more_args -> <empty>
Rule 34    to_args -> <empty>
Rule 35    func_block -> LBRACKET more_vars more_statement optional_return RBRACKET
Rule 36    optional_return -> RETURN exp SEMICOLON
Rule 37    optional_return -> <empty>
Rule 38    more_statement -> statement more_statement
Rule 39    more_statement -> <empty>
Rule 40    statement -> read
Rule 41    statement -> write
Rule 42    statement -> cicle
Rule 43    statement -> condition
Rule 44    statement -> assignation
Rule 45    statement -> func_call SEMICOLON
Rule 46    read -> READ LPAR ID arr_par RPAR SEMICOLON
Rule 47    write -> WRITE LPAR exp RPAR SEMICOLON
Rule 48    cicle -> WHILE LPAR expression RPAR block
Rule 49    condition -> IF LPAR expression RPAR block else_posible
Rule 50    else_posible -> ELSE block
Rule 51    else_posible -> <empty>
Rule 52    assignation -> ID arr_par EQUALS expression SEMICOLON
Rule 53    func_call -> ID LPAR params RPAR
Rule 54    params -> exp more_params
Rule 55    params -> <empty>
Rule 56    more_params -> COMMA exp more_params
Rule 57    more_params -> <empty>
Rule 58    block -> LBRACKET more_statement RBRACKET
Rule 59    arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par
Rule 60    arr_par -> <empty>
Rule 61    expression -> conc expression_aux
Rule 62    expression_aux -> ao add_to_pilaOptr conc expression_aux
Rule 63    expression_aux -> <empty>
Rule 64    conc -> exp conc_aux
Rule 65    conc_aux -> comp add_to_pilaOptr exp
Rule 66    conc_aux -> <empty>
Rule 67    exp -> term exp_aux
Rule 68    exp_aux -> pl add_to_pilaOptr term exp_aux
Rule 69    exp_aux -> <empty>
Rule 70    term -> factor term_aux
Rule 71    term_aux -> dm add_to_pilaOptr factor term_aux
Rule 72    term_aux -> <empty>
Rule 73    factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom
Rule 74    factor -> var_cte to_pilaOp
Rule 75    ao -> AND
Rule 76    ao -> OR
Rule 77    comp -> GREATER
Rule 78    comp -> LESS
Rule 79    comp -> GREATEROREQUAL
Rule 80    comp -> LESSOREQUAL
Rule 81    comp -> EQUALEQUALS
Rule 82    comp -> DIFFERENT
Rule 83    pl -> PLUS
Rule 84    pl -> MINUS
Rule 85    to_pilaOp -> <empty>
Rule 86    add_to_pilaOptr -> <empty>
Rule 87    pop_false_bottom -> <empty>
Rule 88    dm -> MULTIPLICATION
Rule 89    dm -> DIVISION
Rule 90    dm -> MOD
Rule 91    main -> MAIN main_to_proc_dir main_block
Rule 92    main_to_proc_dir -> <empty>
Rule 93    main_block -> LBRACKET more_vars more_statement RBRACKET

Terminals, with rules where they appear

AND                  : 75
BOOL                 : 5 27
COMMA                : 12 32 56
CTEBOOL              : 21
CTEDOUBLE            : 20
CTEINT               : 19
DIFFERENT            : 82
DIVISION             : 89
DOUBLE               : 7 29
ELSE                 : 50
EQUALEQUALS          : 81
EQUALS               : 10 52
FUNC                 : 24
GREATER              : 77
GREATEROREQUAL       : 79
ID                   : 8 17 24 30 32 46 52 53
IF                   : 49
INT                  : 6 28
LBRACKET             : 35 58 93
LESS                 : 78
LESSOREQUAL          : 80
LPAR                 : 24 46 47 48 49 53 73
LSQRTBRACKET         : 14 59
MAIN                 : 91
MINUS                : 84
MOD                  : 90
MULTIPLICATION       : 88
OR                   : 76
PLUS                 : 83
RBRACKET             : 35 58 93
READ                 : 46
RETURN               : 36
RPAR                 : 24 46 47 48 49 53 73
RSQRTBRACKET         : 14 59
SEMICOLON            : 4 36 45 46 47 52
TRUE                 : 
VOID                 : 26
WHILE                : 48
WRITE                : 47
error                : 

Nonterminals, with rules where they appear

add_to_pilaOptr      : 62 65 68 71 73
ao                   : 62
arguments            : 24
arr                  : 8 14 17
arr_par              : 46 52 59
assignation          : 44
block                : 48 49 50
cicle                : 42
comp                 : 65
conc                 : 61 62
conc_aux             : 64
condition            : 43
const                : 14 16
dm                   : 71
else_posible         : 49
exp                  : 36 47 54 56 59 64 65
exp_aux              : 67 68
expression           : 48 49 52 73
expression_aux       : 61 62
factor               : 70 71
func                 : 22
func_block           : 24
func_call            : 18 45
func_type            : 24
main                 : 1
main_block           : 91
main_to_proc_dir     : 91
more_args            : 30 32
more_func            : 1 24
more_params          : 54 56
more_statement       : 35 38 58 93
more_vars            : 1 4 35 93
more_vars_aux        : 8
optional_return      : 35
params               : 53
pl                   : 68
pop_false_bottom     : 73
program              : 0
read                 : 40
statement            : 38
term                 : 67 68
term_aux             : 70 71
to_args              : 30 32
to_pilaOp            : 74
to_proc_dir          : 24
to_var_table         : 8
var_assign           : 8
var_cte              : 10 74
var_type             : 4 30 32
vars                 : 2
vars_aux             : 4 12
write                : 41

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . more_vars more_func main
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    FUNC            reduce using rule 3 (more_vars -> .)
    MAIN            reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    program                        shift and go to state 5
    more_vars                      shift and go to state 7

state 1

    (2) more_vars -> vars .

    READ            reduce using rule 2 (more_vars -> vars .)
    WRITE           reduce using rule 2 (more_vars -> vars .)
    WHILE           reduce using rule 2 (more_vars -> vars .)
    IF              reduce using rule 2 (more_vars -> vars .)
    ID              reduce using rule 2 (more_vars -> vars .)
    RETURN          reduce using rule 2 (more_vars -> vars .)
    RBRACKET        reduce using rule 2 (more_vars -> vars .)
    FUNC            reduce using rule 2 (more_vars -> vars .)
    MAIN            reduce using rule 2 (more_vars -> vars .)


state 2

    (4) vars -> var_type . vars_aux SEMICOLON more_vars
    (8) vars_aux -> . ID arr to_var_table var_assign more_vars_aux

    ID              shift and go to state 9

    vars_aux                       shift and go to state 8

state 3

    (6) var_type -> INT .

    ID              reduce using rule 6 (var_type -> INT .)


state 4

    (7) var_type -> DOUBLE .

    ID              reduce using rule 7 (var_type -> DOUBLE .)


state 5

    (0) S' -> program .



state 6

    (5) var_type -> BOOL .

    ID              reduce using rule 5 (var_type -> BOOL .)


state 7

    (1) program -> more_vars . more_func main
    (22) more_func -> . func
    (23) more_func -> .
    (24) func -> . FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func

    MAIN            reduce using rule 23 (more_func -> .)
    FUNC            shift and go to state 12

    more_func                      shift and go to state 11
    func                           shift and go to state 10

state 8

    (4) vars -> var_type vars_aux . SEMICOLON more_vars

    SEMICOLON       shift and go to state 13


state 9

    (8) vars_aux -> ID . arr to_var_table var_assign more_vars_aux
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .

    LSQRTBRACKET    shift and go to state 15
    EQUALS          reduce using rule 15 (arr -> .)
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)

    arr                            shift and go to state 14

state 10

    (22) more_func -> func .

    MAIN            reduce using rule 22 (more_func -> func .)


state 11

    (1) program -> more_vars more_func . main
    (91) main -> . MAIN main_to_proc_dir main_block

    MAIN            shift and go to state 17

    main                           shift and go to state 16

state 12

    (24) func -> FUNC . func_type ID to_proc_dir LPAR arguments RPAR func_block more_func
    (26) func_type -> . VOID
    (27) func_type -> . BOOL
    (28) func_type -> . INT
    (29) func_type -> . DOUBLE

    VOID            shift and go to state 20
    BOOL            shift and go to state 22
    INT             shift and go to state 21
    DOUBLE          shift and go to state 19

    func_type                      shift and go to state 18

state 13

    (4) vars -> var_type vars_aux SEMICOLON . more_vars
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    FUNC            reduce using rule 3 (more_vars -> .)
    MAIN            reduce using rule 3 (more_vars -> .)
    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    RETURN          reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    more_vars                      shift and go to state 23
    var_type                       shift and go to state 2

state 14

    (8) vars_aux -> ID arr . to_var_table var_assign more_vars_aux
    (9) to_var_table -> .

    EQUALS          reduce using rule 9 (to_var_table -> .)
    COMMA           reduce using rule 9 (to_var_table -> .)
    SEMICOLON       reduce using rule 9 (to_var_table -> .)

    to_var_table                   shift and go to state 24

state 15

    (14) arr -> LSQRTBRACKET . const RSQRTBRACKET arr
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL

    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    const                          shift and go to state 26

state 16

    (1) program -> more_vars more_func main .

    $end            reduce using rule 1 (program -> more_vars more_func main .)


state 17

    (91) main -> MAIN . main_to_proc_dir main_block
    (92) main_to_proc_dir -> .

    LBRACKET        reduce using rule 92 (main_to_proc_dir -> .)

    main_to_proc_dir               shift and go to state 29

state 18

    (24) func -> FUNC func_type . ID to_proc_dir LPAR arguments RPAR func_block more_func

    ID              shift and go to state 30


state 19

    (29) func_type -> DOUBLE .

    ID              reduce using rule 29 (func_type -> DOUBLE .)


state 20

    (26) func_type -> VOID .

    ID              reduce using rule 26 (func_type -> VOID .)


state 21

    (28) func_type -> INT .

    ID              reduce using rule 28 (func_type -> INT .)


state 22

    (27) func_type -> BOOL .

    ID              reduce using rule 27 (func_type -> BOOL .)


state 23

    (4) vars -> var_type vars_aux SEMICOLON more_vars .

    READ            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    WRITE           reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    WHILE           reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    IF              reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    ID              reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    RETURN          reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    RBRACKET        reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    FUNC            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    MAIN            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)


state 24

    (8) vars_aux -> ID arr to_var_table . var_assign more_vars_aux
    (10) var_assign -> . EQUALS var_cte
    (11) var_assign -> .

    EQUALS          shift and go to state 31
    COMMA           reduce using rule 11 (var_assign -> .)
    SEMICOLON       reduce using rule 11 (var_assign -> .)

    var_assign                     shift and go to state 32

state 25

    (20) const -> CTEDOUBLE .

    MULTIPLICATION  reduce using rule 20 (const -> CTEDOUBLE .)
    DIVISION        reduce using rule 20 (const -> CTEDOUBLE .)
    MOD             reduce using rule 20 (const -> CTEDOUBLE .)
    PLUS            reduce using rule 20 (const -> CTEDOUBLE .)
    MINUS           reduce using rule 20 (const -> CTEDOUBLE .)
    COMMA           reduce using rule 20 (const -> CTEDOUBLE .)
    RPAR            reduce using rule 20 (const -> CTEDOUBLE .)
    GREATER         reduce using rule 20 (const -> CTEDOUBLE .)
    LESS            reduce using rule 20 (const -> CTEDOUBLE .)
    GREATEROREQUAL  reduce using rule 20 (const -> CTEDOUBLE .)
    LESSOREQUAL     reduce using rule 20 (const -> CTEDOUBLE .)
    EQUALEQUALS     reduce using rule 20 (const -> CTEDOUBLE .)
    DIFFERENT       reduce using rule 20 (const -> CTEDOUBLE .)
    AND             reduce using rule 20 (const -> CTEDOUBLE .)
    OR              reduce using rule 20 (const -> CTEDOUBLE .)
    RSQRTBRACKET    reduce using rule 20 (const -> CTEDOUBLE .)
    SEMICOLON       reduce using rule 20 (const -> CTEDOUBLE .)


state 26

    (14) arr -> LSQRTBRACKET const . RSQRTBRACKET arr

    RSQRTBRACKET    shift and go to state 33


state 27

    (21) const -> CTEBOOL .

    MULTIPLICATION  reduce using rule 21 (const -> CTEBOOL .)
    DIVISION        reduce using rule 21 (const -> CTEBOOL .)
    MOD             reduce using rule 21 (const -> CTEBOOL .)
    PLUS            reduce using rule 21 (const -> CTEBOOL .)
    MINUS           reduce using rule 21 (const -> CTEBOOL .)
    COMMA           reduce using rule 21 (const -> CTEBOOL .)
    RPAR            reduce using rule 21 (const -> CTEBOOL .)
    GREATER         reduce using rule 21 (const -> CTEBOOL .)
    LESS            reduce using rule 21 (const -> CTEBOOL .)
    GREATEROREQUAL  reduce using rule 21 (const -> CTEBOOL .)
    LESSOREQUAL     reduce using rule 21 (const -> CTEBOOL .)
    EQUALEQUALS     reduce using rule 21 (const -> CTEBOOL .)
    DIFFERENT       reduce using rule 21 (const -> CTEBOOL .)
    AND             reduce using rule 21 (const -> CTEBOOL .)
    OR              reduce using rule 21 (const -> CTEBOOL .)
    RSQRTBRACKET    reduce using rule 21 (const -> CTEBOOL .)
    SEMICOLON       reduce using rule 21 (const -> CTEBOOL .)


state 28

    (19) const -> CTEINT .

    MULTIPLICATION  reduce using rule 19 (const -> CTEINT .)
    DIVISION        reduce using rule 19 (const -> CTEINT .)
    MOD             reduce using rule 19 (const -> CTEINT .)
    PLUS            reduce using rule 19 (const -> CTEINT .)
    MINUS           reduce using rule 19 (const -> CTEINT .)
    COMMA           reduce using rule 19 (const -> CTEINT .)
    RPAR            reduce using rule 19 (const -> CTEINT .)
    GREATER         reduce using rule 19 (const -> CTEINT .)
    LESS            reduce using rule 19 (const -> CTEINT .)
    GREATEROREQUAL  reduce using rule 19 (const -> CTEINT .)
    LESSOREQUAL     reduce using rule 19 (const -> CTEINT .)
    EQUALEQUALS     reduce using rule 19 (const -> CTEINT .)
    DIFFERENT       reduce using rule 19 (const -> CTEINT .)
    AND             reduce using rule 19 (const -> CTEINT .)
    OR              reduce using rule 19 (const -> CTEINT .)
    RSQRTBRACKET    reduce using rule 19 (const -> CTEINT .)
    SEMICOLON       reduce using rule 19 (const -> CTEINT .)


state 29

    (91) main -> MAIN main_to_proc_dir . main_block
    (93) main_block -> . LBRACKET more_vars more_statement RBRACKET

    LBRACKET        shift and go to state 35

    main_block                     shift and go to state 34

state 30

    (24) func -> FUNC func_type ID . to_proc_dir LPAR arguments RPAR func_block more_func
    (25) to_proc_dir -> .

    LPAR            reduce using rule 25 (to_proc_dir -> .)

    to_proc_dir                    shift and go to state 36

state 31

    (10) var_assign -> EQUALS . var_cte
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    const                          shift and go to state 38
    var_cte                        shift and go to state 39

state 32

    (8) vars_aux -> ID arr to_var_table var_assign . more_vars_aux
    (12) more_vars_aux -> . COMMA vars_aux
    (13) more_vars_aux -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 13 (more_vars_aux -> .)

    more_vars_aux                  shift and go to state 41

state 33

    (14) arr -> LSQRTBRACKET const RSQRTBRACKET . arr
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .

    LSQRTBRACKET    shift and go to state 15
    EQUALS          reduce using rule 15 (arr -> .)
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)
    MULTIPLICATION  reduce using rule 15 (arr -> .)
    DIVISION        reduce using rule 15 (arr -> .)
    MOD             reduce using rule 15 (arr -> .)
    PLUS            reduce using rule 15 (arr -> .)
    MINUS           reduce using rule 15 (arr -> .)
    RPAR            reduce using rule 15 (arr -> .)
    GREATER         reduce using rule 15 (arr -> .)
    LESS            reduce using rule 15 (arr -> .)
    GREATEROREQUAL  reduce using rule 15 (arr -> .)
    LESSOREQUAL     reduce using rule 15 (arr -> .)
    EQUALEQUALS     reduce using rule 15 (arr -> .)
    DIFFERENT       reduce using rule 15 (arr -> .)
    AND             reduce using rule 15 (arr -> .)
    OR              reduce using rule 15 (arr -> .)
    RSQRTBRACKET    reduce using rule 15 (arr -> .)

    arr                            shift and go to state 43

state 34

    (91) main -> MAIN main_to_proc_dir main_block .

    $end            reduce using rule 91 (main -> MAIN main_to_proc_dir main_block .)


state 35

    (93) main_block -> LBRACKET . more_vars more_statement RBRACKET
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 2
    more_vars                      shift and go to state 44
    vars                           shift and go to state 1

state 36

    (24) func -> FUNC func_type ID to_proc_dir . LPAR arguments RPAR func_block more_func

    LPAR            shift and go to state 45


state 37

    (18) var_cte -> func_call .

    MULTIPLICATION  reduce using rule 18 (var_cte -> func_call .)
    DIVISION        reduce using rule 18 (var_cte -> func_call .)
    MOD             reduce using rule 18 (var_cte -> func_call .)
    PLUS            reduce using rule 18 (var_cte -> func_call .)
    MINUS           reduce using rule 18 (var_cte -> func_call .)
    GREATER         reduce using rule 18 (var_cte -> func_call .)
    LESS            reduce using rule 18 (var_cte -> func_call .)
    GREATEROREQUAL  reduce using rule 18 (var_cte -> func_call .)
    LESSOREQUAL     reduce using rule 18 (var_cte -> func_call .)
    EQUALEQUALS     reduce using rule 18 (var_cte -> func_call .)
    DIFFERENT       reduce using rule 18 (var_cte -> func_call .)
    AND             reduce using rule 18 (var_cte -> func_call .)
    OR              reduce using rule 18 (var_cte -> func_call .)
    SEMICOLON       reduce using rule 18 (var_cte -> func_call .)
    RPAR            reduce using rule 18 (var_cte -> func_call .)
    COMMA           reduce using rule 18 (var_cte -> func_call .)
    RSQRTBRACKET    reduce using rule 18 (var_cte -> func_call .)


state 38

    (16) var_cte -> const .

    MULTIPLICATION  reduce using rule 16 (var_cte -> const .)
    DIVISION        reduce using rule 16 (var_cte -> const .)
    MOD             reduce using rule 16 (var_cte -> const .)
    PLUS            reduce using rule 16 (var_cte -> const .)
    MINUS           reduce using rule 16 (var_cte -> const .)
    GREATER         reduce using rule 16 (var_cte -> const .)
    LESS            reduce using rule 16 (var_cte -> const .)
    GREATEROREQUAL  reduce using rule 16 (var_cte -> const .)
    LESSOREQUAL     reduce using rule 16 (var_cte -> const .)
    EQUALEQUALS     reduce using rule 16 (var_cte -> const .)
    DIFFERENT       reduce using rule 16 (var_cte -> const .)
    AND             reduce using rule 16 (var_cte -> const .)
    OR              reduce using rule 16 (var_cte -> const .)
    SEMICOLON       reduce using rule 16 (var_cte -> const .)
    RPAR            reduce using rule 16 (var_cte -> const .)
    COMMA           reduce using rule 16 (var_cte -> const .)
    RSQRTBRACKET    reduce using rule 16 (var_cte -> const .)


state 39

    (10) var_assign -> EQUALS var_cte .

    COMMA           reduce using rule 10 (var_assign -> EQUALS var_cte .)
    SEMICOLON       reduce using rule 10 (var_assign -> EQUALS var_cte .)


state 40

    (17) var_cte -> ID . arr
    (53) func_call -> ID . LPAR params RPAR
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .

    LPAR            shift and go to state 46
    LSQRTBRACKET    shift and go to state 15
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)
    MULTIPLICATION  reduce using rule 15 (arr -> .)
    DIVISION        reduce using rule 15 (arr -> .)
    MOD             reduce using rule 15 (arr -> .)
    PLUS            reduce using rule 15 (arr -> .)
    MINUS           reduce using rule 15 (arr -> .)
    RPAR            reduce using rule 15 (arr -> .)
    GREATER         reduce using rule 15 (arr -> .)
    LESS            reduce using rule 15 (arr -> .)
    GREATEROREQUAL  reduce using rule 15 (arr -> .)
    LESSOREQUAL     reduce using rule 15 (arr -> .)
    EQUALEQUALS     reduce using rule 15 (arr -> .)
    DIFFERENT       reduce using rule 15 (arr -> .)
    AND             reduce using rule 15 (arr -> .)
    OR              reduce using rule 15 (arr -> .)
    RSQRTBRACKET    reduce using rule 15 (arr -> .)

    arr                            shift and go to state 47

state 41

    (8) vars_aux -> ID arr to_var_table var_assign more_vars_aux .

    SEMICOLON       reduce using rule 8 (vars_aux -> ID arr to_var_table var_assign more_vars_aux .)


state 42

    (12) more_vars_aux -> COMMA . vars_aux
    (8) vars_aux -> . ID arr to_var_table var_assign more_vars_aux

    ID              shift and go to state 9

    vars_aux                       shift and go to state 48

state 43

    (14) arr -> LSQRTBRACKET const RSQRTBRACKET arr .

    EQUALS          reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    COMMA           reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    SEMICOLON       reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MULTIPLICATION  reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    DIVISION        reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MOD             reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    PLUS            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MINUS           reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    RPAR            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    GREATER         reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    LESS            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    GREATEROREQUAL  reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    LESSOREQUAL     reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    EQUALEQUALS     reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    DIFFERENT       reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    AND             reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    OR              reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    RSQRTBRACKET    reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)


state 44

    (93) main_block -> LBRACKET more_vars . more_statement RBRACKET
    (38) more_statement -> . statement more_statement
    (39) more_statement -> .
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . cicle
    (43) statement -> . condition
    (44) statement -> . assignation
    (45) statement -> . func_call SEMICOLON
    (46) read -> . READ LPAR ID arr_par RPAR SEMICOLON
    (47) write -> . WRITE LPAR exp RPAR SEMICOLON
    (48) cicle -> . WHILE LPAR expression RPAR block
    (49) condition -> . IF LPAR expression RPAR block else_posible
    (52) assignation -> . ID arr_par EQUALS expression SEMICOLON
    (53) func_call -> . ID LPAR params RPAR

    RBRACKET        reduce using rule 39 (more_statement -> .)
    READ            shift and go to state 49
    WRITE           shift and go to state 55
    WHILE           shift and go to state 50
    IF              shift and go to state 58
    ID              shift and go to state 56

    func_call                      shift and go to state 59
    assignation                    shift and go to state 60
    read                           shift and go to state 54
    cicle                          shift and go to state 51
    write                          shift and go to state 52
    statement                      shift and go to state 53
    more_statement                 shift and go to state 61
    condition                      shift and go to state 57

state 45

    (24) func -> FUNC func_type ID to_proc_dir LPAR . arguments RPAR func_block more_func
    (30) arguments -> . var_type ID to_args more_args
    (31) arguments -> .
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    RPAR            reduce using rule 31 (arguments -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 62
    arguments                      shift and go to state 63

state 46

    (53) func_call -> ID LPAR . params RPAR
    (54) params -> . exp more_params
    (55) params -> .
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    RPAR            reduce using rule 55 (params -> .)
    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    var_cte                        shift and go to state 69
    params                         shift and go to state 66
    exp                            shift and go to state 67
    factor                         shift and go to state 68

state 47

    (17) var_cte -> ID arr .

    MULTIPLICATION  reduce using rule 17 (var_cte -> ID arr .)
    DIVISION        reduce using rule 17 (var_cte -> ID arr .)
    MOD             reduce using rule 17 (var_cte -> ID arr .)
    PLUS            reduce using rule 17 (var_cte -> ID arr .)
    MINUS           reduce using rule 17 (var_cte -> ID arr .)
    GREATER         reduce using rule 17 (var_cte -> ID arr .)
    LESS            reduce using rule 17 (var_cte -> ID arr .)
    GREATEROREQUAL  reduce using rule 17 (var_cte -> ID arr .)
    LESSOREQUAL     reduce using rule 17 (var_cte -> ID arr .)
    EQUALEQUALS     reduce using rule 17 (var_cte -> ID arr .)
    DIFFERENT       reduce using rule 17 (var_cte -> ID arr .)
    AND             reduce using rule 17 (var_cte -> ID arr .)
    OR              reduce using rule 17 (var_cte -> ID arr .)
    SEMICOLON       reduce using rule 17 (var_cte -> ID arr .)
    RPAR            reduce using rule 17 (var_cte -> ID arr .)
    COMMA           reduce using rule 17 (var_cte -> ID arr .)
    RSQRTBRACKET    reduce using rule 17 (var_cte -> ID arr .)


state 48

    (12) more_vars_aux -> COMMA vars_aux .

    SEMICOLON       reduce using rule 12 (more_vars_aux -> COMMA vars_aux .)


state 49

    (46) read -> READ . LPAR ID arr_par RPAR SEMICOLON

    LPAR            shift and go to state 70


state 50

    (48) cicle -> WHILE . LPAR expression RPAR block

    LPAR            shift and go to state 71


state 51

    (42) statement -> cicle .

    READ            reduce using rule 42 (statement -> cicle .)
    WRITE           reduce using rule 42 (statement -> cicle .)
    WHILE           reduce using rule 42 (statement -> cicle .)
    IF              reduce using rule 42 (statement -> cicle .)
    ID              reduce using rule 42 (statement -> cicle .)
    RBRACKET        reduce using rule 42 (statement -> cicle .)
    RETURN          reduce using rule 42 (statement -> cicle .)


state 52

    (41) statement -> write .

    READ            reduce using rule 41 (statement -> write .)
    WRITE           reduce using rule 41 (statement -> write .)
    WHILE           reduce using rule 41 (statement -> write .)
    IF              reduce using rule 41 (statement -> write .)
    ID              reduce using rule 41 (statement -> write .)
    RBRACKET        reduce using rule 41 (statement -> write .)
    RETURN          reduce using rule 41 (statement -> write .)


state 53

    (38) more_statement -> statement . more_statement
    (38) more_statement -> . statement more_statement
    (39) more_statement -> .
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . cicle
    (43) statement -> . condition
    (44) statement -> . assignation
    (45) statement -> . func_call SEMICOLON
    (46) read -> . READ LPAR ID arr_par RPAR SEMICOLON
    (47) write -> . WRITE LPAR exp RPAR SEMICOLON
    (48) cicle -> . WHILE LPAR expression RPAR block
    (49) condition -> . IF LPAR expression RPAR block else_posible
    (52) assignation -> . ID arr_par EQUALS expression SEMICOLON
    (53) func_call -> . ID LPAR params RPAR

    RBRACKET        reduce using rule 39 (more_statement -> .)
    RETURN          reduce using rule 39 (more_statement -> .)
    READ            shift and go to state 49
    WRITE           shift and go to state 55
    WHILE           shift and go to state 50
    IF              shift and go to state 58
    ID              shift and go to state 56

    func_call                      shift and go to state 59
    assignation                    shift and go to state 60
    read                           shift and go to state 54
    cicle                          shift and go to state 51
    write                          shift and go to state 52
    statement                      shift and go to state 53
    more_statement                 shift and go to state 72
    condition                      shift and go to state 57

state 54

    (40) statement -> read .

    READ            reduce using rule 40 (statement -> read .)
    WRITE           reduce using rule 40 (statement -> read .)
    WHILE           reduce using rule 40 (statement -> read .)
    IF              reduce using rule 40 (statement -> read .)
    ID              reduce using rule 40 (statement -> read .)
    RBRACKET        reduce using rule 40 (statement -> read .)
    RETURN          reduce using rule 40 (statement -> read .)


state 55

    (47) write -> WRITE . LPAR exp RPAR SEMICOLON

    LPAR            shift and go to state 73


state 56

    (52) assignation -> ID . arr_par EQUALS expression SEMICOLON
    (53) func_call -> ID . LPAR params RPAR
    (59) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (60) arr_par -> .

    LPAR            shift and go to state 46
    LSQRTBRACKET    shift and go to state 74
    EQUALS          reduce using rule 60 (arr_par -> .)

    arr_par                        shift and go to state 75

state 57

    (43) statement -> condition .

    READ            reduce using rule 43 (statement -> condition .)
    WRITE           reduce using rule 43 (statement -> condition .)
    WHILE           reduce using rule 43 (statement -> condition .)
    IF              reduce using rule 43 (statement -> condition .)
    ID              reduce using rule 43 (statement -> condition .)
    RBRACKET        reduce using rule 43 (statement -> condition .)
    RETURN          reduce using rule 43 (statement -> condition .)


state 58

    (49) condition -> IF . LPAR expression RPAR block else_posible

    LPAR            shift and go to state 76


state 59

    (45) statement -> func_call . SEMICOLON

    SEMICOLON       shift and go to state 77


state 60

    (44) statement -> assignation .

    READ            reduce using rule 44 (statement -> assignation .)
    WRITE           reduce using rule 44 (statement -> assignation .)
    WHILE           reduce using rule 44 (statement -> assignation .)
    IF              reduce using rule 44 (statement -> assignation .)
    ID              reduce using rule 44 (statement -> assignation .)
    RBRACKET        reduce using rule 44 (statement -> assignation .)
    RETURN          reduce using rule 44 (statement -> assignation .)


state 61

    (93) main_block -> LBRACKET more_vars more_statement . RBRACKET

    RBRACKET        shift and go to state 78


state 62

    (30) arguments -> var_type . ID to_args more_args

    ID              shift and go to state 79


state 63

    (24) func -> FUNC func_type ID to_proc_dir LPAR arguments . RPAR func_block more_func

    RPAR            shift and go to state 80


state 64

    (73) factor -> LPAR . add_to_pilaOptr expression RPAR pop_false_bottom
    (86) add_to_pilaOptr -> .

    LPAR            reduce using rule 86 (add_to_pilaOptr -> .)
    ID              reduce using rule 86 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 86 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 86 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 86 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 81

state 65

    (67) exp -> term . exp_aux
    (68) exp_aux -> . pl add_to_pilaOptr term exp_aux
    (69) exp_aux -> .
    (83) pl -> . PLUS
    (84) pl -> . MINUS

    COMMA           reduce using rule 69 (exp_aux -> .)
    RPAR            reduce using rule 69 (exp_aux -> .)
    GREATER         reduce using rule 69 (exp_aux -> .)
    LESS            reduce using rule 69 (exp_aux -> .)
    GREATEROREQUAL  reduce using rule 69 (exp_aux -> .)
    LESSOREQUAL     reduce using rule 69 (exp_aux -> .)
    EQUALEQUALS     reduce using rule 69 (exp_aux -> .)
    DIFFERENT       reduce using rule 69 (exp_aux -> .)
    AND             reduce using rule 69 (exp_aux -> .)
    OR              reduce using rule 69 (exp_aux -> .)
    RSQRTBRACKET    reduce using rule 69 (exp_aux -> .)
    SEMICOLON       reduce using rule 69 (exp_aux -> .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84

    exp_aux                        shift and go to state 82
    pl                             shift and go to state 85

state 66

    (53) func_call -> ID LPAR params . RPAR

    RPAR            shift and go to state 86


state 67

    (54) params -> exp . more_params
    (56) more_params -> . COMMA exp more_params
    (57) more_params -> .

    COMMA           shift and go to state 88
    RPAR            reduce using rule 57 (more_params -> .)

    more_params                    shift and go to state 87

state 68

    (70) term -> factor . term_aux
    (71) term_aux -> . dm add_to_pilaOptr factor term_aux
    (72) term_aux -> .
    (88) dm -> . MULTIPLICATION
    (89) dm -> . DIVISION
    (90) dm -> . MOD

    PLUS            reduce using rule 72 (term_aux -> .)
    MINUS           reduce using rule 72 (term_aux -> .)
    COMMA           reduce using rule 72 (term_aux -> .)
    RPAR            reduce using rule 72 (term_aux -> .)
    GREATER         reduce using rule 72 (term_aux -> .)
    LESS            reduce using rule 72 (term_aux -> .)
    GREATEROREQUAL  reduce using rule 72 (term_aux -> .)
    LESSOREQUAL     reduce using rule 72 (term_aux -> .)
    EQUALEQUALS     reduce using rule 72 (term_aux -> .)
    DIFFERENT       reduce using rule 72 (term_aux -> .)
    AND             reduce using rule 72 (term_aux -> .)
    OR              reduce using rule 72 (term_aux -> .)
    RSQRTBRACKET    reduce using rule 72 (term_aux -> .)
    SEMICOLON       reduce using rule 72 (term_aux -> .)
    MULTIPLICATION  shift and go to state 92
    DIVISION        shift and go to state 89
    MOD             shift and go to state 93

    dm                             shift and go to state 90
    term_aux                       shift and go to state 91

state 69

    (74) factor -> var_cte . to_pilaOp
    (85) to_pilaOp -> .

    MULTIPLICATION  reduce using rule 85 (to_pilaOp -> .)
    DIVISION        reduce using rule 85 (to_pilaOp -> .)
    MOD             reduce using rule 85 (to_pilaOp -> .)
    PLUS            reduce using rule 85 (to_pilaOp -> .)
    MINUS           reduce using rule 85 (to_pilaOp -> .)
    COMMA           reduce using rule 85 (to_pilaOp -> .)
    RPAR            reduce using rule 85 (to_pilaOp -> .)
    GREATER         reduce using rule 85 (to_pilaOp -> .)
    LESS            reduce using rule 85 (to_pilaOp -> .)
    GREATEROREQUAL  reduce using rule 85 (to_pilaOp -> .)
    LESSOREQUAL     reduce using rule 85 (to_pilaOp -> .)
    EQUALEQUALS     reduce using rule 85 (to_pilaOp -> .)
    DIFFERENT       reduce using rule 85 (to_pilaOp -> .)
    AND             reduce using rule 85 (to_pilaOp -> .)
    OR              reduce using rule 85 (to_pilaOp -> .)
    RSQRTBRACKET    reduce using rule 85 (to_pilaOp -> .)
    SEMICOLON       reduce using rule 85 (to_pilaOp -> .)

    to_pilaOp                      shift and go to state 94

state 70

    (46) read -> READ LPAR . ID arr_par RPAR SEMICOLON

    ID              shift and go to state 95


state 71

    (48) cicle -> WHILE LPAR . expression RPAR block
    (61) expression -> . conc expression_aux
    (64) conc -> . exp conc_aux
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    conc                           shift and go to state 96
    var_cte                        shift and go to state 69
    exp                            shift and go to state 97
    factor                         shift and go to state 68
    expression                     shift and go to state 98

state 72

    (38) more_statement -> statement more_statement .

    RBRACKET        reduce using rule 38 (more_statement -> statement more_statement .)
    RETURN          reduce using rule 38 (more_statement -> statement more_statement .)


state 73

    (47) write -> WRITE LPAR . exp RPAR SEMICOLON
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    var_cte                        shift and go to state 69
    exp                            shift and go to state 99
    factor                         shift and go to state 68

state 74

    (59) arr_par -> LSQRTBRACKET . exp RSQRTBRACKET arr_par
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    var_cte                        shift and go to state 69
    exp                            shift and go to state 100
    factor                         shift and go to state 68

state 75

    (52) assignation -> ID arr_par . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 101


state 76

    (49) condition -> IF LPAR . expression RPAR block else_posible
    (61) expression -> . conc expression_aux
    (64) conc -> . exp conc_aux
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    expression                     shift and go to state 102
    conc                           shift and go to state 96
    var_cte                        shift and go to state 69
    exp                            shift and go to state 97
    factor                         shift and go to state 68

state 77

    (45) statement -> func_call SEMICOLON .

    READ            reduce using rule 45 (statement -> func_call SEMICOLON .)
    WRITE           reduce using rule 45 (statement -> func_call SEMICOLON .)
    WHILE           reduce using rule 45 (statement -> func_call SEMICOLON .)
    IF              reduce using rule 45 (statement -> func_call SEMICOLON .)
    ID              reduce using rule 45 (statement -> func_call SEMICOLON .)
    RBRACKET        reduce using rule 45 (statement -> func_call SEMICOLON .)
    RETURN          reduce using rule 45 (statement -> func_call SEMICOLON .)


state 78

    (93) main_block -> LBRACKET more_vars more_statement RBRACKET .

    $end            reduce using rule 93 (main_block -> LBRACKET more_vars more_statement RBRACKET .)


state 79

    (30) arguments -> var_type ID . to_args more_args
    (34) to_args -> .

    COMMA           reduce using rule 34 (to_args -> .)
    RPAR            reduce using rule 34 (to_args -> .)

    to_args                        shift and go to state 103

state 80

    (24) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR . func_block more_func
    (35) func_block -> . LBRACKET more_vars more_statement optional_return RBRACKET

    LBRACKET        shift and go to state 105

    func_block                     shift and go to state 104

state 81

    (73) factor -> LPAR add_to_pilaOptr . expression RPAR pop_false_bottom
    (61) expression -> . conc expression_aux
    (64) conc -> . exp conc_aux
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    conc                           shift and go to state 96
    var_cte                        shift and go to state 69
    exp                            shift and go to state 97
    factor                         shift and go to state 68
    expression                     shift and go to state 106

state 82

    (67) exp -> term exp_aux .

    RSQRTBRACKET    reduce using rule 67 (exp -> term exp_aux .)
    GREATER         reduce using rule 67 (exp -> term exp_aux .)
    LESS            reduce using rule 67 (exp -> term exp_aux .)
    GREATEROREQUAL  reduce using rule 67 (exp -> term exp_aux .)
    LESSOREQUAL     reduce using rule 67 (exp -> term exp_aux .)
    EQUALEQUALS     reduce using rule 67 (exp -> term exp_aux .)
    DIFFERENT       reduce using rule 67 (exp -> term exp_aux .)
    AND             reduce using rule 67 (exp -> term exp_aux .)
    OR              reduce using rule 67 (exp -> term exp_aux .)
    SEMICOLON       reduce using rule 67 (exp -> term exp_aux .)
    RPAR            reduce using rule 67 (exp -> term exp_aux .)
    COMMA           reduce using rule 67 (exp -> term exp_aux .)


state 83

    (83) pl -> PLUS .

    LPAR            reduce using rule 83 (pl -> PLUS .)
    ID              reduce using rule 83 (pl -> PLUS .)
    CTEINT          reduce using rule 83 (pl -> PLUS .)
    CTEDOUBLE       reduce using rule 83 (pl -> PLUS .)
    CTEBOOL         reduce using rule 83 (pl -> PLUS .)


state 84

    (84) pl -> MINUS .

    LPAR            reduce using rule 84 (pl -> MINUS .)
    ID              reduce using rule 84 (pl -> MINUS .)
    CTEINT          reduce using rule 84 (pl -> MINUS .)
    CTEDOUBLE       reduce using rule 84 (pl -> MINUS .)
    CTEBOOL         reduce using rule 84 (pl -> MINUS .)


state 85

    (68) exp_aux -> pl . add_to_pilaOptr term exp_aux
    (86) add_to_pilaOptr -> .

    LPAR            reduce using rule 86 (add_to_pilaOptr -> .)
    ID              reduce using rule 86 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 86 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 86 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 86 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 107

state 86

    (53) func_call -> ID LPAR params RPAR .

    MULTIPLICATION  reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    DIVISION        reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    MOD             reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    PLUS            reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    MINUS           reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    GREATER         reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    LESS            reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    GREATEROREQUAL  reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    LESSOREQUAL     reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    EQUALEQUALS     reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    DIFFERENT       reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    AND             reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    OR              reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    RPAR            reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    SEMICOLON       reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    COMMA           reduce using rule 53 (func_call -> ID LPAR params RPAR .)
    RSQRTBRACKET    reduce using rule 53 (func_call -> ID LPAR params RPAR .)


state 87

    (54) params -> exp more_params .

    RPAR            reduce using rule 54 (params -> exp more_params .)


state 88

    (56) more_params -> COMMA . exp more_params
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    var_cte                        shift and go to state 69
    exp                            shift and go to state 108
    factor                         shift and go to state 68

state 89

    (89) dm -> DIVISION .

    LPAR            reduce using rule 89 (dm -> DIVISION .)
    ID              reduce using rule 89 (dm -> DIVISION .)
    CTEINT          reduce using rule 89 (dm -> DIVISION .)
    CTEDOUBLE       reduce using rule 89 (dm -> DIVISION .)
    CTEBOOL         reduce using rule 89 (dm -> DIVISION .)


state 90

    (71) term_aux -> dm . add_to_pilaOptr factor term_aux
    (86) add_to_pilaOptr -> .

    LPAR            reduce using rule 86 (add_to_pilaOptr -> .)
    ID              reduce using rule 86 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 86 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 86 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 86 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 109

state 91

    (70) term -> factor term_aux .

    PLUS            reduce using rule 70 (term -> factor term_aux .)
    MINUS           reduce using rule 70 (term -> factor term_aux .)
    GREATER         reduce using rule 70 (term -> factor term_aux .)
    LESS            reduce using rule 70 (term -> factor term_aux .)
    GREATEROREQUAL  reduce using rule 70 (term -> factor term_aux .)
    LESSOREQUAL     reduce using rule 70 (term -> factor term_aux .)
    EQUALEQUALS     reduce using rule 70 (term -> factor term_aux .)
    DIFFERENT       reduce using rule 70 (term -> factor term_aux .)
    AND             reduce using rule 70 (term -> factor term_aux .)
    OR              reduce using rule 70 (term -> factor term_aux .)
    RPAR            reduce using rule 70 (term -> factor term_aux .)
    COMMA           reduce using rule 70 (term -> factor term_aux .)
    SEMICOLON       reduce using rule 70 (term -> factor term_aux .)
    RSQRTBRACKET    reduce using rule 70 (term -> factor term_aux .)


state 92

    (88) dm -> MULTIPLICATION .

    LPAR            reduce using rule 88 (dm -> MULTIPLICATION .)
    ID              reduce using rule 88 (dm -> MULTIPLICATION .)
    CTEINT          reduce using rule 88 (dm -> MULTIPLICATION .)
    CTEDOUBLE       reduce using rule 88 (dm -> MULTIPLICATION .)
    CTEBOOL         reduce using rule 88 (dm -> MULTIPLICATION .)


state 93

    (90) dm -> MOD .

    LPAR            reduce using rule 90 (dm -> MOD .)
    ID              reduce using rule 90 (dm -> MOD .)
    CTEINT          reduce using rule 90 (dm -> MOD .)
    CTEDOUBLE       reduce using rule 90 (dm -> MOD .)
    CTEBOOL         reduce using rule 90 (dm -> MOD .)


state 94

    (74) factor -> var_cte to_pilaOp .

    MULTIPLICATION  reduce using rule 74 (factor -> var_cte to_pilaOp .)
    DIVISION        reduce using rule 74 (factor -> var_cte to_pilaOp .)
    MOD             reduce using rule 74 (factor -> var_cte to_pilaOp .)
    PLUS            reduce using rule 74 (factor -> var_cte to_pilaOp .)
    MINUS           reduce using rule 74 (factor -> var_cte to_pilaOp .)
    GREATER         reduce using rule 74 (factor -> var_cte to_pilaOp .)
    LESS            reduce using rule 74 (factor -> var_cte to_pilaOp .)
    GREATEROREQUAL  reduce using rule 74 (factor -> var_cte to_pilaOp .)
    LESSOREQUAL     reduce using rule 74 (factor -> var_cte to_pilaOp .)
    EQUALEQUALS     reduce using rule 74 (factor -> var_cte to_pilaOp .)
    DIFFERENT       reduce using rule 74 (factor -> var_cte to_pilaOp .)
    AND             reduce using rule 74 (factor -> var_cte to_pilaOp .)
    OR              reduce using rule 74 (factor -> var_cte to_pilaOp .)
    RPAR            reduce using rule 74 (factor -> var_cte to_pilaOp .)
    SEMICOLON       reduce using rule 74 (factor -> var_cte to_pilaOp .)
    RSQRTBRACKET    reduce using rule 74 (factor -> var_cte to_pilaOp .)
    COMMA           reduce using rule 74 (factor -> var_cte to_pilaOp .)


state 95

    (46) read -> READ LPAR ID . arr_par RPAR SEMICOLON
    (59) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (60) arr_par -> .

    LSQRTBRACKET    shift and go to state 74
    RPAR            reduce using rule 60 (arr_par -> .)

    arr_par                        shift and go to state 110

state 96

    (61) expression -> conc . expression_aux
    (62) expression_aux -> . ao add_to_pilaOptr conc expression_aux
    (63) expression_aux -> .
    (75) ao -> . AND
    (76) ao -> . OR

    RPAR            reduce using rule 63 (expression_aux -> .)
    SEMICOLON       reduce using rule 63 (expression_aux -> .)
    AND             shift and go to state 111
    OR              shift and go to state 114

    expression_aux                 shift and go to state 113
    ao                             shift and go to state 112

state 97

    (64) conc -> exp . conc_aux
    (65) conc_aux -> . comp add_to_pilaOptr exp
    (66) conc_aux -> .
    (77) comp -> . GREATER
    (78) comp -> . LESS
    (79) comp -> . GREATEROREQUAL
    (80) comp -> . LESSOREQUAL
    (81) comp -> . EQUALEQUALS
    (82) comp -> . DIFFERENT

    AND             reduce using rule 66 (conc_aux -> .)
    OR              reduce using rule 66 (conc_aux -> .)
    RPAR            reduce using rule 66 (conc_aux -> .)
    SEMICOLON       reduce using rule 66 (conc_aux -> .)
    GREATER         shift and go to state 117
    LESS            shift and go to state 118
    GREATEROREQUAL  shift and go to state 121
    LESSOREQUAL     shift and go to state 116
    EQUALEQUALS     shift and go to state 119
    DIFFERENT       shift and go to state 115

    conc_aux                       shift and go to state 122
    comp                           shift and go to state 120

state 98

    (48) cicle -> WHILE LPAR expression . RPAR block

    RPAR            shift and go to state 123


state 99

    (47) write -> WRITE LPAR exp . RPAR SEMICOLON

    RPAR            shift and go to state 124


state 100

    (59) arr_par -> LSQRTBRACKET exp . RSQRTBRACKET arr_par

    RSQRTBRACKET    shift and go to state 125


state 101

    (52) assignation -> ID arr_par EQUALS . expression SEMICOLON
    (61) expression -> . conc expression_aux
    (64) conc -> . exp conc_aux
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    conc                           shift and go to state 96
    var_cte                        shift and go to state 69
    exp                            shift and go to state 97
    factor                         shift and go to state 68
    expression                     shift and go to state 126

state 102

    (49) condition -> IF LPAR expression . RPAR block else_posible

    RPAR            shift and go to state 127


state 103

    (30) arguments -> var_type ID to_args . more_args
    (32) more_args -> . COMMA var_type ID to_args more_args
    (33) more_args -> .

    COMMA           shift and go to state 129
    RPAR            reduce using rule 33 (more_args -> .)

    more_args                      shift and go to state 128

state 104

    (24) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block . more_func
    (22) more_func -> . func
    (23) more_func -> .
    (24) func -> . FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func

    MAIN            reduce using rule 23 (more_func -> .)
    FUNC            shift and go to state 12

    func                           shift and go to state 10
    more_func                      shift and go to state 130

state 105

    (35) func_block -> LBRACKET . more_vars more_statement optional_return RBRACKET
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RETURN          reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 2
    vars                           shift and go to state 1
    more_vars                      shift and go to state 131

state 106

    (73) factor -> LPAR add_to_pilaOptr expression . RPAR pop_false_bottom

    RPAR            shift and go to state 132


state 107

    (68) exp_aux -> pl add_to_pilaOptr . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 133
    const                          shift and go to state 38
    var_cte                        shift and go to state 69
    factor                         shift and go to state 68

state 108

    (56) more_params -> COMMA exp . more_params
    (56) more_params -> . COMMA exp more_params
    (57) more_params -> .

    COMMA           shift and go to state 88
    RPAR            reduce using rule 57 (more_params -> .)

    more_params                    shift and go to state 134

state 109

    (71) term_aux -> dm add_to_pilaOptr . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    const                          shift and go to state 38
    var_cte                        shift and go to state 69
    factor                         shift and go to state 135

state 110

    (46) read -> READ LPAR ID arr_par . RPAR SEMICOLON

    RPAR            shift and go to state 136


state 111

    (75) ao -> AND .

    LPAR            reduce using rule 75 (ao -> AND .)
    ID              reduce using rule 75 (ao -> AND .)
    CTEINT          reduce using rule 75 (ao -> AND .)
    CTEDOUBLE       reduce using rule 75 (ao -> AND .)
    CTEBOOL         reduce using rule 75 (ao -> AND .)


state 112

    (62) expression_aux -> ao . add_to_pilaOptr conc expression_aux
    (86) add_to_pilaOptr -> .

    LPAR            reduce using rule 86 (add_to_pilaOptr -> .)
    ID              reduce using rule 86 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 86 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 86 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 86 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 137

state 113

    (61) expression -> conc expression_aux .

    RPAR            reduce using rule 61 (expression -> conc expression_aux .)
    SEMICOLON       reduce using rule 61 (expression -> conc expression_aux .)


state 114

    (76) ao -> OR .

    LPAR            reduce using rule 76 (ao -> OR .)
    ID              reduce using rule 76 (ao -> OR .)
    CTEINT          reduce using rule 76 (ao -> OR .)
    CTEDOUBLE       reduce using rule 76 (ao -> OR .)
    CTEBOOL         reduce using rule 76 (ao -> OR .)


state 115

    (82) comp -> DIFFERENT .

    LPAR            reduce using rule 82 (comp -> DIFFERENT .)
    ID              reduce using rule 82 (comp -> DIFFERENT .)
    CTEINT          reduce using rule 82 (comp -> DIFFERENT .)
    CTEDOUBLE       reduce using rule 82 (comp -> DIFFERENT .)
    CTEBOOL         reduce using rule 82 (comp -> DIFFERENT .)


state 116

    (80) comp -> LESSOREQUAL .

    LPAR            reduce using rule 80 (comp -> LESSOREQUAL .)
    ID              reduce using rule 80 (comp -> LESSOREQUAL .)
    CTEINT          reduce using rule 80 (comp -> LESSOREQUAL .)
    CTEDOUBLE       reduce using rule 80 (comp -> LESSOREQUAL .)
    CTEBOOL         reduce using rule 80 (comp -> LESSOREQUAL .)


state 117

    (77) comp -> GREATER .

    LPAR            reduce using rule 77 (comp -> GREATER .)
    ID              reduce using rule 77 (comp -> GREATER .)
    CTEINT          reduce using rule 77 (comp -> GREATER .)
    CTEDOUBLE       reduce using rule 77 (comp -> GREATER .)
    CTEBOOL         reduce using rule 77 (comp -> GREATER .)


state 118

    (78) comp -> LESS .

    LPAR            reduce using rule 78 (comp -> LESS .)
    ID              reduce using rule 78 (comp -> LESS .)
    CTEINT          reduce using rule 78 (comp -> LESS .)
    CTEDOUBLE       reduce using rule 78 (comp -> LESS .)
    CTEBOOL         reduce using rule 78 (comp -> LESS .)


state 119

    (81) comp -> EQUALEQUALS .

    LPAR            reduce using rule 81 (comp -> EQUALEQUALS .)
    ID              reduce using rule 81 (comp -> EQUALEQUALS .)
    CTEINT          reduce using rule 81 (comp -> EQUALEQUALS .)
    CTEDOUBLE       reduce using rule 81 (comp -> EQUALEQUALS .)
    CTEBOOL         reduce using rule 81 (comp -> EQUALEQUALS .)


state 120

    (65) conc_aux -> comp . add_to_pilaOptr exp
    (86) add_to_pilaOptr -> .

    LPAR            reduce using rule 86 (add_to_pilaOptr -> .)
    ID              reduce using rule 86 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 86 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 86 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 86 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 138

state 121

    (79) comp -> GREATEROREQUAL .

    LPAR            reduce using rule 79 (comp -> GREATEROREQUAL .)
    ID              reduce using rule 79 (comp -> GREATEROREQUAL .)
    CTEINT          reduce using rule 79 (comp -> GREATEROREQUAL .)
    CTEDOUBLE       reduce using rule 79 (comp -> GREATEROREQUAL .)
    CTEBOOL         reduce using rule 79 (comp -> GREATEROREQUAL .)


state 122

    (64) conc -> exp conc_aux .

    AND             reduce using rule 64 (conc -> exp conc_aux .)
    OR              reduce using rule 64 (conc -> exp conc_aux .)
    RPAR            reduce using rule 64 (conc -> exp conc_aux .)
    SEMICOLON       reduce using rule 64 (conc -> exp conc_aux .)


state 123

    (48) cicle -> WHILE LPAR expression RPAR . block
    (58) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 139

    block                          shift and go to state 140

state 124

    (47) write -> WRITE LPAR exp RPAR . SEMICOLON

    SEMICOLON       shift and go to state 141


state 125

    (59) arr_par -> LSQRTBRACKET exp RSQRTBRACKET . arr_par
    (59) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (60) arr_par -> .

    LSQRTBRACKET    shift and go to state 74
    EQUALS          reduce using rule 60 (arr_par -> .)
    RPAR            reduce using rule 60 (arr_par -> .)

    arr_par                        shift and go to state 142

state 126

    (52) assignation -> ID arr_par EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 143


state 127

    (49) condition -> IF LPAR expression RPAR . block else_posible
    (58) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 139

    block                          shift and go to state 144

state 128

    (30) arguments -> var_type ID to_args more_args .

    RPAR            reduce using rule 30 (arguments -> var_type ID to_args more_args .)


state 129

    (32) more_args -> COMMA . var_type ID to_args more_args
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 145

state 130

    (24) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func .

    MAIN            reduce using rule 24 (func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func .)


state 131

    (35) func_block -> LBRACKET more_vars . more_statement optional_return RBRACKET
    (38) more_statement -> . statement more_statement
    (39) more_statement -> .
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . cicle
    (43) statement -> . condition
    (44) statement -> . assignation
    (45) statement -> . func_call SEMICOLON
    (46) read -> . READ LPAR ID arr_par RPAR SEMICOLON
    (47) write -> . WRITE LPAR exp RPAR SEMICOLON
    (48) cicle -> . WHILE LPAR expression RPAR block
    (49) condition -> . IF LPAR expression RPAR block else_posible
    (52) assignation -> . ID arr_par EQUALS expression SEMICOLON
    (53) func_call -> . ID LPAR params RPAR

    RETURN          reduce using rule 39 (more_statement -> .)
    RBRACKET        reduce using rule 39 (more_statement -> .)
    READ            shift and go to state 49
    WRITE           shift and go to state 55
    WHILE           shift and go to state 50
    IF              shift and go to state 58
    ID              shift and go to state 56

    func_call                      shift and go to state 59
    assignation                    shift and go to state 60
    read                           shift and go to state 54
    more_statement                 shift and go to state 146
    write                          shift and go to state 52
    condition                      shift and go to state 57
    statement                      shift and go to state 53
    cicle                          shift and go to state 51

state 132

    (73) factor -> LPAR add_to_pilaOptr expression RPAR . pop_false_bottom
    (87) pop_false_bottom -> .

    MULTIPLICATION  reduce using rule 87 (pop_false_bottom -> .)
    DIVISION        reduce using rule 87 (pop_false_bottom -> .)
    MOD             reduce using rule 87 (pop_false_bottom -> .)
    PLUS            reduce using rule 87 (pop_false_bottom -> .)
    MINUS           reduce using rule 87 (pop_false_bottom -> .)
    COMMA           reduce using rule 87 (pop_false_bottom -> .)
    RPAR            reduce using rule 87 (pop_false_bottom -> .)
    GREATER         reduce using rule 87 (pop_false_bottom -> .)
    LESS            reduce using rule 87 (pop_false_bottom -> .)
    GREATEROREQUAL  reduce using rule 87 (pop_false_bottom -> .)
    LESSOREQUAL     reduce using rule 87 (pop_false_bottom -> .)
    EQUALEQUALS     reduce using rule 87 (pop_false_bottom -> .)
    DIFFERENT       reduce using rule 87 (pop_false_bottom -> .)
    AND             reduce using rule 87 (pop_false_bottom -> .)
    OR              reduce using rule 87 (pop_false_bottom -> .)
    RSQRTBRACKET    reduce using rule 87 (pop_false_bottom -> .)
    SEMICOLON       reduce using rule 87 (pop_false_bottom -> .)

    pop_false_bottom               shift and go to state 147

state 133

    (68) exp_aux -> pl add_to_pilaOptr term . exp_aux
    (68) exp_aux -> . pl add_to_pilaOptr term exp_aux
    (69) exp_aux -> .
    (83) pl -> . PLUS
    (84) pl -> . MINUS

    COMMA           reduce using rule 69 (exp_aux -> .)
    RPAR            reduce using rule 69 (exp_aux -> .)
    GREATER         reduce using rule 69 (exp_aux -> .)
    LESS            reduce using rule 69 (exp_aux -> .)
    GREATEROREQUAL  reduce using rule 69 (exp_aux -> .)
    LESSOREQUAL     reduce using rule 69 (exp_aux -> .)
    EQUALEQUALS     reduce using rule 69 (exp_aux -> .)
    DIFFERENT       reduce using rule 69 (exp_aux -> .)
    AND             reduce using rule 69 (exp_aux -> .)
    OR              reduce using rule 69 (exp_aux -> .)
    RSQRTBRACKET    reduce using rule 69 (exp_aux -> .)
    SEMICOLON       reduce using rule 69 (exp_aux -> .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84

    pl                             shift and go to state 85
    exp_aux                        shift and go to state 148

state 134

    (56) more_params -> COMMA exp more_params .

    RPAR            reduce using rule 56 (more_params -> COMMA exp more_params .)


state 135

    (71) term_aux -> dm add_to_pilaOptr factor . term_aux
    (71) term_aux -> . dm add_to_pilaOptr factor term_aux
    (72) term_aux -> .
    (88) dm -> . MULTIPLICATION
    (89) dm -> . DIVISION
    (90) dm -> . MOD

    PLUS            reduce using rule 72 (term_aux -> .)
    MINUS           reduce using rule 72 (term_aux -> .)
    COMMA           reduce using rule 72 (term_aux -> .)
    RPAR            reduce using rule 72 (term_aux -> .)
    GREATER         reduce using rule 72 (term_aux -> .)
    LESS            reduce using rule 72 (term_aux -> .)
    GREATEROREQUAL  reduce using rule 72 (term_aux -> .)
    LESSOREQUAL     reduce using rule 72 (term_aux -> .)
    EQUALEQUALS     reduce using rule 72 (term_aux -> .)
    DIFFERENT       reduce using rule 72 (term_aux -> .)
    AND             reduce using rule 72 (term_aux -> .)
    OR              reduce using rule 72 (term_aux -> .)
    RSQRTBRACKET    reduce using rule 72 (term_aux -> .)
    SEMICOLON       reduce using rule 72 (term_aux -> .)
    MULTIPLICATION  shift and go to state 92
    DIVISION        shift and go to state 89
    MOD             shift and go to state 93

    dm                             shift and go to state 90
    term_aux                       shift and go to state 149

state 136

    (46) read -> READ LPAR ID arr_par RPAR . SEMICOLON

    SEMICOLON       shift and go to state 150


state 137

    (62) expression_aux -> ao add_to_pilaOptr . conc expression_aux
    (64) conc -> . exp conc_aux
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    conc                           shift and go to state 151
    var_cte                        shift and go to state 69
    exp                            shift and go to state 97
    factor                         shift and go to state 68

state 138

    (65) conc_aux -> comp add_to_pilaOptr . exp
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    var_cte                        shift and go to state 69
    exp                            shift and go to state 152
    factor                         shift and go to state 68

state 139

    (58) block -> LBRACKET . more_statement RBRACKET
    (38) more_statement -> . statement more_statement
    (39) more_statement -> .
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . cicle
    (43) statement -> . condition
    (44) statement -> . assignation
    (45) statement -> . func_call SEMICOLON
    (46) read -> . READ LPAR ID arr_par RPAR SEMICOLON
    (47) write -> . WRITE LPAR exp RPAR SEMICOLON
    (48) cicle -> . WHILE LPAR expression RPAR block
    (49) condition -> . IF LPAR expression RPAR block else_posible
    (52) assignation -> . ID arr_par EQUALS expression SEMICOLON
    (53) func_call -> . ID LPAR params RPAR

    RBRACKET        reduce using rule 39 (more_statement -> .)
    READ            shift and go to state 49
    WRITE           shift and go to state 55
    WHILE           shift and go to state 50
    IF              shift and go to state 58
    ID              shift and go to state 56

    func_call                      shift and go to state 59
    assignation                    shift and go to state 60
    read                           shift and go to state 54
    cicle                          shift and go to state 51
    write                          shift and go to state 52
    statement                      shift and go to state 53
    more_statement                 shift and go to state 153
    condition                      shift and go to state 57

state 140

    (48) cicle -> WHILE LPAR expression RPAR block .

    READ            reduce using rule 48 (cicle -> WHILE LPAR expression RPAR block .)
    WRITE           reduce using rule 48 (cicle -> WHILE LPAR expression RPAR block .)
    WHILE           reduce using rule 48 (cicle -> WHILE LPAR expression RPAR block .)
    IF              reduce using rule 48 (cicle -> WHILE LPAR expression RPAR block .)
    ID              reduce using rule 48 (cicle -> WHILE LPAR expression RPAR block .)
    RETURN          reduce using rule 48 (cicle -> WHILE LPAR expression RPAR block .)
    RBRACKET        reduce using rule 48 (cicle -> WHILE LPAR expression RPAR block .)


state 141

    (47) write -> WRITE LPAR exp RPAR SEMICOLON .

    READ            reduce using rule 47 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    WRITE           reduce using rule 47 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    WHILE           reduce using rule 47 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    IF              reduce using rule 47 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    ID              reduce using rule 47 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    RBRACKET        reduce using rule 47 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    RETURN          reduce using rule 47 (write -> WRITE LPAR exp RPAR SEMICOLON .)


state 142

    (59) arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .

    EQUALS          reduce using rule 59 (arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .)
    RPAR            reduce using rule 59 (arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .)


state 143

    (52) assignation -> ID arr_par EQUALS expression SEMICOLON .

    READ            reduce using rule 52 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    WRITE           reduce using rule 52 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 52 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    IF              reduce using rule 52 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    ID              reduce using rule 52 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    RBRACKET        reduce using rule 52 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 52 (assignation -> ID arr_par EQUALS expression SEMICOLON .)


state 144

    (49) condition -> IF LPAR expression RPAR block . else_posible
    (50) else_posible -> . ELSE block
    (51) else_posible -> .

    ELSE            shift and go to state 155
    READ            reduce using rule 51 (else_posible -> .)
    WRITE           reduce using rule 51 (else_posible -> .)
    WHILE           reduce using rule 51 (else_posible -> .)
    IF              reduce using rule 51 (else_posible -> .)
    ID              reduce using rule 51 (else_posible -> .)
    RBRACKET        reduce using rule 51 (else_posible -> .)
    RETURN          reduce using rule 51 (else_posible -> .)

    else_posible                   shift and go to state 154

state 145

    (32) more_args -> COMMA var_type . ID to_args more_args

    ID              shift and go to state 156


state 146

    (35) func_block -> LBRACKET more_vars more_statement . optional_return RBRACKET
    (36) optional_return -> . RETURN exp SEMICOLON
    (37) optional_return -> .

    RETURN          shift and go to state 157
    RBRACKET        reduce using rule 37 (optional_return -> .)

    optional_return                shift and go to state 158

state 147

    (73) factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .

    MULTIPLICATION  reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    DIVISION        reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    MOD             reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    PLUS            reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    MINUS           reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    GREATER         reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    LESS            reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    GREATEROREQUAL  reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    LESSOREQUAL     reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    EQUALEQUALS     reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    DIFFERENT       reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    AND             reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    OR              reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    RPAR            reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    SEMICOLON       reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    RSQRTBRACKET    reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    COMMA           reduce using rule 73 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)


state 148

    (68) exp_aux -> pl add_to_pilaOptr term exp_aux .

    COMMA           reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    RPAR            reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    GREATER         reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    LESS            reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    GREATEROREQUAL  reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    LESSOREQUAL     reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    EQUALEQUALS     reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    DIFFERENT       reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    AND             reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    OR              reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    RSQRTBRACKET    reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    SEMICOLON       reduce using rule 68 (exp_aux -> pl add_to_pilaOptr term exp_aux .)


state 149

    (71) term_aux -> dm add_to_pilaOptr factor term_aux .

    PLUS            reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    MINUS           reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    COMMA           reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    RPAR            reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    GREATER         reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    LESS            reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    GREATEROREQUAL  reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    LESSOREQUAL     reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    EQUALEQUALS     reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    DIFFERENT       reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    AND             reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    OR              reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    RSQRTBRACKET    reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    SEMICOLON       reduce using rule 71 (term_aux -> dm add_to_pilaOptr factor term_aux .)


state 150

    (46) read -> READ LPAR ID arr_par RPAR SEMICOLON .

    READ            reduce using rule 46 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    WRITE           reduce using rule 46 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    WHILE           reduce using rule 46 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    IF              reduce using rule 46 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    ID              reduce using rule 46 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    RBRACKET        reduce using rule 46 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    RETURN          reduce using rule 46 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)


state 151

    (62) expression_aux -> ao add_to_pilaOptr conc . expression_aux
    (62) expression_aux -> . ao add_to_pilaOptr conc expression_aux
    (63) expression_aux -> .
    (75) ao -> . AND
    (76) ao -> . OR

    RPAR            reduce using rule 63 (expression_aux -> .)
    SEMICOLON       reduce using rule 63 (expression_aux -> .)
    AND             shift and go to state 111
    OR              shift and go to state 114

    expression_aux                 shift and go to state 159
    ao                             shift and go to state 112

state 152

    (65) conc_aux -> comp add_to_pilaOptr exp .

    AND             reduce using rule 65 (conc_aux -> comp add_to_pilaOptr exp .)
    OR              reduce using rule 65 (conc_aux -> comp add_to_pilaOptr exp .)
    RPAR            reduce using rule 65 (conc_aux -> comp add_to_pilaOptr exp .)
    SEMICOLON       reduce using rule 65 (conc_aux -> comp add_to_pilaOptr exp .)


state 153

    (58) block -> LBRACKET more_statement . RBRACKET

    RBRACKET        shift and go to state 160


state 154

    (49) condition -> IF LPAR expression RPAR block else_posible .

    READ            reduce using rule 49 (condition -> IF LPAR expression RPAR block else_posible .)
    WRITE           reduce using rule 49 (condition -> IF LPAR expression RPAR block else_posible .)
    WHILE           reduce using rule 49 (condition -> IF LPAR expression RPAR block else_posible .)
    IF              reduce using rule 49 (condition -> IF LPAR expression RPAR block else_posible .)
    ID              reduce using rule 49 (condition -> IF LPAR expression RPAR block else_posible .)
    RBRACKET        reduce using rule 49 (condition -> IF LPAR expression RPAR block else_posible .)
    RETURN          reduce using rule 49 (condition -> IF LPAR expression RPAR block else_posible .)


state 155

    (50) else_posible -> ELSE . block
    (58) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 139

    block                          shift and go to state 161

state 156

    (32) more_args -> COMMA var_type ID . to_args more_args
    (34) to_args -> .

    COMMA           reduce using rule 34 (to_args -> .)
    RPAR            reduce using rule 34 (to_args -> .)

    to_args                        shift and go to state 162

state 157

    (36) optional_return -> RETURN . exp SEMICOLON
    (67) exp -> . term exp_aux
    (70) term -> . factor term_aux
    (73) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (74) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (53) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 64
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 65
    const                          shift and go to state 38
    var_cte                        shift and go to state 69
    exp                            shift and go to state 163
    factor                         shift and go to state 68

state 158

    (35) func_block -> LBRACKET more_vars more_statement optional_return . RBRACKET

    RBRACKET        shift and go to state 164


state 159

    (62) expression_aux -> ao add_to_pilaOptr conc expression_aux .

    RPAR            reduce using rule 62 (expression_aux -> ao add_to_pilaOptr conc expression_aux .)
    SEMICOLON       reduce using rule 62 (expression_aux -> ao add_to_pilaOptr conc expression_aux .)


state 160

    (58) block -> LBRACKET more_statement RBRACKET .

    ELSE            reduce using rule 58 (block -> LBRACKET more_statement RBRACKET .)
    READ            reduce using rule 58 (block -> LBRACKET more_statement RBRACKET .)
    WRITE           reduce using rule 58 (block -> LBRACKET more_statement RBRACKET .)
    WHILE           reduce using rule 58 (block -> LBRACKET more_statement RBRACKET .)
    IF              reduce using rule 58 (block -> LBRACKET more_statement RBRACKET .)
    ID              reduce using rule 58 (block -> LBRACKET more_statement RBRACKET .)
    RBRACKET        reduce using rule 58 (block -> LBRACKET more_statement RBRACKET .)
    RETURN          reduce using rule 58 (block -> LBRACKET more_statement RBRACKET .)


state 161

    (50) else_posible -> ELSE block .

    READ            reduce using rule 50 (else_posible -> ELSE block .)
    WRITE           reduce using rule 50 (else_posible -> ELSE block .)
    WHILE           reduce using rule 50 (else_posible -> ELSE block .)
    IF              reduce using rule 50 (else_posible -> ELSE block .)
    ID              reduce using rule 50 (else_posible -> ELSE block .)
    RBRACKET        reduce using rule 50 (else_posible -> ELSE block .)
    RETURN          reduce using rule 50 (else_posible -> ELSE block .)


state 162

    (32) more_args -> COMMA var_type ID to_args . more_args
    (32) more_args -> . COMMA var_type ID to_args more_args
    (33) more_args -> .

    COMMA           shift and go to state 129
    RPAR            reduce using rule 33 (more_args -> .)

    more_args                      shift and go to state 165

state 163

    (36) optional_return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 166


state 164

    (35) func_block -> LBRACKET more_vars more_statement optional_return RBRACKET .

    FUNC            reduce using rule 35 (func_block -> LBRACKET more_vars more_statement optional_return RBRACKET .)
    MAIN            reduce using rule 35 (func_block -> LBRACKET more_vars more_statement optional_return RBRACKET .)


state 165

    (32) more_args -> COMMA var_type ID to_args more_args .

    RPAR            reduce using rule 32 (more_args -> COMMA var_type ID to_args more_args .)


state 166

    (36) optional_return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 36 (optional_return -> RETURN exp SEMICOLON .)

