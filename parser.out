Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> more_vars more_func main
Rule 2     more_vars -> vars
Rule 3     more_vars -> <empty>
Rule 4     vars -> var_type vars_aux SEMICOLON more_vars
Rule 5     var_type -> BOOL
Rule 6     var_type -> INT
Rule 7     var_type -> DOUBLE
Rule 8     vars_aux -> ID arr to_var_table var_assign more_vars_aux
Rule 9     to_var_table -> <empty>
Rule 10    var_assign -> EQUALS var_cte
Rule 11    var_assign -> <empty>
Rule 12    more_vars_aux -> COMMA vars_aux
Rule 13    more_vars_aux -> <empty>
Rule 14    arr -> LSQRTBRACKET const RSQRTBRACKET arr
Rule 15    arr -> <empty>
Rule 16    var_cte -> const
Rule 17    var_cte -> ID arr
Rule 18    var_cte -> func_call
Rule 19    const -> CTEINT
Rule 20    const -> CTEDOUBLE
Rule 21    const -> CTEBOOL
Rule 22    more_func -> func
Rule 23    more_func -> <empty>
Rule 24    func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func
Rule 25    to_proc_dir -> <empty>
Rule 26    func_type -> VOID
Rule 27    func_type -> BOOL
Rule 28    func_type -> INT
Rule 29    func_type -> DOUBLE
Rule 30    arguments -> var_type ID to_args more_args
Rule 31    arguments -> <empty>
Rule 32    more_args -> COMMA var_type ID to_args more_args
Rule 33    more_args -> <empty>
Rule 34    to_args -> <empty>
Rule 35    func_block -> LBRACKET more_vars actual_quad_no more_statement optional_return gen_endproc_quad RBRACKET
Rule 36    actual_quad_no -> <empty>
Rule 37    gen_endproc_quad -> <empty>
Rule 38    optional_return -> RETURN exp gen_return_quad SEMICOLON
Rule 39    optional_return -> <empty>
Rule 40    gen_return_quad -> <empty>
Rule 41    more_statement -> statement more_statement
Rule 42    more_statement -> <empty>
Rule 43    statement -> read
Rule 44    statement -> write
Rule 45    statement -> cycle
Rule 46    statement -> condition
Rule 47    statement -> assignation
Rule 48    statement -> func_call SEMICOLON
Rule 49    read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON
Rule 50    gen_read_quad -> <empty>
Rule 51    write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON
Rule 52    gen_write_quad -> <empty>
Rule 53    cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end
Rule 54    cycle_start -> <empty>
Rule 55    cycle_end -> <empty>
Rule 56    condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition
Rule 57    else_posible -> ELSE gen_goto block
Rule 58    else_posible -> <empty>
Rule 59    gen_goto -> <empty>
Rule 60    fill_end_condition -> <empty>
Rule 61    check_type -> <empty>
Rule 62    assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON
Rule 63    gen_assignation_quad -> <empty>
Rule 64    func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad
Rule 65    params -> exp more_params
Rule 66    params -> <empty>
Rule 67    more_params -> COMMA exp more_params
Rule 68    more_params -> <empty>
Rule 69    is_valid_func -> <empty>
Rule 70    gen_func_call_quad -> <empty>
Rule 71    block -> LBRACKET more_statement RBRACKET
Rule 72    arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par
Rule 73    arr_par -> <empty>
Rule 74    expression -> conc gen_conc_quad expression_aux
Rule 75    expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux
Rule 76    expression_aux -> <empty>
Rule 77    gen_conc_quad -> <empty>
Rule 78    conc -> exp gen_comp_quad conc_aux
Rule 79    conc_aux -> comp add_to_pilaOptr exp gen_comp_quad
Rule 80    conc_aux -> <empty>
Rule 81    gen_comp_quad -> <empty>
Rule 82    exp -> term gen_term_quad exp_aux
Rule 83    exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux
Rule 84    exp_aux -> <empty>
Rule 85    gen_term_quad -> <empty>
Rule 86    term -> factor gen_factor_quad term_aux
Rule 87    term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux
Rule 88    term_aux -> <empty>
Rule 89    gen_factor_quad -> <empty>
Rule 90    factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom
Rule 91    factor -> var_cte to_pilaOp
Rule 92    ao -> AND
Rule 93    ao -> OR
Rule 94    comp -> GREATER
Rule 95    comp -> LESS
Rule 96    comp -> GREATEROREQUAL
Rule 97    comp -> LESSOREQUAL
Rule 98    comp -> EQUALEQUALS
Rule 99    comp -> DIFFERENT
Rule 100   pl -> PLUS
Rule 101   pl -> MINUS
Rule 102   to_pilaOp -> <empty>
Rule 103   add_to_pilaOptr -> <empty>
Rule 104   pop_false_bottom -> <empty>
Rule 105   dm -> MULTIPLICATION
Rule 106   dm -> DIVISION
Rule 107   dm -> MOD
Rule 108   main -> MAIN main_to_proc_dir main_block
Rule 109   main_to_proc_dir -> <empty>
Rule 110   main_block -> LBRACKET more_vars more_statement RBRACKET gen_end_quad
Rule 111   gen_end_quad -> <empty>

Terminals, with rules where they appear

AND                  : 92
BOOL                 : 5 27
COMMA                : 12 32 67
CTEBOOL              : 21
CTEDOUBLE            : 20
CTEINT               : 19
DIFFERENT            : 99
DIVISION             : 106
DOUBLE               : 7 29
ELSE                 : 57
EQUALEQUALS          : 98
EQUALS               : 10 62
FUNC                 : 24
GREATER              : 94
GREATEROREQUAL       : 96
ID                   : 8 17 24 30 32 49 62 64
IF                   : 56
INT                  : 6 28
LBRACKET             : 35 71 110
LESS                 : 95
LESSOREQUAL          : 97
LPAR                 : 24 49 51 53 56 64 90
LSQRTBRACKET         : 14 72
MAIN                 : 108
MINUS                : 101
MOD                  : 107
MULTIPLICATION       : 105
OR                   : 93
PLUS                 : 100
RBRACKET             : 35 71 110
READ                 : 49
RETURN               : 38
RPAR                 : 24 49 51 53 56 64 90
RSQRTBRACKET         : 14 72
SEMICOLON            : 4 38 48 49 51 62
VOID                 : 26
WHILE                : 53
WRITE                : 51
error                : 

Nonterminals, with rules where they appear

actual_quad_no       : 35
add_to_pilaOptr      : 75 79 83 87 90
ao                   : 75
arguments            : 24
arr                  : 8 14 17
arr_par              : 49 62 72
assignation          : 47
block                : 53 56 57
check_type           : 53 56
comp                 : 79
conc                 : 74 75
conc_aux             : 78
condition            : 46
const                : 14 16
cycle                : 45
cycle_end            : 53
cycle_start          : 53
dm                   : 87
else_posible         : 56
exp                  : 38 51 65 67 72 78 79
exp_aux              : 82 83
expression           : 53 56 62 90
expression_aux       : 74 75
factor               : 86 87
fill_end_condition   : 56
func                 : 22
func_block           : 24
func_call            : 18 48
func_type            : 24
gen_assignation_quad : 62
gen_comp_quad        : 78 79
gen_conc_quad        : 74 75
gen_end_quad         : 110
gen_endproc_quad     : 35
gen_factor_quad      : 86 87
gen_func_call_quad   : 64
gen_goto             : 57
gen_read_quad        : 49
gen_return_quad      : 38
gen_term_quad        : 82 83
gen_write_quad       : 51
is_valid_func        : 64
main                 : 1
main_block           : 108
main_to_proc_dir     : 108
more_args            : 30 32
more_func            : 1 24
more_params          : 65 67
more_statement       : 35 41 71 110
more_vars            : 1 4 35 110
more_vars_aux        : 8
optional_return      : 35
params               : 64
pl                   : 83
pop_false_bottom     : 90
program              : 0
read                 : 43
statement            : 41
term                 : 82 83
term_aux             : 86 87
to_args              : 30 32
to_pilaOp            : 49 62 91
to_proc_dir          : 24
to_var_table         : 8
var_assign           : 8
var_cte              : 10 91
var_type             : 4 30 32
vars                 : 2
vars_aux             : 4 12
write                : 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . more_vars more_func main
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    FUNC            reduce using rule 3 (more_vars -> .)
    MAIN            reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    program                        shift and go to state 5
    more_vars                      shift and go to state 7

state 1

    (2) more_vars -> vars .

    FUNC            reduce using rule 2 (more_vars -> vars .)
    MAIN            reduce using rule 2 (more_vars -> vars .)
    READ            reduce using rule 2 (more_vars -> vars .)
    WRITE           reduce using rule 2 (more_vars -> vars .)
    WHILE           reduce using rule 2 (more_vars -> vars .)
    IF              reduce using rule 2 (more_vars -> vars .)
    ID              reduce using rule 2 (more_vars -> vars .)
    RBRACKET        reduce using rule 2 (more_vars -> vars .)
    RETURN          reduce using rule 2 (more_vars -> vars .)


state 2

    (4) vars -> var_type . vars_aux SEMICOLON more_vars
    (8) vars_aux -> . ID arr to_var_table var_assign more_vars_aux

    ID              shift and go to state 9

    vars_aux                       shift and go to state 8

state 3

    (6) var_type -> INT .

    ID              reduce using rule 6 (var_type -> INT .)


state 4

    (7) var_type -> DOUBLE .

    ID              reduce using rule 7 (var_type -> DOUBLE .)


state 5

    (0) S' -> program .



state 6

    (5) var_type -> BOOL .

    ID              reduce using rule 5 (var_type -> BOOL .)


state 7

    (1) program -> more_vars . more_func main
    (22) more_func -> . func
    (23) more_func -> .
    (24) func -> . FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func

    MAIN            reduce using rule 23 (more_func -> .)
    FUNC            shift and go to state 12

    more_func                      shift and go to state 11
    func                           shift and go to state 10

state 8

    (4) vars -> var_type vars_aux . SEMICOLON more_vars

    SEMICOLON       shift and go to state 13


state 9

    (8) vars_aux -> ID . arr to_var_table var_assign more_vars_aux
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .

    LSQRTBRACKET    shift and go to state 15
    EQUALS          reduce using rule 15 (arr -> .)
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)

    arr                            shift and go to state 14

state 10

    (22) more_func -> func .

    MAIN            reduce using rule 22 (more_func -> func .)


state 11

    (1) program -> more_vars more_func . main
    (108) main -> . MAIN main_to_proc_dir main_block

    MAIN            shift and go to state 17

    main                           shift and go to state 16

state 12

    (24) func -> FUNC . func_type ID to_proc_dir LPAR arguments RPAR func_block more_func
    (26) func_type -> . VOID
    (27) func_type -> . BOOL
    (28) func_type -> . INT
    (29) func_type -> . DOUBLE

    VOID            shift and go to state 20
    BOOL            shift and go to state 22
    INT             shift and go to state 21
    DOUBLE          shift and go to state 19

    func_type                      shift and go to state 18

state 13

    (4) vars -> var_type vars_aux SEMICOLON . more_vars
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    FUNC            reduce using rule 3 (more_vars -> .)
    MAIN            reduce using rule 3 (more_vars -> .)
    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    RETURN          reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    more_vars                      shift and go to state 23
    var_type                       shift and go to state 2

state 14

    (8) vars_aux -> ID arr . to_var_table var_assign more_vars_aux
    (9) to_var_table -> .

    EQUALS          reduce using rule 9 (to_var_table -> .)
    COMMA           reduce using rule 9 (to_var_table -> .)
    SEMICOLON       reduce using rule 9 (to_var_table -> .)

    to_var_table                   shift and go to state 24

state 15

    (14) arr -> LSQRTBRACKET . const RSQRTBRACKET arr
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL

    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    const                          shift and go to state 26

state 16

    (1) program -> more_vars more_func main .

    $end            reduce using rule 1 (program -> more_vars more_func main .)


state 17

    (108) main -> MAIN . main_to_proc_dir main_block
    (109) main_to_proc_dir -> .

    LBRACKET        reduce using rule 109 (main_to_proc_dir -> .)

    main_to_proc_dir               shift and go to state 29

state 18

    (24) func -> FUNC func_type . ID to_proc_dir LPAR arguments RPAR func_block more_func

    ID              shift and go to state 30


state 19

    (29) func_type -> DOUBLE .

    ID              reduce using rule 29 (func_type -> DOUBLE .)


state 20

    (26) func_type -> VOID .

    ID              reduce using rule 26 (func_type -> VOID .)


state 21

    (28) func_type -> INT .

    ID              reduce using rule 28 (func_type -> INT .)


state 22

    (27) func_type -> BOOL .

    ID              reduce using rule 27 (func_type -> BOOL .)


state 23

    (4) vars -> var_type vars_aux SEMICOLON more_vars .

    FUNC            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    MAIN            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    READ            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    WRITE           reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    WHILE           reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    IF              reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    ID              reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    RBRACKET        reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    RETURN          reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)


state 24

    (8) vars_aux -> ID arr to_var_table . var_assign more_vars_aux
    (10) var_assign -> . EQUALS var_cte
    (11) var_assign -> .

    EQUALS          shift and go to state 31
    COMMA           reduce using rule 11 (var_assign -> .)
    SEMICOLON       reduce using rule 11 (var_assign -> .)

    var_assign                     shift and go to state 32

state 25

    (20) const -> CTEDOUBLE .

    MULTIPLICATION  reduce using rule 20 (const -> CTEDOUBLE .)
    DIVISION        reduce using rule 20 (const -> CTEDOUBLE .)
    MOD             reduce using rule 20 (const -> CTEDOUBLE .)
    PLUS            reduce using rule 20 (const -> CTEDOUBLE .)
    MINUS           reduce using rule 20 (const -> CTEDOUBLE .)
    GREATER         reduce using rule 20 (const -> CTEDOUBLE .)
    LESS            reduce using rule 20 (const -> CTEDOUBLE .)
    GREATEROREQUAL  reduce using rule 20 (const -> CTEDOUBLE .)
    LESSOREQUAL     reduce using rule 20 (const -> CTEDOUBLE .)
    EQUALEQUALS     reduce using rule 20 (const -> CTEDOUBLE .)
    DIFFERENT       reduce using rule 20 (const -> CTEDOUBLE .)
    AND             reduce using rule 20 (const -> CTEDOUBLE .)
    OR              reduce using rule 20 (const -> CTEDOUBLE .)
    RPAR            reduce using rule 20 (const -> CTEDOUBLE .)
    COMMA           reduce using rule 20 (const -> CTEDOUBLE .)
    RSQRTBRACKET    reduce using rule 20 (const -> CTEDOUBLE .)
    SEMICOLON       reduce using rule 20 (const -> CTEDOUBLE .)


state 26

    (14) arr -> LSQRTBRACKET const . RSQRTBRACKET arr

    RSQRTBRACKET    shift and go to state 33


state 27

    (21) const -> CTEBOOL .

    MULTIPLICATION  reduce using rule 21 (const -> CTEBOOL .)
    DIVISION        reduce using rule 21 (const -> CTEBOOL .)
    MOD             reduce using rule 21 (const -> CTEBOOL .)
    PLUS            reduce using rule 21 (const -> CTEBOOL .)
    MINUS           reduce using rule 21 (const -> CTEBOOL .)
    GREATER         reduce using rule 21 (const -> CTEBOOL .)
    LESS            reduce using rule 21 (const -> CTEBOOL .)
    GREATEROREQUAL  reduce using rule 21 (const -> CTEBOOL .)
    LESSOREQUAL     reduce using rule 21 (const -> CTEBOOL .)
    EQUALEQUALS     reduce using rule 21 (const -> CTEBOOL .)
    DIFFERENT       reduce using rule 21 (const -> CTEBOOL .)
    AND             reduce using rule 21 (const -> CTEBOOL .)
    OR              reduce using rule 21 (const -> CTEBOOL .)
    RPAR            reduce using rule 21 (const -> CTEBOOL .)
    COMMA           reduce using rule 21 (const -> CTEBOOL .)
    RSQRTBRACKET    reduce using rule 21 (const -> CTEBOOL .)
    SEMICOLON       reduce using rule 21 (const -> CTEBOOL .)


state 28

    (19) const -> CTEINT .

    MULTIPLICATION  reduce using rule 19 (const -> CTEINT .)
    DIVISION        reduce using rule 19 (const -> CTEINT .)
    MOD             reduce using rule 19 (const -> CTEINT .)
    PLUS            reduce using rule 19 (const -> CTEINT .)
    MINUS           reduce using rule 19 (const -> CTEINT .)
    GREATER         reduce using rule 19 (const -> CTEINT .)
    LESS            reduce using rule 19 (const -> CTEINT .)
    GREATEROREQUAL  reduce using rule 19 (const -> CTEINT .)
    LESSOREQUAL     reduce using rule 19 (const -> CTEINT .)
    EQUALEQUALS     reduce using rule 19 (const -> CTEINT .)
    DIFFERENT       reduce using rule 19 (const -> CTEINT .)
    AND             reduce using rule 19 (const -> CTEINT .)
    OR              reduce using rule 19 (const -> CTEINT .)
    RPAR            reduce using rule 19 (const -> CTEINT .)
    COMMA           reduce using rule 19 (const -> CTEINT .)
    RSQRTBRACKET    reduce using rule 19 (const -> CTEINT .)
    SEMICOLON       reduce using rule 19 (const -> CTEINT .)


state 29

    (108) main -> MAIN main_to_proc_dir . main_block
    (110) main_block -> . LBRACKET more_vars more_statement RBRACKET gen_end_quad

    LBRACKET        shift and go to state 35

    main_block                     shift and go to state 34

state 30

    (24) func -> FUNC func_type ID . to_proc_dir LPAR arguments RPAR func_block more_func
    (25) to_proc_dir -> .

    LPAR            reduce using rule 25 (to_proc_dir -> .)

    to_proc_dir                    shift and go to state 36

state 31

    (10) var_assign -> EQUALS . var_cte
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    const                          shift and go to state 38
    var_cte                        shift and go to state 39

state 32

    (8) vars_aux -> ID arr to_var_table var_assign . more_vars_aux
    (12) more_vars_aux -> . COMMA vars_aux
    (13) more_vars_aux -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 13 (more_vars_aux -> .)

    more_vars_aux                  shift and go to state 41

state 33

    (14) arr -> LSQRTBRACKET const RSQRTBRACKET . arr
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .

    LSQRTBRACKET    shift and go to state 15
    EQUALS          reduce using rule 15 (arr -> .)
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)
    MULTIPLICATION  reduce using rule 15 (arr -> .)
    DIVISION        reduce using rule 15 (arr -> .)
    MOD             reduce using rule 15 (arr -> .)
    PLUS            reduce using rule 15 (arr -> .)
    MINUS           reduce using rule 15 (arr -> .)
    RPAR            reduce using rule 15 (arr -> .)
    GREATER         reduce using rule 15 (arr -> .)
    LESS            reduce using rule 15 (arr -> .)
    GREATEROREQUAL  reduce using rule 15 (arr -> .)
    LESSOREQUAL     reduce using rule 15 (arr -> .)
    EQUALEQUALS     reduce using rule 15 (arr -> .)
    DIFFERENT       reduce using rule 15 (arr -> .)
    AND             reduce using rule 15 (arr -> .)
    OR              reduce using rule 15 (arr -> .)
    RSQRTBRACKET    reduce using rule 15 (arr -> .)

    arr                            shift and go to state 43

state 34

    (108) main -> MAIN main_to_proc_dir main_block .

    $end            reduce using rule 108 (main -> MAIN main_to_proc_dir main_block .)


state 35

    (110) main_block -> LBRACKET . more_vars more_statement RBRACKET gen_end_quad
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    more_vars                      shift and go to state 44

state 36

    (24) func -> FUNC func_type ID to_proc_dir . LPAR arguments RPAR func_block more_func

    LPAR            shift and go to state 45


state 37

    (18) var_cte -> func_call .

    MULTIPLICATION  reduce using rule 18 (var_cte -> func_call .)
    DIVISION        reduce using rule 18 (var_cte -> func_call .)
    MOD             reduce using rule 18 (var_cte -> func_call .)
    PLUS            reduce using rule 18 (var_cte -> func_call .)
    MINUS           reduce using rule 18 (var_cte -> func_call .)
    COMMA           reduce using rule 18 (var_cte -> func_call .)
    RPAR            reduce using rule 18 (var_cte -> func_call .)
    GREATER         reduce using rule 18 (var_cte -> func_call .)
    LESS            reduce using rule 18 (var_cte -> func_call .)
    GREATEROREQUAL  reduce using rule 18 (var_cte -> func_call .)
    LESSOREQUAL     reduce using rule 18 (var_cte -> func_call .)
    EQUALEQUALS     reduce using rule 18 (var_cte -> func_call .)
    DIFFERENT       reduce using rule 18 (var_cte -> func_call .)
    AND             reduce using rule 18 (var_cte -> func_call .)
    OR              reduce using rule 18 (var_cte -> func_call .)
    RSQRTBRACKET    reduce using rule 18 (var_cte -> func_call .)
    SEMICOLON       reduce using rule 18 (var_cte -> func_call .)


state 38

    (16) var_cte -> const .

    MULTIPLICATION  reduce using rule 16 (var_cte -> const .)
    DIVISION        reduce using rule 16 (var_cte -> const .)
    MOD             reduce using rule 16 (var_cte -> const .)
    PLUS            reduce using rule 16 (var_cte -> const .)
    MINUS           reduce using rule 16 (var_cte -> const .)
    COMMA           reduce using rule 16 (var_cte -> const .)
    RPAR            reduce using rule 16 (var_cte -> const .)
    GREATER         reduce using rule 16 (var_cte -> const .)
    LESS            reduce using rule 16 (var_cte -> const .)
    GREATEROREQUAL  reduce using rule 16 (var_cte -> const .)
    LESSOREQUAL     reduce using rule 16 (var_cte -> const .)
    EQUALEQUALS     reduce using rule 16 (var_cte -> const .)
    DIFFERENT       reduce using rule 16 (var_cte -> const .)
    AND             reduce using rule 16 (var_cte -> const .)
    OR              reduce using rule 16 (var_cte -> const .)
    RSQRTBRACKET    reduce using rule 16 (var_cte -> const .)
    SEMICOLON       reduce using rule 16 (var_cte -> const .)


state 39

    (10) var_assign -> EQUALS var_cte .

    COMMA           reduce using rule 10 (var_assign -> EQUALS var_cte .)
    SEMICOLON       reduce using rule 10 (var_assign -> EQUALS var_cte .)


state 40

    (17) var_cte -> ID . arr
    (64) func_call -> ID . is_valid_func LPAR params RPAR gen_func_call_quad
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .
    (69) is_valid_func -> .

    LSQRTBRACKET    shift and go to state 15
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)
    MULTIPLICATION  reduce using rule 15 (arr -> .)
    DIVISION        reduce using rule 15 (arr -> .)
    MOD             reduce using rule 15 (arr -> .)
    PLUS            reduce using rule 15 (arr -> .)
    MINUS           reduce using rule 15 (arr -> .)
    RPAR            reduce using rule 15 (arr -> .)
    GREATER         reduce using rule 15 (arr -> .)
    LESS            reduce using rule 15 (arr -> .)
    GREATEROREQUAL  reduce using rule 15 (arr -> .)
    LESSOREQUAL     reduce using rule 15 (arr -> .)
    EQUALEQUALS     reduce using rule 15 (arr -> .)
    DIFFERENT       reduce using rule 15 (arr -> .)
    AND             reduce using rule 15 (arr -> .)
    OR              reduce using rule 15 (arr -> .)
    RSQRTBRACKET    reduce using rule 15 (arr -> .)
    LPAR            reduce using rule 69 (is_valid_func -> .)

    is_valid_func                  shift and go to state 47
    arr                            shift and go to state 46

state 41

    (8) vars_aux -> ID arr to_var_table var_assign more_vars_aux .

    SEMICOLON       reduce using rule 8 (vars_aux -> ID arr to_var_table var_assign more_vars_aux .)


state 42

    (12) more_vars_aux -> COMMA . vars_aux
    (8) vars_aux -> . ID arr to_var_table var_assign more_vars_aux

    ID              shift and go to state 9

    vars_aux                       shift and go to state 48

state 43

    (14) arr -> LSQRTBRACKET const RSQRTBRACKET arr .

    EQUALS          reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    COMMA           reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    SEMICOLON       reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MULTIPLICATION  reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    DIVISION        reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MOD             reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    PLUS            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MINUS           reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    RPAR            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    GREATER         reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    LESS            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    GREATEROREQUAL  reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    LESSOREQUAL     reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    EQUALEQUALS     reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    DIFFERENT       reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    AND             reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    OR              reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    RSQRTBRACKET    reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)


state 44

    (110) main_block -> LBRACKET more_vars . more_statement RBRACKET gen_end_quad
    (41) more_statement -> . statement more_statement
    (42) more_statement -> .
    (43) statement -> . read
    (44) statement -> . write
    (45) statement -> . cycle
    (46) statement -> . condition
    (47) statement -> . assignation
    (48) statement -> . func_call SEMICOLON
    (49) read -> . READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON
    (51) write -> . WRITE LPAR exp RPAR gen_write_quad SEMICOLON
    (53) cycle -> . WHILE cycle_start LPAR expression RPAR check_type block cycle_end
    (56) condition -> . IF LPAR expression RPAR check_type block else_posible fill_end_condition
    (62) assignation -> . ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    RBRACKET        reduce using rule 42 (more_statement -> .)
    READ            shift and go to state 49
    WRITE           shift and go to state 54
    WHILE           shift and go to state 60
    IF              shift and go to state 52
    ID              shift and go to state 55

    write                          shift and go to state 50
    statement                      shift and go to state 51
    read                           shift and go to state 53
    condition                      shift and go to state 56
    cycle                          shift and go to state 57
    func_call                      shift and go to state 58
    assignation                    shift and go to state 59
    more_statement                 shift and go to state 61

state 45

    (24) func -> FUNC func_type ID to_proc_dir LPAR . arguments RPAR func_block more_func
    (30) arguments -> . var_type ID to_args more_args
    (31) arguments -> .
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    RPAR            reduce using rule 31 (arguments -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 62
    arguments                      shift and go to state 63

state 46

    (17) var_cte -> ID arr .

    MULTIPLICATION  reduce using rule 17 (var_cte -> ID arr .)
    DIVISION        reduce using rule 17 (var_cte -> ID arr .)
    MOD             reduce using rule 17 (var_cte -> ID arr .)
    PLUS            reduce using rule 17 (var_cte -> ID arr .)
    MINUS           reduce using rule 17 (var_cte -> ID arr .)
    COMMA           reduce using rule 17 (var_cte -> ID arr .)
    RPAR            reduce using rule 17 (var_cte -> ID arr .)
    GREATER         reduce using rule 17 (var_cte -> ID arr .)
    LESS            reduce using rule 17 (var_cte -> ID arr .)
    GREATEROREQUAL  reduce using rule 17 (var_cte -> ID arr .)
    LESSOREQUAL     reduce using rule 17 (var_cte -> ID arr .)
    EQUALEQUALS     reduce using rule 17 (var_cte -> ID arr .)
    DIFFERENT       reduce using rule 17 (var_cte -> ID arr .)
    AND             reduce using rule 17 (var_cte -> ID arr .)
    OR              reduce using rule 17 (var_cte -> ID arr .)
    RSQRTBRACKET    reduce using rule 17 (var_cte -> ID arr .)
    SEMICOLON       reduce using rule 17 (var_cte -> ID arr .)


state 47

    (64) func_call -> ID is_valid_func . LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 64


state 48

    (12) more_vars_aux -> COMMA vars_aux .

    SEMICOLON       reduce using rule 12 (more_vars_aux -> COMMA vars_aux .)


state 49

    (49) read -> READ . LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON

    LPAR            shift and go to state 65


state 50

    (44) statement -> write .

    READ            reduce using rule 44 (statement -> write .)
    WRITE           reduce using rule 44 (statement -> write .)
    WHILE           reduce using rule 44 (statement -> write .)
    IF              reduce using rule 44 (statement -> write .)
    ID              reduce using rule 44 (statement -> write .)
    RBRACKET        reduce using rule 44 (statement -> write .)
    RETURN          reduce using rule 44 (statement -> write .)


state 51

    (41) more_statement -> statement . more_statement
    (41) more_statement -> . statement more_statement
    (42) more_statement -> .
    (43) statement -> . read
    (44) statement -> . write
    (45) statement -> . cycle
    (46) statement -> . condition
    (47) statement -> . assignation
    (48) statement -> . func_call SEMICOLON
    (49) read -> . READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON
    (51) write -> . WRITE LPAR exp RPAR gen_write_quad SEMICOLON
    (53) cycle -> . WHILE cycle_start LPAR expression RPAR check_type block cycle_end
    (56) condition -> . IF LPAR expression RPAR check_type block else_posible fill_end_condition
    (62) assignation -> . ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    RBRACKET        reduce using rule 42 (more_statement -> .)
    RETURN          reduce using rule 42 (more_statement -> .)
    READ            shift and go to state 49
    WRITE           shift and go to state 54
    WHILE           shift and go to state 60
    IF              shift and go to state 52
    ID              shift and go to state 55

    write                          shift and go to state 50
    statement                      shift and go to state 51
    read                           shift and go to state 53
    condition                      shift and go to state 56
    cycle                          shift and go to state 57
    func_call                      shift and go to state 58
    assignation                    shift and go to state 59
    more_statement                 shift and go to state 66

state 52

    (56) condition -> IF . LPAR expression RPAR check_type block else_posible fill_end_condition

    LPAR            shift and go to state 67


state 53

    (43) statement -> read .

    READ            reduce using rule 43 (statement -> read .)
    WRITE           reduce using rule 43 (statement -> read .)
    WHILE           reduce using rule 43 (statement -> read .)
    IF              reduce using rule 43 (statement -> read .)
    ID              reduce using rule 43 (statement -> read .)
    RBRACKET        reduce using rule 43 (statement -> read .)
    RETURN          reduce using rule 43 (statement -> read .)


state 54

    (51) write -> WRITE . LPAR exp RPAR gen_write_quad SEMICOLON

    LPAR            shift and go to state 68


state 55

    (62) assignation -> ID . to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON
    (64) func_call -> ID . is_valid_func LPAR params RPAR gen_func_call_quad
    (102) to_pilaOp -> .
    (69) is_valid_func -> .

    LSQRTBRACKET    reduce using rule 102 (to_pilaOp -> .)
    EQUALS          reduce using rule 102 (to_pilaOp -> .)
    LPAR            reduce using rule 69 (is_valid_func -> .)

    to_pilaOp                      shift and go to state 69
    is_valid_func                  shift and go to state 47

state 56

    (46) statement -> condition .

    READ            reduce using rule 46 (statement -> condition .)
    WRITE           reduce using rule 46 (statement -> condition .)
    WHILE           reduce using rule 46 (statement -> condition .)
    IF              reduce using rule 46 (statement -> condition .)
    ID              reduce using rule 46 (statement -> condition .)
    RBRACKET        reduce using rule 46 (statement -> condition .)
    RETURN          reduce using rule 46 (statement -> condition .)


state 57

    (45) statement -> cycle .

    READ            reduce using rule 45 (statement -> cycle .)
    WRITE           reduce using rule 45 (statement -> cycle .)
    WHILE           reduce using rule 45 (statement -> cycle .)
    IF              reduce using rule 45 (statement -> cycle .)
    ID              reduce using rule 45 (statement -> cycle .)
    RBRACKET        reduce using rule 45 (statement -> cycle .)
    RETURN          reduce using rule 45 (statement -> cycle .)


state 58

    (48) statement -> func_call . SEMICOLON

    SEMICOLON       shift and go to state 70


state 59

    (47) statement -> assignation .

    READ            reduce using rule 47 (statement -> assignation .)
    WRITE           reduce using rule 47 (statement -> assignation .)
    WHILE           reduce using rule 47 (statement -> assignation .)
    IF              reduce using rule 47 (statement -> assignation .)
    ID              reduce using rule 47 (statement -> assignation .)
    RBRACKET        reduce using rule 47 (statement -> assignation .)
    RETURN          reduce using rule 47 (statement -> assignation .)


state 60

    (53) cycle -> WHILE . cycle_start LPAR expression RPAR check_type block cycle_end
    (54) cycle_start -> .

    LPAR            reduce using rule 54 (cycle_start -> .)

    cycle_start                    shift and go to state 71

state 61

    (110) main_block -> LBRACKET more_vars more_statement . RBRACKET gen_end_quad

    RBRACKET        shift and go to state 72


state 62

    (30) arguments -> var_type . ID to_args more_args

    ID              shift and go to state 73


state 63

    (24) func -> FUNC func_type ID to_proc_dir LPAR arguments . RPAR func_block more_func

    RPAR            shift and go to state 74


state 64

    (64) func_call -> ID is_valid_func LPAR . params RPAR gen_func_call_quad
    (65) params -> . exp more_params
    (66) params -> .
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    RPAR            reduce using rule 66 (params -> .)
    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    const                          shift and go to state 38
    term                           shift and go to state 79
    params                         shift and go to state 76
    exp                            shift and go to state 80
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78

state 65

    (49) read -> READ LPAR . ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON

    ID              shift and go to state 81


state 66

    (41) more_statement -> statement more_statement .

    RBRACKET        reduce using rule 41 (more_statement -> statement more_statement .)
    RETURN          reduce using rule 41 (more_statement -> statement more_statement .)


state 67

    (56) condition -> IF LPAR . expression RPAR check_type block else_posible fill_end_condition
    (74) expression -> . conc gen_conc_quad expression_aux
    (78) conc -> . exp gen_comp_quad conc_aux
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    var_cte                        shift and go to state 78
    const                          shift and go to state 38
    factor                         shift and go to state 77
    func_call                      shift and go to state 37
    term                           shift and go to state 79
    conc                           shift and go to state 83
    exp                            shift and go to state 84
    expression                     shift and go to state 82

state 68

    (51) write -> WRITE LPAR . exp RPAR gen_write_quad SEMICOLON
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 79
    const                          shift and go to state 38
    exp                            shift and go to state 85
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78

state 69

    (62) assignation -> ID to_pilaOp . arr_par EQUALS expression gen_assignation_quad SEMICOLON
    (72) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (73) arr_par -> .

    LSQRTBRACKET    shift and go to state 86
    EQUALS          reduce using rule 73 (arr_par -> .)

    arr_par                        shift and go to state 87

state 70

    (48) statement -> func_call SEMICOLON .

    READ            reduce using rule 48 (statement -> func_call SEMICOLON .)
    WRITE           reduce using rule 48 (statement -> func_call SEMICOLON .)
    WHILE           reduce using rule 48 (statement -> func_call SEMICOLON .)
    IF              reduce using rule 48 (statement -> func_call SEMICOLON .)
    ID              reduce using rule 48 (statement -> func_call SEMICOLON .)
    RBRACKET        reduce using rule 48 (statement -> func_call SEMICOLON .)
    RETURN          reduce using rule 48 (statement -> func_call SEMICOLON .)


state 71

    (53) cycle -> WHILE cycle_start . LPAR expression RPAR check_type block cycle_end

    LPAR            shift and go to state 88


state 72

    (110) main_block -> LBRACKET more_vars more_statement RBRACKET . gen_end_quad
    (111) gen_end_quad -> .

    $end            reduce using rule 111 (gen_end_quad -> .)

    gen_end_quad                   shift and go to state 89

state 73

    (30) arguments -> var_type ID . to_args more_args
    (34) to_args -> .

    COMMA           reduce using rule 34 (to_args -> .)
    RPAR            reduce using rule 34 (to_args -> .)

    to_args                        shift and go to state 90

state 74

    (24) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR . func_block more_func
    (35) func_block -> . LBRACKET more_vars actual_quad_no more_statement optional_return gen_endproc_quad RBRACKET

    LBRACKET        shift and go to state 92

    func_block                     shift and go to state 91

state 75

    (90) factor -> LPAR . add_to_pilaOptr expression RPAR pop_false_bottom
    (103) add_to_pilaOptr -> .

    LPAR            reduce using rule 103 (add_to_pilaOptr -> .)
    ID              reduce using rule 103 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 103 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 103 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 103 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 93

state 76

    (64) func_call -> ID is_valid_func LPAR params . RPAR gen_func_call_quad

    RPAR            shift and go to state 94


state 77

    (86) term -> factor . gen_factor_quad term_aux
    (89) gen_factor_quad -> .

    MULTIPLICATION  reduce using rule 89 (gen_factor_quad -> .)
    DIVISION        reduce using rule 89 (gen_factor_quad -> .)
    MOD             reduce using rule 89 (gen_factor_quad -> .)
    PLUS            reduce using rule 89 (gen_factor_quad -> .)
    MINUS           reduce using rule 89 (gen_factor_quad -> .)
    COMMA           reduce using rule 89 (gen_factor_quad -> .)
    RPAR            reduce using rule 89 (gen_factor_quad -> .)
    GREATER         reduce using rule 89 (gen_factor_quad -> .)
    LESS            reduce using rule 89 (gen_factor_quad -> .)
    GREATEROREQUAL  reduce using rule 89 (gen_factor_quad -> .)
    LESSOREQUAL     reduce using rule 89 (gen_factor_quad -> .)
    EQUALEQUALS     reduce using rule 89 (gen_factor_quad -> .)
    DIFFERENT       reduce using rule 89 (gen_factor_quad -> .)
    AND             reduce using rule 89 (gen_factor_quad -> .)
    OR              reduce using rule 89 (gen_factor_quad -> .)
    RSQRTBRACKET    reduce using rule 89 (gen_factor_quad -> .)
    SEMICOLON       reduce using rule 89 (gen_factor_quad -> .)

    gen_factor_quad                shift and go to state 95

state 78

    (91) factor -> var_cte . to_pilaOp
    (102) to_pilaOp -> .

    MULTIPLICATION  reduce using rule 102 (to_pilaOp -> .)
    DIVISION        reduce using rule 102 (to_pilaOp -> .)
    MOD             reduce using rule 102 (to_pilaOp -> .)
    PLUS            reduce using rule 102 (to_pilaOp -> .)
    MINUS           reduce using rule 102 (to_pilaOp -> .)
    COMMA           reduce using rule 102 (to_pilaOp -> .)
    RPAR            reduce using rule 102 (to_pilaOp -> .)
    GREATER         reduce using rule 102 (to_pilaOp -> .)
    LESS            reduce using rule 102 (to_pilaOp -> .)
    GREATEROREQUAL  reduce using rule 102 (to_pilaOp -> .)
    LESSOREQUAL     reduce using rule 102 (to_pilaOp -> .)
    EQUALEQUALS     reduce using rule 102 (to_pilaOp -> .)
    DIFFERENT       reduce using rule 102 (to_pilaOp -> .)
    AND             reduce using rule 102 (to_pilaOp -> .)
    OR              reduce using rule 102 (to_pilaOp -> .)
    RSQRTBRACKET    reduce using rule 102 (to_pilaOp -> .)
    SEMICOLON       reduce using rule 102 (to_pilaOp -> .)

    to_pilaOp                      shift and go to state 96

state 79

    (82) exp -> term . gen_term_quad exp_aux
    (85) gen_term_quad -> .

    PLUS            reduce using rule 85 (gen_term_quad -> .)
    MINUS           reduce using rule 85 (gen_term_quad -> .)
    COMMA           reduce using rule 85 (gen_term_quad -> .)
    RPAR            reduce using rule 85 (gen_term_quad -> .)
    GREATER         reduce using rule 85 (gen_term_quad -> .)
    LESS            reduce using rule 85 (gen_term_quad -> .)
    GREATEROREQUAL  reduce using rule 85 (gen_term_quad -> .)
    LESSOREQUAL     reduce using rule 85 (gen_term_quad -> .)
    EQUALEQUALS     reduce using rule 85 (gen_term_quad -> .)
    DIFFERENT       reduce using rule 85 (gen_term_quad -> .)
    AND             reduce using rule 85 (gen_term_quad -> .)
    OR              reduce using rule 85 (gen_term_quad -> .)
    RSQRTBRACKET    reduce using rule 85 (gen_term_quad -> .)
    SEMICOLON       reduce using rule 85 (gen_term_quad -> .)

    gen_term_quad                  shift and go to state 97

state 80

    (65) params -> exp . more_params
    (67) more_params -> . COMMA exp more_params
    (68) more_params -> .

    COMMA           shift and go to state 99
    RPAR            reduce using rule 68 (more_params -> .)

    more_params                    shift and go to state 98

state 81

    (49) read -> READ LPAR ID . to_pilaOp arr_par RPAR gen_read_quad SEMICOLON
    (102) to_pilaOp -> .

    LSQRTBRACKET    reduce using rule 102 (to_pilaOp -> .)
    RPAR            reduce using rule 102 (to_pilaOp -> .)

    to_pilaOp                      shift and go to state 100

state 82

    (56) condition -> IF LPAR expression . RPAR check_type block else_posible fill_end_condition

    RPAR            shift and go to state 101


state 83

    (74) expression -> conc . gen_conc_quad expression_aux
    (77) gen_conc_quad -> .

    AND             reduce using rule 77 (gen_conc_quad -> .)
    OR              reduce using rule 77 (gen_conc_quad -> .)
    RPAR            reduce using rule 77 (gen_conc_quad -> .)
    SEMICOLON       reduce using rule 77 (gen_conc_quad -> .)

    gen_conc_quad                  shift and go to state 102

state 84

    (78) conc -> exp . gen_comp_quad conc_aux
    (81) gen_comp_quad -> .

    GREATER         reduce using rule 81 (gen_comp_quad -> .)
    LESS            reduce using rule 81 (gen_comp_quad -> .)
    GREATEROREQUAL  reduce using rule 81 (gen_comp_quad -> .)
    LESSOREQUAL     reduce using rule 81 (gen_comp_quad -> .)
    EQUALEQUALS     reduce using rule 81 (gen_comp_quad -> .)
    DIFFERENT       reduce using rule 81 (gen_comp_quad -> .)
    AND             reduce using rule 81 (gen_comp_quad -> .)
    OR              reduce using rule 81 (gen_comp_quad -> .)
    RPAR            reduce using rule 81 (gen_comp_quad -> .)
    SEMICOLON       reduce using rule 81 (gen_comp_quad -> .)

    gen_comp_quad                  shift and go to state 103

state 85

    (51) write -> WRITE LPAR exp . RPAR gen_write_quad SEMICOLON

    RPAR            shift and go to state 104


state 86

    (72) arr_par -> LSQRTBRACKET . exp RSQRTBRACKET arr_par
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 79
    const                          shift and go to state 38
    exp                            shift and go to state 105
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78

state 87

    (62) assignation -> ID to_pilaOp arr_par . EQUALS expression gen_assignation_quad SEMICOLON

    EQUALS          shift and go to state 106


state 88

    (53) cycle -> WHILE cycle_start LPAR . expression RPAR check_type block cycle_end
    (74) expression -> . conc gen_conc_quad expression_aux
    (78) conc -> . exp gen_comp_quad conc_aux
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    var_cte                        shift and go to state 78
    const                          shift and go to state 38
    factor                         shift and go to state 77
    func_call                      shift and go to state 37
    term                           shift and go to state 79
    conc                           shift and go to state 83
    exp                            shift and go to state 84
    expression                     shift and go to state 107

state 89

    (110) main_block -> LBRACKET more_vars more_statement RBRACKET gen_end_quad .

    $end            reduce using rule 110 (main_block -> LBRACKET more_vars more_statement RBRACKET gen_end_quad .)


state 90

    (30) arguments -> var_type ID to_args . more_args
    (32) more_args -> . COMMA var_type ID to_args more_args
    (33) more_args -> .

    COMMA           shift and go to state 109
    RPAR            reduce using rule 33 (more_args -> .)

    more_args                      shift and go to state 108

state 91

    (24) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block . more_func
    (22) more_func -> . func
    (23) more_func -> .
    (24) func -> . FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func

    MAIN            reduce using rule 23 (more_func -> .)
    FUNC            shift and go to state 12

    func                           shift and go to state 10
    more_func                      shift and go to state 110

state 92

    (35) func_block -> LBRACKET . more_vars actual_quad_no more_statement optional_return gen_endproc_quad RBRACKET
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RETURN          reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    more_vars                      shift and go to state 111

state 93

    (90) factor -> LPAR add_to_pilaOptr . expression RPAR pop_false_bottom
    (74) expression -> . conc gen_conc_quad expression_aux
    (78) conc -> . exp gen_comp_quad conc_aux
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    var_cte                        shift and go to state 78
    conc                           shift and go to state 83
    const                          shift and go to state 38
    factor                         shift and go to state 77
    func_call                      shift and go to state 37
    term                           shift and go to state 79
    exp                            shift and go to state 84
    expression                     shift and go to state 112

state 94

    (64) func_call -> ID is_valid_func LPAR params RPAR . gen_func_call_quad
    (70) gen_func_call_quad -> .

    COMMA           reduce using rule 70 (gen_func_call_quad -> .)
    SEMICOLON       reduce using rule 70 (gen_func_call_quad -> .)
    MULTIPLICATION  reduce using rule 70 (gen_func_call_quad -> .)
    DIVISION        reduce using rule 70 (gen_func_call_quad -> .)
    MOD             reduce using rule 70 (gen_func_call_quad -> .)
    PLUS            reduce using rule 70 (gen_func_call_quad -> .)
    MINUS           reduce using rule 70 (gen_func_call_quad -> .)
    RPAR            reduce using rule 70 (gen_func_call_quad -> .)
    GREATER         reduce using rule 70 (gen_func_call_quad -> .)
    LESS            reduce using rule 70 (gen_func_call_quad -> .)
    GREATEROREQUAL  reduce using rule 70 (gen_func_call_quad -> .)
    LESSOREQUAL     reduce using rule 70 (gen_func_call_quad -> .)
    EQUALEQUALS     reduce using rule 70 (gen_func_call_quad -> .)
    DIFFERENT       reduce using rule 70 (gen_func_call_quad -> .)
    AND             reduce using rule 70 (gen_func_call_quad -> .)
    OR              reduce using rule 70 (gen_func_call_quad -> .)
    RSQRTBRACKET    reduce using rule 70 (gen_func_call_quad -> .)

    gen_func_call_quad             shift and go to state 113

state 95

    (86) term -> factor gen_factor_quad . term_aux
    (87) term_aux -> . dm add_to_pilaOptr factor gen_factor_quad term_aux
    (88) term_aux -> .
    (105) dm -> . MULTIPLICATION
    (106) dm -> . DIVISION
    (107) dm -> . MOD

    PLUS            reduce using rule 88 (term_aux -> .)
    MINUS           reduce using rule 88 (term_aux -> .)
    COMMA           reduce using rule 88 (term_aux -> .)
    RPAR            reduce using rule 88 (term_aux -> .)
    GREATER         reduce using rule 88 (term_aux -> .)
    LESS            reduce using rule 88 (term_aux -> .)
    GREATEROREQUAL  reduce using rule 88 (term_aux -> .)
    LESSOREQUAL     reduce using rule 88 (term_aux -> .)
    EQUALEQUALS     reduce using rule 88 (term_aux -> .)
    DIFFERENT       reduce using rule 88 (term_aux -> .)
    AND             reduce using rule 88 (term_aux -> .)
    OR              reduce using rule 88 (term_aux -> .)
    RSQRTBRACKET    reduce using rule 88 (term_aux -> .)
    SEMICOLON       reduce using rule 88 (term_aux -> .)
    MULTIPLICATION  shift and go to state 117
    DIVISION        shift and go to state 114
    MOD             shift and go to state 118

    term_aux                       shift and go to state 116
    dm                             shift and go to state 115

state 96

    (91) factor -> var_cte to_pilaOp .

    MULTIPLICATION  reduce using rule 91 (factor -> var_cte to_pilaOp .)
    DIVISION        reduce using rule 91 (factor -> var_cte to_pilaOp .)
    MOD             reduce using rule 91 (factor -> var_cte to_pilaOp .)
    PLUS            reduce using rule 91 (factor -> var_cte to_pilaOp .)
    MINUS           reduce using rule 91 (factor -> var_cte to_pilaOp .)
    COMMA           reduce using rule 91 (factor -> var_cte to_pilaOp .)
    RPAR            reduce using rule 91 (factor -> var_cte to_pilaOp .)
    GREATER         reduce using rule 91 (factor -> var_cte to_pilaOp .)
    LESS            reduce using rule 91 (factor -> var_cte to_pilaOp .)
    GREATEROREQUAL  reduce using rule 91 (factor -> var_cte to_pilaOp .)
    LESSOREQUAL     reduce using rule 91 (factor -> var_cte to_pilaOp .)
    EQUALEQUALS     reduce using rule 91 (factor -> var_cte to_pilaOp .)
    DIFFERENT       reduce using rule 91 (factor -> var_cte to_pilaOp .)
    AND             reduce using rule 91 (factor -> var_cte to_pilaOp .)
    OR              reduce using rule 91 (factor -> var_cte to_pilaOp .)
    RSQRTBRACKET    reduce using rule 91 (factor -> var_cte to_pilaOp .)
    SEMICOLON       reduce using rule 91 (factor -> var_cte to_pilaOp .)


state 97

    (82) exp -> term gen_term_quad . exp_aux
    (83) exp_aux -> . pl add_to_pilaOptr term gen_term_quad exp_aux
    (84) exp_aux -> .
    (100) pl -> . PLUS
    (101) pl -> . MINUS

    COMMA           reduce using rule 84 (exp_aux -> .)
    RPAR            reduce using rule 84 (exp_aux -> .)
    GREATER         reduce using rule 84 (exp_aux -> .)
    LESS            reduce using rule 84 (exp_aux -> .)
    GREATEROREQUAL  reduce using rule 84 (exp_aux -> .)
    LESSOREQUAL     reduce using rule 84 (exp_aux -> .)
    EQUALEQUALS     reduce using rule 84 (exp_aux -> .)
    DIFFERENT       reduce using rule 84 (exp_aux -> .)
    AND             reduce using rule 84 (exp_aux -> .)
    OR              reduce using rule 84 (exp_aux -> .)
    RSQRTBRACKET    reduce using rule 84 (exp_aux -> .)
    SEMICOLON       reduce using rule 84 (exp_aux -> .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 119

    pl                             shift and go to state 121
    exp_aux                        shift and go to state 122

state 98

    (65) params -> exp more_params .

    RPAR            reduce using rule 65 (params -> exp more_params .)


state 99

    (67) more_params -> COMMA . exp more_params
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 79
    const                          shift and go to state 38
    exp                            shift and go to state 123
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78

state 100

    (49) read -> READ LPAR ID to_pilaOp . arr_par RPAR gen_read_quad SEMICOLON
    (72) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (73) arr_par -> .

    LSQRTBRACKET    shift and go to state 86
    RPAR            reduce using rule 73 (arr_par -> .)

    arr_par                        shift and go to state 124

state 101

    (56) condition -> IF LPAR expression RPAR . check_type block else_posible fill_end_condition
    (61) check_type -> .

    LBRACKET        reduce using rule 61 (check_type -> .)

    check_type                     shift and go to state 125

state 102

    (74) expression -> conc gen_conc_quad . expression_aux
    (75) expression_aux -> . ao add_to_pilaOptr conc gen_conc_quad expression_aux
    (76) expression_aux -> .
    (92) ao -> . AND
    (93) ao -> . OR

    RPAR            reduce using rule 76 (expression_aux -> .)
    SEMICOLON       reduce using rule 76 (expression_aux -> .)
    AND             shift and go to state 126
    OR              shift and go to state 128

    expression_aux                 shift and go to state 129
    ao                             shift and go to state 127

state 103

    (78) conc -> exp gen_comp_quad . conc_aux
    (79) conc_aux -> . comp add_to_pilaOptr exp gen_comp_quad
    (80) conc_aux -> .
    (94) comp -> . GREATER
    (95) comp -> . LESS
    (96) comp -> . GREATEROREQUAL
    (97) comp -> . LESSOREQUAL
    (98) comp -> . EQUALEQUALS
    (99) comp -> . DIFFERENT

    AND             reduce using rule 80 (conc_aux -> .)
    OR              reduce using rule 80 (conc_aux -> .)
    RPAR            reduce using rule 80 (conc_aux -> .)
    SEMICOLON       reduce using rule 80 (conc_aux -> .)
    GREATER         shift and go to state 132
    LESS            shift and go to state 133
    GREATEROREQUAL  shift and go to state 136
    LESSOREQUAL     shift and go to state 131
    EQUALEQUALS     shift and go to state 134
    DIFFERENT       shift and go to state 130

    conc_aux                       shift and go to state 137
    comp                           shift and go to state 135

state 104

    (51) write -> WRITE LPAR exp RPAR . gen_write_quad SEMICOLON
    (52) gen_write_quad -> .

    SEMICOLON       reduce using rule 52 (gen_write_quad -> .)

    gen_write_quad                 shift and go to state 138

state 105

    (72) arr_par -> LSQRTBRACKET exp . RSQRTBRACKET arr_par

    RSQRTBRACKET    shift and go to state 139


state 106

    (62) assignation -> ID to_pilaOp arr_par EQUALS . expression gen_assignation_quad SEMICOLON
    (74) expression -> . conc gen_conc_quad expression_aux
    (78) conc -> . exp gen_comp_quad conc_aux
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    var_cte                        shift and go to state 78
    const                          shift and go to state 38
    factor                         shift and go to state 77
    func_call                      shift and go to state 37
    term                           shift and go to state 79
    conc                           shift and go to state 83
    exp                            shift and go to state 84
    expression                     shift and go to state 140

state 107

    (53) cycle -> WHILE cycle_start LPAR expression . RPAR check_type block cycle_end

    RPAR            shift and go to state 141


state 108

    (30) arguments -> var_type ID to_args more_args .

    RPAR            reduce using rule 30 (arguments -> var_type ID to_args more_args .)


state 109

    (32) more_args -> COMMA . var_type ID to_args more_args
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 142

state 110

    (24) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func .

    MAIN            reduce using rule 24 (func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func .)


state 111

    (35) func_block -> LBRACKET more_vars . actual_quad_no more_statement optional_return gen_endproc_quad RBRACKET
    (36) actual_quad_no -> .

    READ            reduce using rule 36 (actual_quad_no -> .)
    WRITE           reduce using rule 36 (actual_quad_no -> .)
    WHILE           reduce using rule 36 (actual_quad_no -> .)
    IF              reduce using rule 36 (actual_quad_no -> .)
    ID              reduce using rule 36 (actual_quad_no -> .)
    RETURN          reduce using rule 36 (actual_quad_no -> .)
    RBRACKET        reduce using rule 36 (actual_quad_no -> .)

    actual_quad_no                 shift and go to state 143

state 112

    (90) factor -> LPAR add_to_pilaOptr expression . RPAR pop_false_bottom

    RPAR            shift and go to state 144


state 113

    (64) func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .

    MULTIPLICATION  reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    DIVISION        reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    MOD             reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    PLUS            reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    MINUS           reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    COMMA           reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    RPAR            reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    SEMICOLON       reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    GREATER         reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    LESS            reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    GREATEROREQUAL  reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    LESSOREQUAL     reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    EQUALEQUALS     reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    DIFFERENT       reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    AND             reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    OR              reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)
    RSQRTBRACKET    reduce using rule 64 (func_call -> ID is_valid_func LPAR params RPAR gen_func_call_quad .)


state 114

    (106) dm -> DIVISION .

    LPAR            reduce using rule 106 (dm -> DIVISION .)
    ID              reduce using rule 106 (dm -> DIVISION .)
    CTEINT          reduce using rule 106 (dm -> DIVISION .)
    CTEDOUBLE       reduce using rule 106 (dm -> DIVISION .)
    CTEBOOL         reduce using rule 106 (dm -> DIVISION .)


state 115

    (87) term_aux -> dm . add_to_pilaOptr factor gen_factor_quad term_aux
    (103) add_to_pilaOptr -> .

    LPAR            reduce using rule 103 (add_to_pilaOptr -> .)
    ID              reduce using rule 103 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 103 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 103 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 103 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 145

state 116

    (86) term -> factor gen_factor_quad term_aux .

    PLUS            reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    MINUS           reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    GREATER         reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    LESS            reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    GREATEROREQUAL  reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    LESSOREQUAL     reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    EQUALEQUALS     reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    DIFFERENT       reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    AND             reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    OR              reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    RPAR            reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    SEMICOLON       reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    COMMA           reduce using rule 86 (term -> factor gen_factor_quad term_aux .)
    RSQRTBRACKET    reduce using rule 86 (term -> factor gen_factor_quad term_aux .)


state 117

    (105) dm -> MULTIPLICATION .

    LPAR            reduce using rule 105 (dm -> MULTIPLICATION .)
    ID              reduce using rule 105 (dm -> MULTIPLICATION .)
    CTEINT          reduce using rule 105 (dm -> MULTIPLICATION .)
    CTEDOUBLE       reduce using rule 105 (dm -> MULTIPLICATION .)
    CTEBOOL         reduce using rule 105 (dm -> MULTIPLICATION .)


state 118

    (107) dm -> MOD .

    LPAR            reduce using rule 107 (dm -> MOD .)
    ID              reduce using rule 107 (dm -> MOD .)
    CTEINT          reduce using rule 107 (dm -> MOD .)
    CTEDOUBLE       reduce using rule 107 (dm -> MOD .)
    CTEBOOL         reduce using rule 107 (dm -> MOD .)


state 119

    (101) pl -> MINUS .

    LPAR            reduce using rule 101 (pl -> MINUS .)
    ID              reduce using rule 101 (pl -> MINUS .)
    CTEINT          reduce using rule 101 (pl -> MINUS .)
    CTEDOUBLE       reduce using rule 101 (pl -> MINUS .)
    CTEBOOL         reduce using rule 101 (pl -> MINUS .)


state 120

    (100) pl -> PLUS .

    LPAR            reduce using rule 100 (pl -> PLUS .)
    ID              reduce using rule 100 (pl -> PLUS .)
    CTEINT          reduce using rule 100 (pl -> PLUS .)
    CTEDOUBLE       reduce using rule 100 (pl -> PLUS .)
    CTEBOOL         reduce using rule 100 (pl -> PLUS .)


state 121

    (83) exp_aux -> pl . add_to_pilaOptr term gen_term_quad exp_aux
    (103) add_to_pilaOptr -> .

    LPAR            reduce using rule 103 (add_to_pilaOptr -> .)
    ID              reduce using rule 103 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 103 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 103 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 103 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 146

state 122

    (82) exp -> term gen_term_quad exp_aux .

    AND             reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    OR              reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    RPAR            reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    SEMICOLON       reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    RSQRTBRACKET    reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    COMMA           reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    GREATER         reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    LESS            reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    GREATEROREQUAL  reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    LESSOREQUAL     reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    EQUALEQUALS     reduce using rule 82 (exp -> term gen_term_quad exp_aux .)
    DIFFERENT       reduce using rule 82 (exp -> term gen_term_quad exp_aux .)


state 123

    (67) more_params -> COMMA exp . more_params
    (67) more_params -> . COMMA exp more_params
    (68) more_params -> .

    COMMA           shift and go to state 99
    RPAR            reduce using rule 68 (more_params -> .)

    more_params                    shift and go to state 147

state 124

    (49) read -> READ LPAR ID to_pilaOp arr_par . RPAR gen_read_quad SEMICOLON

    RPAR            shift and go to state 148


state 125

    (56) condition -> IF LPAR expression RPAR check_type . block else_posible fill_end_condition
    (71) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 149

    block                          shift and go to state 150

state 126

    (92) ao -> AND .

    LPAR            reduce using rule 92 (ao -> AND .)
    ID              reduce using rule 92 (ao -> AND .)
    CTEINT          reduce using rule 92 (ao -> AND .)
    CTEDOUBLE       reduce using rule 92 (ao -> AND .)
    CTEBOOL         reduce using rule 92 (ao -> AND .)


state 127

    (75) expression_aux -> ao . add_to_pilaOptr conc gen_conc_quad expression_aux
    (103) add_to_pilaOptr -> .

    LPAR            reduce using rule 103 (add_to_pilaOptr -> .)
    ID              reduce using rule 103 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 103 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 103 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 103 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 151

state 128

    (93) ao -> OR .

    LPAR            reduce using rule 93 (ao -> OR .)
    ID              reduce using rule 93 (ao -> OR .)
    CTEINT          reduce using rule 93 (ao -> OR .)
    CTEDOUBLE       reduce using rule 93 (ao -> OR .)
    CTEBOOL         reduce using rule 93 (ao -> OR .)


state 129

    (74) expression -> conc gen_conc_quad expression_aux .

    SEMICOLON       reduce using rule 74 (expression -> conc gen_conc_quad expression_aux .)
    RPAR            reduce using rule 74 (expression -> conc gen_conc_quad expression_aux .)


state 130

    (99) comp -> DIFFERENT .

    LPAR            reduce using rule 99 (comp -> DIFFERENT .)
    ID              reduce using rule 99 (comp -> DIFFERENT .)
    CTEINT          reduce using rule 99 (comp -> DIFFERENT .)
    CTEDOUBLE       reduce using rule 99 (comp -> DIFFERENT .)
    CTEBOOL         reduce using rule 99 (comp -> DIFFERENT .)


state 131

    (97) comp -> LESSOREQUAL .

    LPAR            reduce using rule 97 (comp -> LESSOREQUAL .)
    ID              reduce using rule 97 (comp -> LESSOREQUAL .)
    CTEINT          reduce using rule 97 (comp -> LESSOREQUAL .)
    CTEDOUBLE       reduce using rule 97 (comp -> LESSOREQUAL .)
    CTEBOOL         reduce using rule 97 (comp -> LESSOREQUAL .)


state 132

    (94) comp -> GREATER .

    LPAR            reduce using rule 94 (comp -> GREATER .)
    ID              reduce using rule 94 (comp -> GREATER .)
    CTEINT          reduce using rule 94 (comp -> GREATER .)
    CTEDOUBLE       reduce using rule 94 (comp -> GREATER .)
    CTEBOOL         reduce using rule 94 (comp -> GREATER .)


state 133

    (95) comp -> LESS .

    LPAR            reduce using rule 95 (comp -> LESS .)
    ID              reduce using rule 95 (comp -> LESS .)
    CTEINT          reduce using rule 95 (comp -> LESS .)
    CTEDOUBLE       reduce using rule 95 (comp -> LESS .)
    CTEBOOL         reduce using rule 95 (comp -> LESS .)


state 134

    (98) comp -> EQUALEQUALS .

    LPAR            reduce using rule 98 (comp -> EQUALEQUALS .)
    ID              reduce using rule 98 (comp -> EQUALEQUALS .)
    CTEINT          reduce using rule 98 (comp -> EQUALEQUALS .)
    CTEDOUBLE       reduce using rule 98 (comp -> EQUALEQUALS .)
    CTEBOOL         reduce using rule 98 (comp -> EQUALEQUALS .)


state 135

    (79) conc_aux -> comp . add_to_pilaOptr exp gen_comp_quad
    (103) add_to_pilaOptr -> .

    LPAR            reduce using rule 103 (add_to_pilaOptr -> .)
    ID              reduce using rule 103 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 103 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 103 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 103 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 152

state 136

    (96) comp -> GREATEROREQUAL .

    LPAR            reduce using rule 96 (comp -> GREATEROREQUAL .)
    ID              reduce using rule 96 (comp -> GREATEROREQUAL .)
    CTEINT          reduce using rule 96 (comp -> GREATEROREQUAL .)
    CTEDOUBLE       reduce using rule 96 (comp -> GREATEROREQUAL .)
    CTEBOOL         reduce using rule 96 (comp -> GREATEROREQUAL .)


state 137

    (78) conc -> exp gen_comp_quad conc_aux .

    AND             reduce using rule 78 (conc -> exp gen_comp_quad conc_aux .)
    OR              reduce using rule 78 (conc -> exp gen_comp_quad conc_aux .)
    RPAR            reduce using rule 78 (conc -> exp gen_comp_quad conc_aux .)
    SEMICOLON       reduce using rule 78 (conc -> exp gen_comp_quad conc_aux .)


state 138

    (51) write -> WRITE LPAR exp RPAR gen_write_quad . SEMICOLON

    SEMICOLON       shift and go to state 153


state 139

    (72) arr_par -> LSQRTBRACKET exp RSQRTBRACKET . arr_par
    (72) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (73) arr_par -> .

    LSQRTBRACKET    shift and go to state 86
    EQUALS          reduce using rule 73 (arr_par -> .)
    RPAR            reduce using rule 73 (arr_par -> .)

    arr_par                        shift and go to state 154

state 140

    (62) assignation -> ID to_pilaOp arr_par EQUALS expression . gen_assignation_quad SEMICOLON
    (63) gen_assignation_quad -> .

    SEMICOLON       reduce using rule 63 (gen_assignation_quad -> .)

    gen_assignation_quad           shift and go to state 155

state 141

    (53) cycle -> WHILE cycle_start LPAR expression RPAR . check_type block cycle_end
    (61) check_type -> .

    LBRACKET        reduce using rule 61 (check_type -> .)

    check_type                     shift and go to state 156

state 142

    (32) more_args -> COMMA var_type . ID to_args more_args

    ID              shift and go to state 157


state 143

    (35) func_block -> LBRACKET more_vars actual_quad_no . more_statement optional_return gen_endproc_quad RBRACKET
    (41) more_statement -> . statement more_statement
    (42) more_statement -> .
    (43) statement -> . read
    (44) statement -> . write
    (45) statement -> . cycle
    (46) statement -> . condition
    (47) statement -> . assignation
    (48) statement -> . func_call SEMICOLON
    (49) read -> . READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON
    (51) write -> . WRITE LPAR exp RPAR gen_write_quad SEMICOLON
    (53) cycle -> . WHILE cycle_start LPAR expression RPAR check_type block cycle_end
    (56) condition -> . IF LPAR expression RPAR check_type block else_posible fill_end_condition
    (62) assignation -> . ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    RETURN          reduce using rule 42 (more_statement -> .)
    RBRACKET        reduce using rule 42 (more_statement -> .)
    READ            shift and go to state 49
    WRITE           shift and go to state 54
    WHILE           shift and go to state 60
    IF              shift and go to state 52
    ID              shift and go to state 55

    write                          shift and go to state 50
    statement                      shift and go to state 51
    read                           shift and go to state 53
    condition                      shift and go to state 56
    cycle                          shift and go to state 57
    func_call                      shift and go to state 58
    assignation                    shift and go to state 59
    more_statement                 shift and go to state 158

state 144

    (90) factor -> LPAR add_to_pilaOptr expression RPAR . pop_false_bottom
    (104) pop_false_bottom -> .

    MULTIPLICATION  reduce using rule 104 (pop_false_bottom -> .)
    DIVISION        reduce using rule 104 (pop_false_bottom -> .)
    MOD             reduce using rule 104 (pop_false_bottom -> .)
    PLUS            reduce using rule 104 (pop_false_bottom -> .)
    MINUS           reduce using rule 104 (pop_false_bottom -> .)
    COMMA           reduce using rule 104 (pop_false_bottom -> .)
    RPAR            reduce using rule 104 (pop_false_bottom -> .)
    GREATER         reduce using rule 104 (pop_false_bottom -> .)
    LESS            reduce using rule 104 (pop_false_bottom -> .)
    GREATEROREQUAL  reduce using rule 104 (pop_false_bottom -> .)
    LESSOREQUAL     reduce using rule 104 (pop_false_bottom -> .)
    EQUALEQUALS     reduce using rule 104 (pop_false_bottom -> .)
    DIFFERENT       reduce using rule 104 (pop_false_bottom -> .)
    AND             reduce using rule 104 (pop_false_bottom -> .)
    OR              reduce using rule 104 (pop_false_bottom -> .)
    RSQRTBRACKET    reduce using rule 104 (pop_false_bottom -> .)
    SEMICOLON       reduce using rule 104 (pop_false_bottom -> .)

    pop_false_bottom               shift and go to state 159

state 145

    (87) term_aux -> dm add_to_pilaOptr . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    const                          shift and go to state 38
    factor                         shift and go to state 160
    var_cte                        shift and go to state 78

state 146

    (83) exp_aux -> pl add_to_pilaOptr . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 161
    const                          shift and go to state 38
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78

state 147

    (67) more_params -> COMMA exp more_params .

    RPAR            reduce using rule 67 (more_params -> COMMA exp more_params .)


state 148

    (49) read -> READ LPAR ID to_pilaOp arr_par RPAR . gen_read_quad SEMICOLON
    (50) gen_read_quad -> .

    SEMICOLON       reduce using rule 50 (gen_read_quad -> .)

    gen_read_quad                  shift and go to state 162

state 149

    (71) block -> LBRACKET . more_statement RBRACKET
    (41) more_statement -> . statement more_statement
    (42) more_statement -> .
    (43) statement -> . read
    (44) statement -> . write
    (45) statement -> . cycle
    (46) statement -> . condition
    (47) statement -> . assignation
    (48) statement -> . func_call SEMICOLON
    (49) read -> . READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON
    (51) write -> . WRITE LPAR exp RPAR gen_write_quad SEMICOLON
    (53) cycle -> . WHILE cycle_start LPAR expression RPAR check_type block cycle_end
    (56) condition -> . IF LPAR expression RPAR check_type block else_posible fill_end_condition
    (62) assignation -> . ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    RBRACKET        reduce using rule 42 (more_statement -> .)
    READ            shift and go to state 49
    WRITE           shift and go to state 54
    WHILE           shift and go to state 60
    IF              shift and go to state 52
    ID              shift and go to state 55

    write                          shift and go to state 50
    statement                      shift and go to state 51
    read                           shift and go to state 53
    condition                      shift and go to state 56
    cycle                          shift and go to state 57
    func_call                      shift and go to state 58
    assignation                    shift and go to state 59
    more_statement                 shift and go to state 163

state 150

    (56) condition -> IF LPAR expression RPAR check_type block . else_posible fill_end_condition
    (57) else_posible -> . ELSE gen_goto block
    (58) else_posible -> .

    ELSE            shift and go to state 165
    READ            reduce using rule 58 (else_posible -> .)
    WRITE           reduce using rule 58 (else_posible -> .)
    WHILE           reduce using rule 58 (else_posible -> .)
    IF              reduce using rule 58 (else_posible -> .)
    ID              reduce using rule 58 (else_posible -> .)
    RBRACKET        reduce using rule 58 (else_posible -> .)
    RETURN          reduce using rule 58 (else_posible -> .)

    else_posible                   shift and go to state 164

state 151

    (75) expression_aux -> ao add_to_pilaOptr . conc gen_conc_quad expression_aux
    (78) conc -> . exp gen_comp_quad conc_aux
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    var_cte                        shift and go to state 78
    conc                           shift and go to state 166
    const                          shift and go to state 38
    factor                         shift and go to state 77
    func_call                      shift and go to state 37
    term                           shift and go to state 79
    exp                            shift and go to state 84

state 152

    (79) conc_aux -> comp add_to_pilaOptr . exp gen_comp_quad
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 79
    const                          shift and go to state 38
    exp                            shift and go to state 167
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78

state 153

    (51) write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .

    READ            reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    WRITE           reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    WHILE           reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    IF              reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    ID              reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    RBRACKET        reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    RETURN          reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)


state 154

    (72) arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .

    RPAR            reduce using rule 72 (arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .)
    EQUALS          reduce using rule 72 (arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .)


state 155

    (62) assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad . SEMICOLON

    SEMICOLON       shift and go to state 168


state 156

    (53) cycle -> WHILE cycle_start LPAR expression RPAR check_type . block cycle_end
    (71) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 149

    block                          shift and go to state 169

state 157

    (32) more_args -> COMMA var_type ID . to_args more_args
    (34) to_args -> .

    COMMA           reduce using rule 34 (to_args -> .)
    RPAR            reduce using rule 34 (to_args -> .)

    to_args                        shift and go to state 170

state 158

    (35) func_block -> LBRACKET more_vars actual_quad_no more_statement . optional_return gen_endproc_quad RBRACKET
    (38) optional_return -> . RETURN exp gen_return_quad SEMICOLON
    (39) optional_return -> .

    RETURN          shift and go to state 171
    RBRACKET        reduce using rule 39 (optional_return -> .)

    optional_return                shift and go to state 172

state 159

    (90) factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .

    MULTIPLICATION  reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    DIVISION        reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    MOD             reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    PLUS            reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    MINUS           reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    COMMA           reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    RPAR            reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    GREATER         reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    LESS            reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    GREATEROREQUAL  reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    LESSOREQUAL     reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    EQUALEQUALS     reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    DIFFERENT       reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    AND             reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    OR              reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    RSQRTBRACKET    reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    SEMICOLON       reduce using rule 90 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)


state 160

    (87) term_aux -> dm add_to_pilaOptr factor . gen_factor_quad term_aux
    (89) gen_factor_quad -> .

    MULTIPLICATION  reduce using rule 89 (gen_factor_quad -> .)
    DIVISION        reduce using rule 89 (gen_factor_quad -> .)
    MOD             reduce using rule 89 (gen_factor_quad -> .)
    PLUS            reduce using rule 89 (gen_factor_quad -> .)
    MINUS           reduce using rule 89 (gen_factor_quad -> .)
    COMMA           reduce using rule 89 (gen_factor_quad -> .)
    RPAR            reduce using rule 89 (gen_factor_quad -> .)
    GREATER         reduce using rule 89 (gen_factor_quad -> .)
    LESS            reduce using rule 89 (gen_factor_quad -> .)
    GREATEROREQUAL  reduce using rule 89 (gen_factor_quad -> .)
    LESSOREQUAL     reduce using rule 89 (gen_factor_quad -> .)
    EQUALEQUALS     reduce using rule 89 (gen_factor_quad -> .)
    DIFFERENT       reduce using rule 89 (gen_factor_quad -> .)
    AND             reduce using rule 89 (gen_factor_quad -> .)
    OR              reduce using rule 89 (gen_factor_quad -> .)
    RSQRTBRACKET    reduce using rule 89 (gen_factor_quad -> .)
    SEMICOLON       reduce using rule 89 (gen_factor_quad -> .)

    gen_factor_quad                shift and go to state 173

state 161

    (83) exp_aux -> pl add_to_pilaOptr term . gen_term_quad exp_aux
    (85) gen_term_quad -> .

    PLUS            reduce using rule 85 (gen_term_quad -> .)
    MINUS           reduce using rule 85 (gen_term_quad -> .)
    COMMA           reduce using rule 85 (gen_term_quad -> .)
    RPAR            reduce using rule 85 (gen_term_quad -> .)
    GREATER         reduce using rule 85 (gen_term_quad -> .)
    LESS            reduce using rule 85 (gen_term_quad -> .)
    GREATEROREQUAL  reduce using rule 85 (gen_term_quad -> .)
    LESSOREQUAL     reduce using rule 85 (gen_term_quad -> .)
    EQUALEQUALS     reduce using rule 85 (gen_term_quad -> .)
    DIFFERENT       reduce using rule 85 (gen_term_quad -> .)
    AND             reduce using rule 85 (gen_term_quad -> .)
    OR              reduce using rule 85 (gen_term_quad -> .)
    RSQRTBRACKET    reduce using rule 85 (gen_term_quad -> .)
    SEMICOLON       reduce using rule 85 (gen_term_quad -> .)

    gen_term_quad                  shift and go to state 174

state 162

    (49) read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad . SEMICOLON

    SEMICOLON       shift and go to state 175


state 163

    (71) block -> LBRACKET more_statement . RBRACKET

    RBRACKET        shift and go to state 176


state 164

    (56) condition -> IF LPAR expression RPAR check_type block else_posible . fill_end_condition
    (60) fill_end_condition -> .

    READ            reduce using rule 60 (fill_end_condition -> .)
    WRITE           reduce using rule 60 (fill_end_condition -> .)
    WHILE           reduce using rule 60 (fill_end_condition -> .)
    IF              reduce using rule 60 (fill_end_condition -> .)
    ID              reduce using rule 60 (fill_end_condition -> .)
    RBRACKET        reduce using rule 60 (fill_end_condition -> .)
    RETURN          reduce using rule 60 (fill_end_condition -> .)

    fill_end_condition             shift and go to state 177

state 165

    (57) else_posible -> ELSE . gen_goto block
    (59) gen_goto -> .

    LBRACKET        reduce using rule 59 (gen_goto -> .)

    gen_goto                       shift and go to state 178

state 166

    (75) expression_aux -> ao add_to_pilaOptr conc . gen_conc_quad expression_aux
    (77) gen_conc_quad -> .

    AND             reduce using rule 77 (gen_conc_quad -> .)
    OR              reduce using rule 77 (gen_conc_quad -> .)
    RPAR            reduce using rule 77 (gen_conc_quad -> .)
    SEMICOLON       reduce using rule 77 (gen_conc_quad -> .)

    gen_conc_quad                  shift and go to state 179

state 167

    (79) conc_aux -> comp add_to_pilaOptr exp . gen_comp_quad
    (81) gen_comp_quad -> .

    AND             reduce using rule 81 (gen_comp_quad -> .)
    OR              reduce using rule 81 (gen_comp_quad -> .)
    RPAR            reduce using rule 81 (gen_comp_quad -> .)
    SEMICOLON       reduce using rule 81 (gen_comp_quad -> .)

    gen_comp_quad                  shift and go to state 180

state 168

    (62) assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON .

    READ            reduce using rule 62 (assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON .)
    WRITE           reduce using rule 62 (assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON .)
    WHILE           reduce using rule 62 (assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON .)
    IF              reduce using rule 62 (assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON .)
    ID              reduce using rule 62 (assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON .)
    RBRACKET        reduce using rule 62 (assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON .)
    RETURN          reduce using rule 62 (assignation -> ID to_pilaOp arr_par EQUALS expression gen_assignation_quad SEMICOLON .)


state 169

    (53) cycle -> WHILE cycle_start LPAR expression RPAR check_type block . cycle_end
    (55) cycle_end -> .

    READ            reduce using rule 55 (cycle_end -> .)
    WRITE           reduce using rule 55 (cycle_end -> .)
    WHILE           reduce using rule 55 (cycle_end -> .)
    IF              reduce using rule 55 (cycle_end -> .)
    ID              reduce using rule 55 (cycle_end -> .)
    RBRACKET        reduce using rule 55 (cycle_end -> .)
    RETURN          reduce using rule 55 (cycle_end -> .)

    cycle_end                      shift and go to state 181

state 170

    (32) more_args -> COMMA var_type ID to_args . more_args
    (32) more_args -> . COMMA var_type ID to_args more_args
    (33) more_args -> .

    COMMA           shift and go to state 109
    RPAR            reduce using rule 33 (more_args -> .)

    more_args                      shift and go to state 182

state 171

    (38) optional_return -> RETURN . exp gen_return_quad SEMICOLON
    (82) exp -> . term gen_term_quad exp_aux
    (86) term -> . factor gen_factor_quad term_aux
    (90) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (91) factor -> . var_cte to_pilaOp
    (16) var_cte -> . const
    (17) var_cte -> . ID arr
    (18) var_cte -> . func_call
    (19) const -> . CTEINT
    (20) const -> . CTEDOUBLE
    (21) const -> . CTEBOOL
    (64) func_call -> . ID is_valid_func LPAR params RPAR gen_func_call_quad

    LPAR            shift and go to state 75
    ID              shift and go to state 40
    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    func_call                      shift and go to state 37
    term                           shift and go to state 79
    const                          shift and go to state 38
    exp                            shift and go to state 183
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78

state 172

    (35) func_block -> LBRACKET more_vars actual_quad_no more_statement optional_return . gen_endproc_quad RBRACKET
    (37) gen_endproc_quad -> .

    RBRACKET        reduce using rule 37 (gen_endproc_quad -> .)

    gen_endproc_quad               shift and go to state 184

state 173

    (87) term_aux -> dm add_to_pilaOptr factor gen_factor_quad . term_aux
    (87) term_aux -> . dm add_to_pilaOptr factor gen_factor_quad term_aux
    (88) term_aux -> .
    (105) dm -> . MULTIPLICATION
    (106) dm -> . DIVISION
    (107) dm -> . MOD

    PLUS            reduce using rule 88 (term_aux -> .)
    MINUS           reduce using rule 88 (term_aux -> .)
    COMMA           reduce using rule 88 (term_aux -> .)
    RPAR            reduce using rule 88 (term_aux -> .)
    GREATER         reduce using rule 88 (term_aux -> .)
    LESS            reduce using rule 88 (term_aux -> .)
    GREATEROREQUAL  reduce using rule 88 (term_aux -> .)
    LESSOREQUAL     reduce using rule 88 (term_aux -> .)
    EQUALEQUALS     reduce using rule 88 (term_aux -> .)
    DIFFERENT       reduce using rule 88 (term_aux -> .)
    AND             reduce using rule 88 (term_aux -> .)
    OR              reduce using rule 88 (term_aux -> .)
    RSQRTBRACKET    reduce using rule 88 (term_aux -> .)
    SEMICOLON       reduce using rule 88 (term_aux -> .)
    MULTIPLICATION  shift and go to state 117
    DIVISION        shift and go to state 114
    MOD             shift and go to state 118

    term_aux                       shift and go to state 185
    dm                             shift and go to state 115

state 174

    (83) exp_aux -> pl add_to_pilaOptr term gen_term_quad . exp_aux
    (83) exp_aux -> . pl add_to_pilaOptr term gen_term_quad exp_aux
    (84) exp_aux -> .
    (100) pl -> . PLUS
    (101) pl -> . MINUS

    COMMA           reduce using rule 84 (exp_aux -> .)
    RPAR            reduce using rule 84 (exp_aux -> .)
    GREATER         reduce using rule 84 (exp_aux -> .)
    LESS            reduce using rule 84 (exp_aux -> .)
    GREATEROREQUAL  reduce using rule 84 (exp_aux -> .)
    LESSOREQUAL     reduce using rule 84 (exp_aux -> .)
    EQUALEQUALS     reduce using rule 84 (exp_aux -> .)
    DIFFERENT       reduce using rule 84 (exp_aux -> .)
    AND             reduce using rule 84 (exp_aux -> .)
    OR              reduce using rule 84 (exp_aux -> .)
    RSQRTBRACKET    reduce using rule 84 (exp_aux -> .)
    SEMICOLON       reduce using rule 84 (exp_aux -> .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 119

    pl                             shift and go to state 121
    exp_aux                        shift and go to state 186

state 175

    (49) read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON .

    READ            reduce using rule 49 (read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON .)
    WRITE           reduce using rule 49 (read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON .)
    WHILE           reduce using rule 49 (read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON .)
    IF              reduce using rule 49 (read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON .)
    ID              reduce using rule 49 (read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON .)
    RETURN          reduce using rule 49 (read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON .)
    RBRACKET        reduce using rule 49 (read -> READ LPAR ID to_pilaOp arr_par RPAR gen_read_quad SEMICOLON .)


state 176

    (71) block -> LBRACKET more_statement RBRACKET .

    READ            reduce using rule 71 (block -> LBRACKET more_statement RBRACKET .)
    WRITE           reduce using rule 71 (block -> LBRACKET more_statement RBRACKET .)
    WHILE           reduce using rule 71 (block -> LBRACKET more_statement RBRACKET .)
    IF              reduce using rule 71 (block -> LBRACKET more_statement RBRACKET .)
    ID              reduce using rule 71 (block -> LBRACKET more_statement RBRACKET .)
    RBRACKET        reduce using rule 71 (block -> LBRACKET more_statement RBRACKET .)
    RETURN          reduce using rule 71 (block -> LBRACKET more_statement RBRACKET .)
    ELSE            reduce using rule 71 (block -> LBRACKET more_statement RBRACKET .)


state 177

    (56) condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .

    READ            reduce using rule 56 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    WRITE           reduce using rule 56 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    WHILE           reduce using rule 56 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    IF              reduce using rule 56 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    ID              reduce using rule 56 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    RBRACKET        reduce using rule 56 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    RETURN          reduce using rule 56 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)


state 178

    (57) else_posible -> ELSE gen_goto . block
    (71) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 149

    block                          shift and go to state 187

state 179

    (75) expression_aux -> ao add_to_pilaOptr conc gen_conc_quad . expression_aux
    (75) expression_aux -> . ao add_to_pilaOptr conc gen_conc_quad expression_aux
    (76) expression_aux -> .
    (92) ao -> . AND
    (93) ao -> . OR

    RPAR            reduce using rule 76 (expression_aux -> .)
    SEMICOLON       reduce using rule 76 (expression_aux -> .)
    AND             shift and go to state 126
    OR              shift and go to state 128

    expression_aux                 shift and go to state 188
    ao                             shift and go to state 127

state 180

    (79) conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .

    AND             reduce using rule 79 (conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .)
    OR              reduce using rule 79 (conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .)
    RPAR            reduce using rule 79 (conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .)
    SEMICOLON       reduce using rule 79 (conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .)


state 181

    (53) cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .

    READ            reduce using rule 53 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    WRITE           reduce using rule 53 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    WHILE           reduce using rule 53 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    IF              reduce using rule 53 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    ID              reduce using rule 53 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    RBRACKET        reduce using rule 53 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    RETURN          reduce using rule 53 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)


state 182

    (32) more_args -> COMMA var_type ID to_args more_args .

    RPAR            reduce using rule 32 (more_args -> COMMA var_type ID to_args more_args .)


state 183

    (38) optional_return -> RETURN exp . gen_return_quad SEMICOLON
    (40) gen_return_quad -> .

    SEMICOLON       reduce using rule 40 (gen_return_quad -> .)

    gen_return_quad                shift and go to state 189

state 184

    (35) func_block -> LBRACKET more_vars actual_quad_no more_statement optional_return gen_endproc_quad . RBRACKET

    RBRACKET        shift and go to state 190


state 185

    (87) term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .

    PLUS            reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    MINUS           reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    COMMA           reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    RPAR            reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    GREATER         reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    LESS            reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    GREATEROREQUAL  reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    LESSOREQUAL     reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    EQUALEQUALS     reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    DIFFERENT       reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    AND             reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    OR              reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    RSQRTBRACKET    reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    SEMICOLON       reduce using rule 87 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)


state 186

    (83) exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .

    COMMA           reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    RPAR            reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    GREATER         reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    LESS            reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    GREATEROREQUAL  reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    LESSOREQUAL     reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    EQUALEQUALS     reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    DIFFERENT       reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    AND             reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    OR              reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    RSQRTBRACKET    reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    SEMICOLON       reduce using rule 83 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)


state 187

    (57) else_posible -> ELSE gen_goto block .

    READ            reduce using rule 57 (else_posible -> ELSE gen_goto block .)
    WRITE           reduce using rule 57 (else_posible -> ELSE gen_goto block .)
    WHILE           reduce using rule 57 (else_posible -> ELSE gen_goto block .)
    IF              reduce using rule 57 (else_posible -> ELSE gen_goto block .)
    ID              reduce using rule 57 (else_posible -> ELSE gen_goto block .)
    RBRACKET        reduce using rule 57 (else_posible -> ELSE gen_goto block .)
    RETURN          reduce using rule 57 (else_posible -> ELSE gen_goto block .)


state 188

    (75) expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux .

    RPAR            reduce using rule 75 (expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux .)
    SEMICOLON       reduce using rule 75 (expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux .)


state 189

    (38) optional_return -> RETURN exp gen_return_quad . SEMICOLON

    SEMICOLON       shift and go to state 191


state 190

    (35) func_block -> LBRACKET more_vars actual_quad_no more_statement optional_return gen_endproc_quad RBRACKET .

    FUNC            reduce using rule 35 (func_block -> LBRACKET more_vars actual_quad_no more_statement optional_return gen_endproc_quad RBRACKET .)
    MAIN            reduce using rule 35 (func_block -> LBRACKET more_vars actual_quad_no more_statement optional_return gen_endproc_quad RBRACKET .)


state 191

    (38) optional_return -> RETURN exp gen_return_quad SEMICOLON .

    RBRACKET        reduce using rule 38 (optional_return -> RETURN exp gen_return_quad SEMICOLON .)

