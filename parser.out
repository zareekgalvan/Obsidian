Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> gen_goto_main more_vars more_func main
Rule 2     gen_goto_main -> <empty>
Rule 3     more_vars -> vars
Rule 4     more_vars -> <empty>
Rule 5     vars -> var_type vars_aux SEMICOLON more_vars
Rule 6     var_type -> BOOL
Rule 7     var_type -> INT
Rule 8     var_type -> DOUBLE
Rule 9     vars_aux -> ID to_var_table arr var_assign more_vars_aux
Rule 10    to_var_table -> <empty>
Rule 11    var_assign -> EQUALS var_cte
Rule 12    var_assign -> <empty>
Rule 13    more_vars_aux -> COMMA vars_aux
Rule 14    more_vars_aux -> <empty>
Rule 15    arr -> LSQRTBRACKET const register_space RSQRTBRACKET
Rule 16    arr -> <empty>
Rule 17    register_space -> <empty>
Rule 18    var_cte -> const
Rule 19    var_cte -> ID arr
Rule 20    var_cte -> func_call
Rule 21    const -> CTEINT
Rule 22    const -> CTEDOUBLE
Rule 23    const -> CTEBOOL
Rule 24    more_func -> func
Rule 25    more_func -> <empty>
Rule 26    func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func
Rule 27    to_proc_dir -> <empty>
Rule 28    func_type -> VOID
Rule 29    func_type -> BOOL
Rule 30    func_type -> INT
Rule 31    func_type -> DOUBLE
Rule 32    arguments -> var_type ID to_args more_args
Rule 33    arguments -> <empty>
Rule 34    more_args -> COMMA var_type ID to_args more_args
Rule 35    more_args -> <empty>
Rule 36    to_args -> <empty>
Rule 37    func_block -> LBRACKET more_vars actual_quad_no more_statement gen_endproc_quad RBRACKET
Rule 38    actual_quad_no -> <empty>
Rule 39    gen_endproc_quad -> <empty>
Rule 40    more_statement -> statement more_statement
Rule 41    more_statement -> <empty>
Rule 42    statement -> read
Rule 43    statement -> write
Rule 44    statement -> return_stmt
Rule 45    statement -> cycle
Rule 46    statement -> condition
Rule 47    statement -> assignation
Rule 48    statement -> func_call SEMICOLON
Rule 49    read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON
Rule 50    gen_read_quad -> <empty>
Rule 51    write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON
Rule 52    gen_write_quad -> <empty>
Rule 53    return_stmt -> RETURN exp gen_return_quad SEMICOLON
Rule 54    gen_return_quad -> <empty>
Rule 55    cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end
Rule 56    cycle_start -> <empty>
Rule 57    cycle_end -> <empty>
Rule 58    condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition
Rule 59    else_posible -> ELSE gen_goto block
Rule 60    else_posible -> <empty>
Rule 61    gen_goto -> <empty>
Rule 62    fill_end_condition -> <empty>
Rule 63    check_type -> <empty>
Rule 64    assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON
Rule 65    gen_assignation_quad -> <empty>
Rule 66    func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub
Rule 67    params -> exp check_args more_params
Rule 68    params -> <empty>
Rule 69    more_params -> COMMA exp check_args more_params
Rule 70    more_params -> <empty>
Rule 71    check_args -> <empty>
Rule 72    is_valid_func -> <empty>
Rule 73    gen_era -> <empty>
Rule 74    gen_go_sub -> <empty>
Rule 75    block -> LBRACKET more_statement RBRACKET
Rule 76    arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par
Rule 77    arr_par -> <empty>
Rule 78    expression -> conc gen_conc_quad expression_aux
Rule 79    expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux
Rule 80    expression_aux -> <empty>
Rule 81    gen_conc_quad -> <empty>
Rule 82    conc -> exp gen_comp_quad conc_aux
Rule 83    conc_aux -> comp add_to_pilaOptr exp gen_comp_quad
Rule 84    conc_aux -> <empty>
Rule 85    gen_comp_quad -> <empty>
Rule 86    exp -> term gen_term_quad exp_aux
Rule 87    exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux
Rule 88    exp_aux -> <empty>
Rule 89    gen_term_quad -> <empty>
Rule 90    term -> factor gen_factor_quad term_aux
Rule 91    term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux
Rule 92    term_aux -> <empty>
Rule 93    gen_factor_quad -> <empty>
Rule 94    factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom
Rule 95    factor -> var_cte to_pilaOp
Rule 96    ao -> AND
Rule 97    ao -> OR
Rule 98    comp -> GREATER
Rule 99    comp -> LESS
Rule 100   comp -> GREATEROREQUAL
Rule 101   comp -> LESSOREQUAL
Rule 102   comp -> EQUALEQUALS
Rule 103   comp -> DIFFERENT
Rule 104   pl -> PLUS
Rule 105   pl -> MINUS
Rule 106   to_pilaOp -> <empty>
Rule 107   add_to_pilaOptr -> <empty>
Rule 108   push_false_bottom -> <empty>
Rule 109   pop_false_bottom -> <empty>
Rule 110   dm -> MULTIPLICATION
Rule 111   dm -> DIVISION
Rule 112   dm -> MOD
Rule 113   main -> MAIN main_to_proc_dir main_block
Rule 114   main_to_proc_dir -> <empty>
Rule 115   main_block -> LBRACKET more_vars more_statement RBRACKET gen_end_quad
Rule 116   gen_end_quad -> <empty>

Terminals, with rules where they appear

AND                  : 96
BOOL                 : 6 29
COMMA                : 13 34 69
CTEBOOL              : 23
CTEDOUBLE            : 22
CTEINT               : 21
DIFFERENT            : 103
DIVISION             : 111
DOUBLE               : 8 31
ELSE                 : 59
EQUALEQUALS          : 102
EQUALS               : 11 64
FUNC                 : 26
GREATER              : 98
GREATEROREQUAL       : 100
ID                   : 9 19 26 32 34 49 64 66
IF                   : 58
INT                  : 7 30
LBRACKET             : 37 75 115
LESS                 : 99
LESSOREQUAL          : 101
LPAR                 : 26 49 51 55 58 66 94
LSQRTBRACKET         : 15 76
MAIN                 : 113
MINUS                : 105
MOD                  : 112
MULTIPLICATION       : 110
OR                   : 97
PLUS                 : 104
RBRACKET             : 37 75 115
READ                 : 49
RETURN               : 53
RPAR                 : 26 49 51 55 58 66 94
RSQRTBRACKET         : 15 76
SEMICOLON            : 5 48 49 51 53 64
VOID                 : 28
WHILE                : 55
WRITE                : 51
error                : 

Nonterminals, with rules where they appear

actual_quad_no       : 37
add_to_pilaOptr      : 79 83 87 91 94
ao                   : 79
arguments            : 26
arr                  : 9 19
arr_par              : 49 64 76
assignation          : 47
block                : 55 58 59
check_args           : 67 69
check_type           : 55 58
comp                 : 83
conc                 : 78 79
conc_aux             : 82
condition            : 46
const                : 15 18
cycle                : 45
cycle_end            : 55
cycle_start          : 55
dm                   : 91
else_posible         : 58
exp                  : 51 53 67 69 76 82 83
exp_aux              : 86 87
expression           : 55 58 64 94
expression_aux       : 78 79
factor               : 90 91
fill_end_condition   : 58
func                 : 24
func_block           : 26
func_call            : 20 48
func_type            : 26
gen_assignation_quad : 64
gen_comp_quad        : 82 83
gen_conc_quad        : 78 79
gen_end_quad         : 115
gen_endproc_quad     : 37
gen_era              : 66
gen_factor_quad      : 90 91
gen_go_sub           : 66
gen_goto             : 59
gen_goto_main        : 1
gen_read_quad        : 49
gen_return_quad      : 53
gen_term_quad        : 86 87
gen_write_quad       : 51
is_valid_func        : 66
main                 : 1
main_block           : 113
main_to_proc_dir     : 113
more_args            : 32 34
more_func            : 1 26
more_params          : 67 69
more_statement       : 37 40 75 115
more_vars            : 1 5 37 115
more_vars_aux        : 9
params               : 66
pl                   : 87
pop_false_bottom     : 66 94
program              : 0
push_false_bottom    : 66
read                 : 42
register_space       : 15
return_stmt          : 44
statement            : 40
term                 : 86 87
term_aux             : 90 91
to_args              : 32 34
to_pilaOp            : 49 64 95
to_proc_dir          : 26
to_var_table         : 9
var_assign           : 9
var_cte              : 11 95
var_type             : 5 32 34
vars                 : 3
vars_aux             : 5 13
write                : 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . gen_goto_main more_vars more_func main
    (2) gen_goto_main -> .

    BOOL            reduce using rule 2 (gen_goto_main -> .)
    INT             reduce using rule 2 (gen_goto_main -> .)
    DOUBLE          reduce using rule 2 (gen_goto_main -> .)
    FUNC            reduce using rule 2 (gen_goto_main -> .)
    MAIN            reduce using rule 2 (gen_goto_main -> .)

    gen_goto_main                  shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> gen_goto_main . more_vars more_func main
    (3) more_vars -> . vars
    (4) more_vars -> .
    (5) vars -> . var_type vars_aux SEMICOLON more_vars
    (6) var_type -> . BOOL
    (7) var_type -> . INT
    (8) var_type -> . DOUBLE

    FUNC            reduce using rule 4 (more_vars -> .)
    MAIN            reduce using rule 4 (more_vars -> .)
    BOOL            shift and go to state 7
    INT             shift and go to state 5
    DOUBLE          shift and go to state 6

    vars                           shift and go to state 3
    var_type                       shift and go to state 4
    more_vars                      shift and go to state 8

state 2

    (0) S' -> program .



state 3

    (3) more_vars -> vars .

    READ            reduce using rule 3 (more_vars -> vars .)
    WRITE           reduce using rule 3 (more_vars -> vars .)
    RETURN          reduce using rule 3 (more_vars -> vars .)
    WHILE           reduce using rule 3 (more_vars -> vars .)
    IF              reduce using rule 3 (more_vars -> vars .)
    ID              reduce using rule 3 (more_vars -> vars .)
    RBRACKET        reduce using rule 3 (more_vars -> vars .)
    FUNC            reduce using rule 3 (more_vars -> vars .)
    MAIN            reduce using rule 3 (more_vars -> vars .)


state 4

    (5) vars -> var_type . vars_aux SEMICOLON more_vars
    (9) vars_aux -> . ID to_var_table arr var_assign more_vars_aux

    ID              shift and go to state 10

    vars_aux                       shift and go to state 9

state 5

    (7) var_type -> INT .

    ID              reduce using rule 7 (var_type -> INT .)


state 6

    (8) var_type -> DOUBLE .

    ID              reduce using rule 8 (var_type -> DOUBLE .)


state 7

    (6) var_type -> BOOL .

    ID              reduce using rule 6 (var_type -> BOOL .)


state 8

    (1) program -> gen_goto_main more_vars . more_func main
    (24) more_func -> . func
    (25) more_func -> .
    (26) func -> . FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func

    MAIN            reduce using rule 25 (more_func -> .)
    FUNC            shift and go to state 13

    more_func                      shift and go to state 12
    func                           shift and go to state 11

state 9

    (5) vars -> var_type vars_aux . SEMICOLON more_vars

    SEMICOLON       shift and go to state 14


state 10

    (9) vars_aux -> ID . to_var_table arr var_assign more_vars_aux
    (10) to_var_table -> .

    LSQRTBRACKET    reduce using rule 10 (to_var_table -> .)
    EQUALS          reduce using rule 10 (to_var_table -> .)
    COMMA           reduce using rule 10 (to_var_table -> .)
    SEMICOLON       reduce using rule 10 (to_var_table -> .)

    to_var_table                   shift and go to state 15

state 11

    (24) more_func -> func .

    MAIN            reduce using rule 24 (more_func -> func .)


state 12

    (1) program -> gen_goto_main more_vars more_func . main
    (113) main -> . MAIN main_to_proc_dir main_block

    MAIN            shift and go to state 17

    main                           shift and go to state 16

state 13

    (26) func -> FUNC . func_type ID to_proc_dir LPAR arguments RPAR func_block more_func
    (28) func_type -> . VOID
    (29) func_type -> . BOOL
    (30) func_type -> . INT
    (31) func_type -> . DOUBLE

    VOID            shift and go to state 20
    BOOL            shift and go to state 22
    INT             shift and go to state 21
    DOUBLE          shift and go to state 19

    func_type                      shift and go to state 18

state 14

    (5) vars -> var_type vars_aux SEMICOLON . more_vars
    (3) more_vars -> . vars
    (4) more_vars -> .
    (5) vars -> . var_type vars_aux SEMICOLON more_vars
    (6) var_type -> . BOOL
    (7) var_type -> . INT
    (8) var_type -> . DOUBLE

    FUNC            reduce using rule 4 (more_vars -> .)
    MAIN            reduce using rule 4 (more_vars -> .)
    READ            reduce using rule 4 (more_vars -> .)
    WRITE           reduce using rule 4 (more_vars -> .)
    RETURN          reduce using rule 4 (more_vars -> .)
    WHILE           reduce using rule 4 (more_vars -> .)
    IF              reduce using rule 4 (more_vars -> .)
    ID              reduce using rule 4 (more_vars -> .)
    RBRACKET        reduce using rule 4 (more_vars -> .)
    BOOL            shift and go to state 7
    INT             shift and go to state 5
    DOUBLE          shift and go to state 6

    vars                           shift and go to state 3
    more_vars                      shift and go to state 23
    var_type                       shift and go to state 4

state 15

    (9) vars_aux -> ID to_var_table . arr var_assign more_vars_aux
    (15) arr -> . LSQRTBRACKET const register_space RSQRTBRACKET
    (16) arr -> .

    LSQRTBRACKET    shift and go to state 25
    EQUALS          reduce using rule 16 (arr -> .)
    COMMA           reduce using rule 16 (arr -> .)
    SEMICOLON       reduce using rule 16 (arr -> .)

    arr                            shift and go to state 24

state 16

    (1) program -> gen_goto_main more_vars more_func main .

    $end            reduce using rule 1 (program -> gen_goto_main more_vars more_func main .)


state 17

    (113) main -> MAIN . main_to_proc_dir main_block
    (114) main_to_proc_dir -> .

    LBRACKET        reduce using rule 114 (main_to_proc_dir -> .)

    main_to_proc_dir               shift and go to state 26

state 18

    (26) func -> FUNC func_type . ID to_proc_dir LPAR arguments RPAR func_block more_func

    ID              shift and go to state 27


state 19

    (31) func_type -> DOUBLE .

    ID              reduce using rule 31 (func_type -> DOUBLE .)


state 20

    (28) func_type -> VOID .

    ID              reduce using rule 28 (func_type -> VOID .)


state 21

    (30) func_type -> INT .

    ID              reduce using rule 30 (func_type -> INT .)


state 22

    (29) func_type -> BOOL .

    ID              reduce using rule 29 (func_type -> BOOL .)


state 23

    (5) vars -> var_type vars_aux SEMICOLON more_vars .

    FUNC            reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)
    MAIN            reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)
    READ            reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)
    WRITE           reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)
    RETURN          reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)
    WHILE           reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)
    IF              reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)
    ID              reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)
    RBRACKET        reduce using rule 5 (vars -> var_type vars_aux SEMICOLON more_vars .)


state 24

    (9) vars_aux -> ID to_var_table arr . var_assign more_vars_aux
    (11) var_assign -> . EQUALS var_cte
    (12) var_assign -> .

    EQUALS          shift and go to state 28
    COMMA           reduce using rule 12 (var_assign -> .)
    SEMICOLON       reduce using rule 12 (var_assign -> .)

    var_assign                     shift and go to state 29

state 25

    (15) arr -> LSQRTBRACKET . const register_space RSQRTBRACKET
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL

    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    const                          shift and go to state 31

state 26

    (113) main -> MAIN main_to_proc_dir . main_block
    (115) main_block -> . LBRACKET more_vars more_statement RBRACKET gen_end_quad

    LBRACKET        shift and go to state 35

    main_block                     shift and go to state 34

state 27

    (26) func -> FUNC func_type ID . to_proc_dir LPAR arguments RPAR func_block more_func
    (27) to_proc_dir -> .

    LPAR            reduce using rule 27 (to_proc_dir -> .)

    to_proc_dir                    shift and go to state 36

state 28

    (11) var_assign -> EQUALS . var_cte
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    func_call                      shift and go to state 37
    const                          shift and go to state 38
    var_cte                        shift and go to state 39

state 29

    (9) vars_aux -> ID to_var_table arr var_assign . more_vars_aux
    (13) more_vars_aux -> . COMMA vars_aux
    (14) more_vars_aux -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 14 (more_vars_aux -> .)

    more_vars_aux                  shift and go to state 41

state 30

    (22) const -> CTEDOUBLE .

    MULTIPLICATION  reduce using rule 22 (const -> CTEDOUBLE .)
    DIVISION        reduce using rule 22 (const -> CTEDOUBLE .)
    MOD             reduce using rule 22 (const -> CTEDOUBLE .)
    PLUS            reduce using rule 22 (const -> CTEDOUBLE .)
    MINUS           reduce using rule 22 (const -> CTEDOUBLE .)
    AND             reduce using rule 22 (const -> CTEDOUBLE .)
    OR              reduce using rule 22 (const -> CTEDOUBLE .)
    RPAR            reduce using rule 22 (const -> CTEDOUBLE .)
    SEMICOLON       reduce using rule 22 (const -> CTEDOUBLE .)
    GREATER         reduce using rule 22 (const -> CTEDOUBLE .)
    LESS            reduce using rule 22 (const -> CTEDOUBLE .)
    GREATEROREQUAL  reduce using rule 22 (const -> CTEDOUBLE .)
    LESSOREQUAL     reduce using rule 22 (const -> CTEDOUBLE .)
    EQUALEQUALS     reduce using rule 22 (const -> CTEDOUBLE .)
    DIFFERENT       reduce using rule 22 (const -> CTEDOUBLE .)
    COMMA           reduce using rule 22 (const -> CTEDOUBLE .)
    RSQRTBRACKET    reduce using rule 22 (const -> CTEDOUBLE .)


state 31

    (15) arr -> LSQRTBRACKET const . register_space RSQRTBRACKET
    (17) register_space -> .

    RSQRTBRACKET    reduce using rule 17 (register_space -> .)

    register_space                 shift and go to state 43

state 32

    (23) const -> CTEBOOL .

    MULTIPLICATION  reduce using rule 23 (const -> CTEBOOL .)
    DIVISION        reduce using rule 23 (const -> CTEBOOL .)
    MOD             reduce using rule 23 (const -> CTEBOOL .)
    PLUS            reduce using rule 23 (const -> CTEBOOL .)
    MINUS           reduce using rule 23 (const -> CTEBOOL .)
    AND             reduce using rule 23 (const -> CTEBOOL .)
    OR              reduce using rule 23 (const -> CTEBOOL .)
    RPAR            reduce using rule 23 (const -> CTEBOOL .)
    SEMICOLON       reduce using rule 23 (const -> CTEBOOL .)
    GREATER         reduce using rule 23 (const -> CTEBOOL .)
    LESS            reduce using rule 23 (const -> CTEBOOL .)
    GREATEROREQUAL  reduce using rule 23 (const -> CTEBOOL .)
    LESSOREQUAL     reduce using rule 23 (const -> CTEBOOL .)
    EQUALEQUALS     reduce using rule 23 (const -> CTEBOOL .)
    DIFFERENT       reduce using rule 23 (const -> CTEBOOL .)
    COMMA           reduce using rule 23 (const -> CTEBOOL .)
    RSQRTBRACKET    reduce using rule 23 (const -> CTEBOOL .)


state 33

    (21) const -> CTEINT .

    MULTIPLICATION  reduce using rule 21 (const -> CTEINT .)
    DIVISION        reduce using rule 21 (const -> CTEINT .)
    MOD             reduce using rule 21 (const -> CTEINT .)
    PLUS            reduce using rule 21 (const -> CTEINT .)
    MINUS           reduce using rule 21 (const -> CTEINT .)
    AND             reduce using rule 21 (const -> CTEINT .)
    OR              reduce using rule 21 (const -> CTEINT .)
    RPAR            reduce using rule 21 (const -> CTEINT .)
    SEMICOLON       reduce using rule 21 (const -> CTEINT .)
    GREATER         reduce using rule 21 (const -> CTEINT .)
    LESS            reduce using rule 21 (const -> CTEINT .)
    GREATEROREQUAL  reduce using rule 21 (const -> CTEINT .)
    LESSOREQUAL     reduce using rule 21 (const -> CTEINT .)
    EQUALEQUALS     reduce using rule 21 (const -> CTEINT .)
    DIFFERENT       reduce using rule 21 (const -> CTEINT .)
    COMMA           reduce using rule 21 (const -> CTEINT .)
    RSQRTBRACKET    reduce using rule 21 (const -> CTEINT .)


state 34

    (113) main -> MAIN main_to_proc_dir main_block .

    $end            reduce using rule 113 (main -> MAIN main_to_proc_dir main_block .)


state 35

    (115) main_block -> LBRACKET . more_vars more_statement RBRACKET gen_end_quad
    (3) more_vars -> . vars
    (4) more_vars -> .
    (5) vars -> . var_type vars_aux SEMICOLON more_vars
    (6) var_type -> . BOOL
    (7) var_type -> . INT
    (8) var_type -> . DOUBLE

    READ            reduce using rule 4 (more_vars -> .)
    WRITE           reduce using rule 4 (more_vars -> .)
    RETURN          reduce using rule 4 (more_vars -> .)
    WHILE           reduce using rule 4 (more_vars -> .)
    IF              reduce using rule 4 (more_vars -> .)
    ID              reduce using rule 4 (more_vars -> .)
    RBRACKET        reduce using rule 4 (more_vars -> .)
    BOOL            shift and go to state 7
    INT             shift and go to state 5
    DOUBLE          shift and go to state 6

    vars                           shift and go to state 3
    var_type                       shift and go to state 4
    more_vars                      shift and go to state 44

state 36

    (26) func -> FUNC func_type ID to_proc_dir . LPAR arguments RPAR func_block more_func

    LPAR            shift and go to state 45


state 37

    (20) var_cte -> func_call .

    MULTIPLICATION  reduce using rule 20 (var_cte -> func_call .)
    DIVISION        reduce using rule 20 (var_cte -> func_call .)
    MOD             reduce using rule 20 (var_cte -> func_call .)
    PLUS            reduce using rule 20 (var_cte -> func_call .)
    MINUS           reduce using rule 20 (var_cte -> func_call .)
    SEMICOLON       reduce using rule 20 (var_cte -> func_call .)
    GREATER         reduce using rule 20 (var_cte -> func_call .)
    LESS            reduce using rule 20 (var_cte -> func_call .)
    GREATEROREQUAL  reduce using rule 20 (var_cte -> func_call .)
    LESSOREQUAL     reduce using rule 20 (var_cte -> func_call .)
    EQUALEQUALS     reduce using rule 20 (var_cte -> func_call .)
    DIFFERENT       reduce using rule 20 (var_cte -> func_call .)
    AND             reduce using rule 20 (var_cte -> func_call .)
    OR              reduce using rule 20 (var_cte -> func_call .)
    RPAR            reduce using rule 20 (var_cte -> func_call .)
    RSQRTBRACKET    reduce using rule 20 (var_cte -> func_call .)
    COMMA           reduce using rule 20 (var_cte -> func_call .)


state 38

    (18) var_cte -> const .

    MULTIPLICATION  reduce using rule 18 (var_cte -> const .)
    DIVISION        reduce using rule 18 (var_cte -> const .)
    MOD             reduce using rule 18 (var_cte -> const .)
    PLUS            reduce using rule 18 (var_cte -> const .)
    MINUS           reduce using rule 18 (var_cte -> const .)
    SEMICOLON       reduce using rule 18 (var_cte -> const .)
    GREATER         reduce using rule 18 (var_cte -> const .)
    LESS            reduce using rule 18 (var_cte -> const .)
    GREATEROREQUAL  reduce using rule 18 (var_cte -> const .)
    LESSOREQUAL     reduce using rule 18 (var_cte -> const .)
    EQUALEQUALS     reduce using rule 18 (var_cte -> const .)
    DIFFERENT       reduce using rule 18 (var_cte -> const .)
    AND             reduce using rule 18 (var_cte -> const .)
    OR              reduce using rule 18 (var_cte -> const .)
    RPAR            reduce using rule 18 (var_cte -> const .)
    RSQRTBRACKET    reduce using rule 18 (var_cte -> const .)
    COMMA           reduce using rule 18 (var_cte -> const .)


state 39

    (11) var_assign -> EQUALS var_cte .

    COMMA           reduce using rule 11 (var_assign -> EQUALS var_cte .)
    SEMICOLON       reduce using rule 11 (var_assign -> EQUALS var_cte .)


state 40

    (19) var_cte -> ID . arr
    (66) func_call -> ID . is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub
    (15) arr -> . LSQRTBRACKET const register_space RSQRTBRACKET
    (16) arr -> .
    (72) is_valid_func -> .

    LSQRTBRACKET    shift and go to state 25
    COMMA           reduce using rule 16 (arr -> .)
    SEMICOLON       reduce using rule 16 (arr -> .)
    MULTIPLICATION  reduce using rule 16 (arr -> .)
    DIVISION        reduce using rule 16 (arr -> .)
    MOD             reduce using rule 16 (arr -> .)
    PLUS            reduce using rule 16 (arr -> .)
    MINUS           reduce using rule 16 (arr -> .)
    GREATER         reduce using rule 16 (arr -> .)
    LESS            reduce using rule 16 (arr -> .)
    GREATEROREQUAL  reduce using rule 16 (arr -> .)
    LESSOREQUAL     reduce using rule 16 (arr -> .)
    EQUALEQUALS     reduce using rule 16 (arr -> .)
    DIFFERENT       reduce using rule 16 (arr -> .)
    AND             reduce using rule 16 (arr -> .)
    OR              reduce using rule 16 (arr -> .)
    RPAR            reduce using rule 16 (arr -> .)
    RSQRTBRACKET    reduce using rule 16 (arr -> .)
    LPAR            reduce using rule 72 (is_valid_func -> .)

    arr                            shift and go to state 46
    is_valid_func                  shift and go to state 47

state 41

    (9) vars_aux -> ID to_var_table arr var_assign more_vars_aux .

    SEMICOLON       reduce using rule 9 (vars_aux -> ID to_var_table arr var_assign more_vars_aux .)


state 42

    (13) more_vars_aux -> COMMA . vars_aux
    (9) vars_aux -> . ID to_var_table arr var_assign more_vars_aux

    ID              shift and go to state 10

    vars_aux                       shift and go to state 48

state 43

    (15) arr -> LSQRTBRACKET const register_space . RSQRTBRACKET

    RSQRTBRACKET    shift and go to state 49


state 44

    (115) main_block -> LBRACKET more_vars . more_statement RBRACKET gen_end_quad
    (40) more_statement -> . statement more_statement
    (41) more_statement -> .
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . return_stmt
    (45) statement -> . cycle
    (46) statement -> . condition
    (47) statement -> . assignation
    (48) statement -> . func_call SEMICOLON
    (49) read -> . READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON
    (51) write -> . WRITE LPAR exp RPAR gen_write_quad SEMICOLON
    (53) return_stmt -> . RETURN exp gen_return_quad SEMICOLON
    (55) cycle -> . WHILE cycle_start LPAR expression RPAR check_type block cycle_end
    (58) condition -> . IF LPAR expression RPAR check_type block else_posible fill_end_condition
    (64) assignation -> . ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    RBRACKET        reduce using rule 41 (more_statement -> .)
    READ            shift and go to state 50
    WRITE           shift and go to state 57
    RETURN          shift and go to state 52
    WHILE           shift and go to state 63
    IF              shift and go to state 55
    ID              shift and go to state 58

    return_stmt                    shift and go to state 51
    write                          shift and go to state 53
    statement                      shift and go to state 54
    read                           shift and go to state 56
    condition                      shift and go to state 59
    cycle                          shift and go to state 60
    func_call                      shift and go to state 61
    assignation                    shift and go to state 62
    more_statement                 shift and go to state 64

state 45

    (26) func -> FUNC func_type ID to_proc_dir LPAR . arguments RPAR func_block more_func
    (32) arguments -> . var_type ID to_args more_args
    (33) arguments -> .
    (6) var_type -> . BOOL
    (7) var_type -> . INT
    (8) var_type -> . DOUBLE

    RPAR            reduce using rule 33 (arguments -> .)
    BOOL            shift and go to state 7
    INT             shift and go to state 5
    DOUBLE          shift and go to state 6

    var_type                       shift and go to state 65
    arguments                      shift and go to state 66

state 46

    (19) var_cte -> ID arr .

    MULTIPLICATION  reduce using rule 19 (var_cte -> ID arr .)
    DIVISION        reduce using rule 19 (var_cte -> ID arr .)
    MOD             reduce using rule 19 (var_cte -> ID arr .)
    PLUS            reduce using rule 19 (var_cte -> ID arr .)
    MINUS           reduce using rule 19 (var_cte -> ID arr .)
    SEMICOLON       reduce using rule 19 (var_cte -> ID arr .)
    GREATER         reduce using rule 19 (var_cte -> ID arr .)
    LESS            reduce using rule 19 (var_cte -> ID arr .)
    GREATEROREQUAL  reduce using rule 19 (var_cte -> ID arr .)
    LESSOREQUAL     reduce using rule 19 (var_cte -> ID arr .)
    EQUALEQUALS     reduce using rule 19 (var_cte -> ID arr .)
    DIFFERENT       reduce using rule 19 (var_cte -> ID arr .)
    AND             reduce using rule 19 (var_cte -> ID arr .)
    OR              reduce using rule 19 (var_cte -> ID arr .)
    RPAR            reduce using rule 19 (var_cte -> ID arr .)
    RSQRTBRACKET    reduce using rule 19 (var_cte -> ID arr .)
    COMMA           reduce using rule 19 (var_cte -> ID arr .)


state 47

    (66) func_call -> ID is_valid_func . LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 67


state 48

    (13) more_vars_aux -> COMMA vars_aux .

    SEMICOLON       reduce using rule 13 (more_vars_aux -> COMMA vars_aux .)


state 49

    (15) arr -> LSQRTBRACKET const register_space RSQRTBRACKET .

    EQUALS          reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    COMMA           reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    SEMICOLON       reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    MULTIPLICATION  reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    DIVISION        reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    MOD             reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    PLUS            reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    MINUS           reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    GREATER         reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    LESS            reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    GREATEROREQUAL  reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    LESSOREQUAL     reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    EQUALEQUALS     reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    DIFFERENT       reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    AND             reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    OR              reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    RPAR            reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)
    RSQRTBRACKET    reduce using rule 15 (arr -> LSQRTBRACKET const register_space RSQRTBRACKET .)


state 50

    (49) read -> READ . LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON

    LPAR            shift and go to state 68


state 51

    (44) statement -> return_stmt .

    READ            reduce using rule 44 (statement -> return_stmt .)
    WRITE           reduce using rule 44 (statement -> return_stmt .)
    RETURN          reduce using rule 44 (statement -> return_stmt .)
    WHILE           reduce using rule 44 (statement -> return_stmt .)
    IF              reduce using rule 44 (statement -> return_stmt .)
    ID              reduce using rule 44 (statement -> return_stmt .)
    RBRACKET        reduce using rule 44 (statement -> return_stmt .)


state 52

    (53) return_stmt -> RETURN . exp gen_return_quad SEMICOLON
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    func_call                      shift and go to state 37
    term                           shift and go to state 72
    const                          shift and go to state 38
    exp                            shift and go to state 73
    factor                         shift and go to state 70
    var_cte                        shift and go to state 71

state 53

    (43) statement -> write .

    READ            reduce using rule 43 (statement -> write .)
    WRITE           reduce using rule 43 (statement -> write .)
    RETURN          reduce using rule 43 (statement -> write .)
    WHILE           reduce using rule 43 (statement -> write .)
    IF              reduce using rule 43 (statement -> write .)
    ID              reduce using rule 43 (statement -> write .)
    RBRACKET        reduce using rule 43 (statement -> write .)


state 54

    (40) more_statement -> statement . more_statement
    (40) more_statement -> . statement more_statement
    (41) more_statement -> .
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . return_stmt
    (45) statement -> . cycle
    (46) statement -> . condition
    (47) statement -> . assignation
    (48) statement -> . func_call SEMICOLON
    (49) read -> . READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON
    (51) write -> . WRITE LPAR exp RPAR gen_write_quad SEMICOLON
    (53) return_stmt -> . RETURN exp gen_return_quad SEMICOLON
    (55) cycle -> . WHILE cycle_start LPAR expression RPAR check_type block cycle_end
    (58) condition -> . IF LPAR expression RPAR check_type block else_posible fill_end_condition
    (64) assignation -> . ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    RBRACKET        reduce using rule 41 (more_statement -> .)
    READ            shift and go to state 50
    WRITE           shift and go to state 57
    RETURN          shift and go to state 52
    WHILE           shift and go to state 63
    IF              shift and go to state 55
    ID              shift and go to state 58

    return_stmt                    shift and go to state 51
    write                          shift and go to state 53
    statement                      shift and go to state 54
    read                           shift and go to state 56
    condition                      shift and go to state 59
    cycle                          shift and go to state 60
    func_call                      shift and go to state 61
    assignation                    shift and go to state 62
    more_statement                 shift and go to state 74

state 55

    (58) condition -> IF . LPAR expression RPAR check_type block else_posible fill_end_condition

    LPAR            shift and go to state 75


state 56

    (42) statement -> read .

    READ            reduce using rule 42 (statement -> read .)
    WRITE           reduce using rule 42 (statement -> read .)
    RETURN          reduce using rule 42 (statement -> read .)
    WHILE           reduce using rule 42 (statement -> read .)
    IF              reduce using rule 42 (statement -> read .)
    ID              reduce using rule 42 (statement -> read .)
    RBRACKET        reduce using rule 42 (statement -> read .)


state 57

    (51) write -> WRITE . LPAR exp RPAR gen_write_quad SEMICOLON

    LPAR            shift and go to state 76


state 58

    (64) assignation -> ID . arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON
    (66) func_call -> ID . is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub
    (76) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (77) arr_par -> .
    (72) is_valid_func -> .

    LSQRTBRACKET    shift and go to state 77
    EQUALS          reduce using rule 77 (arr_par -> .)
    LPAR            reduce using rule 72 (is_valid_func -> .)

    arr_par                        shift and go to state 78
    is_valid_func                  shift and go to state 47

state 59

    (46) statement -> condition .

    READ            reduce using rule 46 (statement -> condition .)
    WRITE           reduce using rule 46 (statement -> condition .)
    RETURN          reduce using rule 46 (statement -> condition .)
    WHILE           reduce using rule 46 (statement -> condition .)
    IF              reduce using rule 46 (statement -> condition .)
    ID              reduce using rule 46 (statement -> condition .)
    RBRACKET        reduce using rule 46 (statement -> condition .)


state 60

    (45) statement -> cycle .

    READ            reduce using rule 45 (statement -> cycle .)
    WRITE           reduce using rule 45 (statement -> cycle .)
    RETURN          reduce using rule 45 (statement -> cycle .)
    WHILE           reduce using rule 45 (statement -> cycle .)
    IF              reduce using rule 45 (statement -> cycle .)
    ID              reduce using rule 45 (statement -> cycle .)
    RBRACKET        reduce using rule 45 (statement -> cycle .)


state 61

    (48) statement -> func_call . SEMICOLON

    SEMICOLON       shift and go to state 79


state 62

    (47) statement -> assignation .

    READ            reduce using rule 47 (statement -> assignation .)
    WRITE           reduce using rule 47 (statement -> assignation .)
    RETURN          reduce using rule 47 (statement -> assignation .)
    WHILE           reduce using rule 47 (statement -> assignation .)
    IF              reduce using rule 47 (statement -> assignation .)
    ID              reduce using rule 47 (statement -> assignation .)
    RBRACKET        reduce using rule 47 (statement -> assignation .)


state 63

    (55) cycle -> WHILE . cycle_start LPAR expression RPAR check_type block cycle_end
    (56) cycle_start -> .

    LPAR            reduce using rule 56 (cycle_start -> .)

    cycle_start                    shift and go to state 80

state 64

    (115) main_block -> LBRACKET more_vars more_statement . RBRACKET gen_end_quad

    RBRACKET        shift and go to state 81


state 65

    (32) arguments -> var_type . ID to_args more_args

    ID              shift and go to state 82


state 66

    (26) func -> FUNC func_type ID to_proc_dir LPAR arguments . RPAR func_block more_func

    RPAR            shift and go to state 83


state 67

    (66) func_call -> ID is_valid_func LPAR . gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub
    (73) gen_era -> .

    LPAR            reduce using rule 73 (gen_era -> .)
    ID              reduce using rule 73 (gen_era -> .)
    CTEINT          reduce using rule 73 (gen_era -> .)
    CTEDOUBLE       reduce using rule 73 (gen_era -> .)
    CTEBOOL         reduce using rule 73 (gen_era -> .)
    RPAR            reduce using rule 73 (gen_era -> .)

    gen_era                        shift and go to state 84

state 68

    (49) read -> READ LPAR . ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON

    ID              shift and go to state 85


state 69

    (94) factor -> LPAR . add_to_pilaOptr expression RPAR pop_false_bottom
    (107) add_to_pilaOptr -> .

    LPAR            reduce using rule 107 (add_to_pilaOptr -> .)
    ID              reduce using rule 107 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 107 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 107 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 107 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 86

state 70

    (90) term -> factor . gen_factor_quad term_aux
    (93) gen_factor_quad -> .

    MULTIPLICATION  reduce using rule 93 (gen_factor_quad -> .)
    DIVISION        reduce using rule 93 (gen_factor_quad -> .)
    MOD             reduce using rule 93 (gen_factor_quad -> .)
    PLUS            reduce using rule 93 (gen_factor_quad -> .)
    MINUS           reduce using rule 93 (gen_factor_quad -> .)
    SEMICOLON       reduce using rule 93 (gen_factor_quad -> .)
    GREATER         reduce using rule 93 (gen_factor_quad -> .)
    LESS            reduce using rule 93 (gen_factor_quad -> .)
    GREATEROREQUAL  reduce using rule 93 (gen_factor_quad -> .)
    LESSOREQUAL     reduce using rule 93 (gen_factor_quad -> .)
    EQUALEQUALS     reduce using rule 93 (gen_factor_quad -> .)
    DIFFERENT       reduce using rule 93 (gen_factor_quad -> .)
    AND             reduce using rule 93 (gen_factor_quad -> .)
    OR              reduce using rule 93 (gen_factor_quad -> .)
    RPAR            reduce using rule 93 (gen_factor_quad -> .)
    RSQRTBRACKET    reduce using rule 93 (gen_factor_quad -> .)
    COMMA           reduce using rule 93 (gen_factor_quad -> .)

    gen_factor_quad                shift and go to state 87

state 71

    (95) factor -> var_cte . to_pilaOp
    (106) to_pilaOp -> .

    MULTIPLICATION  reduce using rule 106 (to_pilaOp -> .)
    DIVISION        reduce using rule 106 (to_pilaOp -> .)
    MOD             reduce using rule 106 (to_pilaOp -> .)
    PLUS            reduce using rule 106 (to_pilaOp -> .)
    MINUS           reduce using rule 106 (to_pilaOp -> .)
    SEMICOLON       reduce using rule 106 (to_pilaOp -> .)
    GREATER         reduce using rule 106 (to_pilaOp -> .)
    LESS            reduce using rule 106 (to_pilaOp -> .)
    GREATEROREQUAL  reduce using rule 106 (to_pilaOp -> .)
    LESSOREQUAL     reduce using rule 106 (to_pilaOp -> .)
    EQUALEQUALS     reduce using rule 106 (to_pilaOp -> .)
    DIFFERENT       reduce using rule 106 (to_pilaOp -> .)
    AND             reduce using rule 106 (to_pilaOp -> .)
    OR              reduce using rule 106 (to_pilaOp -> .)
    RPAR            reduce using rule 106 (to_pilaOp -> .)
    RSQRTBRACKET    reduce using rule 106 (to_pilaOp -> .)
    COMMA           reduce using rule 106 (to_pilaOp -> .)

    to_pilaOp                      shift and go to state 88

state 72

    (86) exp -> term . gen_term_quad exp_aux
    (89) gen_term_quad -> .

    PLUS            reduce using rule 89 (gen_term_quad -> .)
    MINUS           reduce using rule 89 (gen_term_quad -> .)
    SEMICOLON       reduce using rule 89 (gen_term_quad -> .)
    GREATER         reduce using rule 89 (gen_term_quad -> .)
    LESS            reduce using rule 89 (gen_term_quad -> .)
    GREATEROREQUAL  reduce using rule 89 (gen_term_quad -> .)
    LESSOREQUAL     reduce using rule 89 (gen_term_quad -> .)
    EQUALEQUALS     reduce using rule 89 (gen_term_quad -> .)
    DIFFERENT       reduce using rule 89 (gen_term_quad -> .)
    AND             reduce using rule 89 (gen_term_quad -> .)
    OR              reduce using rule 89 (gen_term_quad -> .)
    RPAR            reduce using rule 89 (gen_term_quad -> .)
    RSQRTBRACKET    reduce using rule 89 (gen_term_quad -> .)
    COMMA           reduce using rule 89 (gen_term_quad -> .)

    gen_term_quad                  shift and go to state 89

state 73

    (53) return_stmt -> RETURN exp . gen_return_quad SEMICOLON
    (54) gen_return_quad -> .

    SEMICOLON       reduce using rule 54 (gen_return_quad -> .)

    gen_return_quad                shift and go to state 90

state 74

    (40) more_statement -> statement more_statement .

    RBRACKET        reduce using rule 40 (more_statement -> statement more_statement .)


state 75

    (58) condition -> IF LPAR . expression RPAR check_type block else_posible fill_end_condition
    (78) expression -> . conc gen_conc_quad expression_aux
    (82) conc -> . exp gen_comp_quad conc_aux
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    var_cte                        shift and go to state 71
    const                          shift and go to state 38
    factor                         shift and go to state 70
    func_call                      shift and go to state 37
    term                           shift and go to state 72
    conc                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 91

state 76

    (51) write -> WRITE LPAR . exp RPAR gen_write_quad SEMICOLON
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    func_call                      shift and go to state 37
    term                           shift and go to state 72
    const                          shift and go to state 38
    exp                            shift and go to state 94
    factor                         shift and go to state 70
    var_cte                        shift and go to state 71

state 77

    (76) arr_par -> LSQRTBRACKET . exp RSQRTBRACKET arr_par
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    func_call                      shift and go to state 37
    term                           shift and go to state 72
    const                          shift and go to state 38
    exp                            shift and go to state 95
    factor                         shift and go to state 70
    var_cte                        shift and go to state 71

state 78

    (64) assignation -> ID arr_par . to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON
    (106) to_pilaOp -> .

    EQUALS          reduce using rule 106 (to_pilaOp -> .)

    to_pilaOp                      shift and go to state 96

state 79

    (48) statement -> func_call SEMICOLON .

    READ            reduce using rule 48 (statement -> func_call SEMICOLON .)
    WRITE           reduce using rule 48 (statement -> func_call SEMICOLON .)
    RETURN          reduce using rule 48 (statement -> func_call SEMICOLON .)
    WHILE           reduce using rule 48 (statement -> func_call SEMICOLON .)
    IF              reduce using rule 48 (statement -> func_call SEMICOLON .)
    ID              reduce using rule 48 (statement -> func_call SEMICOLON .)
    RBRACKET        reduce using rule 48 (statement -> func_call SEMICOLON .)


state 80

    (55) cycle -> WHILE cycle_start . LPAR expression RPAR check_type block cycle_end

    LPAR            shift and go to state 97


state 81

    (115) main_block -> LBRACKET more_vars more_statement RBRACKET . gen_end_quad
    (116) gen_end_quad -> .

    $end            reduce using rule 116 (gen_end_quad -> .)

    gen_end_quad                   shift and go to state 98

state 82

    (32) arguments -> var_type ID . to_args more_args
    (36) to_args -> .

    COMMA           reduce using rule 36 (to_args -> .)
    RPAR            reduce using rule 36 (to_args -> .)

    to_args                        shift and go to state 99

state 83

    (26) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR . func_block more_func
    (37) func_block -> . LBRACKET more_vars actual_quad_no more_statement gen_endproc_quad RBRACKET

    LBRACKET        shift and go to state 101

    func_block                     shift and go to state 100

state 84

    (66) func_call -> ID is_valid_func LPAR gen_era . push_false_bottom params pop_false_bottom RPAR gen_go_sub
    (108) push_false_bottom -> .

    LPAR            reduce using rule 108 (push_false_bottom -> .)
    ID              reduce using rule 108 (push_false_bottom -> .)
    CTEINT          reduce using rule 108 (push_false_bottom -> .)
    CTEDOUBLE       reduce using rule 108 (push_false_bottom -> .)
    CTEBOOL         reduce using rule 108 (push_false_bottom -> .)
    RPAR            reduce using rule 108 (push_false_bottom -> .)

    push_false_bottom              shift and go to state 102

state 85

    (49) read -> READ LPAR ID . arr_par to_pilaOp RPAR gen_read_quad SEMICOLON
    (76) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (77) arr_par -> .

    LSQRTBRACKET    shift and go to state 77
    RPAR            reduce using rule 77 (arr_par -> .)

    arr_par                        shift and go to state 103

state 86

    (94) factor -> LPAR add_to_pilaOptr . expression RPAR pop_false_bottom
    (78) expression -> . conc gen_conc_quad expression_aux
    (82) conc -> . exp gen_comp_quad conc_aux
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    var_cte                        shift and go to state 71
    conc                           shift and go to state 92
    const                          shift and go to state 38
    factor                         shift and go to state 70
    func_call                      shift and go to state 37
    term                           shift and go to state 72
    exp                            shift and go to state 93
    expression                     shift and go to state 104

state 87

    (90) term -> factor gen_factor_quad . term_aux
    (91) term_aux -> . dm add_to_pilaOptr factor gen_factor_quad term_aux
    (92) term_aux -> .
    (110) dm -> . MULTIPLICATION
    (111) dm -> . DIVISION
    (112) dm -> . MOD

    PLUS            reduce using rule 92 (term_aux -> .)
    MINUS           reduce using rule 92 (term_aux -> .)
    SEMICOLON       reduce using rule 92 (term_aux -> .)
    GREATER         reduce using rule 92 (term_aux -> .)
    LESS            reduce using rule 92 (term_aux -> .)
    GREATEROREQUAL  reduce using rule 92 (term_aux -> .)
    LESSOREQUAL     reduce using rule 92 (term_aux -> .)
    EQUALEQUALS     reduce using rule 92 (term_aux -> .)
    DIFFERENT       reduce using rule 92 (term_aux -> .)
    AND             reduce using rule 92 (term_aux -> .)
    OR              reduce using rule 92 (term_aux -> .)
    RPAR            reduce using rule 92 (term_aux -> .)
    RSQRTBRACKET    reduce using rule 92 (term_aux -> .)
    COMMA           reduce using rule 92 (term_aux -> .)
    MULTIPLICATION  shift and go to state 108
    DIVISION        shift and go to state 105
    MOD             shift and go to state 109

    term_aux                       shift and go to state 107
    dm                             shift and go to state 106

state 88

    (95) factor -> var_cte to_pilaOp .

    MULTIPLICATION  reduce using rule 95 (factor -> var_cte to_pilaOp .)
    DIVISION        reduce using rule 95 (factor -> var_cte to_pilaOp .)
    MOD             reduce using rule 95 (factor -> var_cte to_pilaOp .)
    PLUS            reduce using rule 95 (factor -> var_cte to_pilaOp .)
    MINUS           reduce using rule 95 (factor -> var_cte to_pilaOp .)
    AND             reduce using rule 95 (factor -> var_cte to_pilaOp .)
    OR              reduce using rule 95 (factor -> var_cte to_pilaOp .)
    RPAR            reduce using rule 95 (factor -> var_cte to_pilaOp .)
    SEMICOLON       reduce using rule 95 (factor -> var_cte to_pilaOp .)
    RSQRTBRACKET    reduce using rule 95 (factor -> var_cte to_pilaOp .)
    GREATER         reduce using rule 95 (factor -> var_cte to_pilaOp .)
    LESS            reduce using rule 95 (factor -> var_cte to_pilaOp .)
    GREATEROREQUAL  reduce using rule 95 (factor -> var_cte to_pilaOp .)
    LESSOREQUAL     reduce using rule 95 (factor -> var_cte to_pilaOp .)
    EQUALEQUALS     reduce using rule 95 (factor -> var_cte to_pilaOp .)
    DIFFERENT       reduce using rule 95 (factor -> var_cte to_pilaOp .)
    COMMA           reduce using rule 95 (factor -> var_cte to_pilaOp .)


state 89

    (86) exp -> term gen_term_quad . exp_aux
    (87) exp_aux -> . pl add_to_pilaOptr term gen_term_quad exp_aux
    (88) exp_aux -> .
    (104) pl -> . PLUS
    (105) pl -> . MINUS

    SEMICOLON       reduce using rule 88 (exp_aux -> .)
    GREATER         reduce using rule 88 (exp_aux -> .)
    LESS            reduce using rule 88 (exp_aux -> .)
    GREATEROREQUAL  reduce using rule 88 (exp_aux -> .)
    LESSOREQUAL     reduce using rule 88 (exp_aux -> .)
    EQUALEQUALS     reduce using rule 88 (exp_aux -> .)
    DIFFERENT       reduce using rule 88 (exp_aux -> .)
    AND             reduce using rule 88 (exp_aux -> .)
    OR              reduce using rule 88 (exp_aux -> .)
    RPAR            reduce using rule 88 (exp_aux -> .)
    RSQRTBRACKET    reduce using rule 88 (exp_aux -> .)
    COMMA           reduce using rule 88 (exp_aux -> .)
    PLUS            shift and go to state 111
    MINUS           shift and go to state 110

    pl                             shift and go to state 112
    exp_aux                        shift and go to state 113

state 90

    (53) return_stmt -> RETURN exp gen_return_quad . SEMICOLON

    SEMICOLON       shift and go to state 114


state 91

    (58) condition -> IF LPAR expression . RPAR check_type block else_posible fill_end_condition

    RPAR            shift and go to state 115


state 92

    (78) expression -> conc . gen_conc_quad expression_aux
    (81) gen_conc_quad -> .

    AND             reduce using rule 81 (gen_conc_quad -> .)
    OR              reduce using rule 81 (gen_conc_quad -> .)
    RPAR            reduce using rule 81 (gen_conc_quad -> .)
    SEMICOLON       reduce using rule 81 (gen_conc_quad -> .)

    gen_conc_quad                  shift and go to state 116

state 93

    (82) conc -> exp . gen_comp_quad conc_aux
    (85) gen_comp_quad -> .

    GREATER         reduce using rule 85 (gen_comp_quad -> .)
    LESS            reduce using rule 85 (gen_comp_quad -> .)
    GREATEROREQUAL  reduce using rule 85 (gen_comp_quad -> .)
    LESSOREQUAL     reduce using rule 85 (gen_comp_quad -> .)
    EQUALEQUALS     reduce using rule 85 (gen_comp_quad -> .)
    DIFFERENT       reduce using rule 85 (gen_comp_quad -> .)
    AND             reduce using rule 85 (gen_comp_quad -> .)
    OR              reduce using rule 85 (gen_comp_quad -> .)
    RPAR            reduce using rule 85 (gen_comp_quad -> .)
    SEMICOLON       reduce using rule 85 (gen_comp_quad -> .)

    gen_comp_quad                  shift and go to state 117

state 94

    (51) write -> WRITE LPAR exp . RPAR gen_write_quad SEMICOLON

    RPAR            shift and go to state 118


state 95

    (76) arr_par -> LSQRTBRACKET exp . RSQRTBRACKET arr_par

    RSQRTBRACKET    shift and go to state 119


state 96

    (64) assignation -> ID arr_par to_pilaOp . EQUALS expression gen_assignation_quad SEMICOLON

    EQUALS          shift and go to state 120


state 97

    (55) cycle -> WHILE cycle_start LPAR . expression RPAR check_type block cycle_end
    (78) expression -> . conc gen_conc_quad expression_aux
    (82) conc -> . exp gen_comp_quad conc_aux
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    var_cte                        shift and go to state 71
    const                          shift and go to state 38
    factor                         shift and go to state 70
    func_call                      shift and go to state 37
    term                           shift and go to state 72
    conc                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 121

state 98

    (115) main_block -> LBRACKET more_vars more_statement RBRACKET gen_end_quad .

    $end            reduce using rule 115 (main_block -> LBRACKET more_vars more_statement RBRACKET gen_end_quad .)


state 99

    (32) arguments -> var_type ID to_args . more_args
    (34) more_args -> . COMMA var_type ID to_args more_args
    (35) more_args -> .

    COMMA           shift and go to state 123
    RPAR            reduce using rule 35 (more_args -> .)

    more_args                      shift and go to state 122

state 100

    (26) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block . more_func
    (24) more_func -> . func
    (25) more_func -> .
    (26) func -> . FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func

    MAIN            reduce using rule 25 (more_func -> .)
    FUNC            shift and go to state 13

    func                           shift and go to state 11
    more_func                      shift and go to state 124

state 101

    (37) func_block -> LBRACKET . more_vars actual_quad_no more_statement gen_endproc_quad RBRACKET
    (3) more_vars -> . vars
    (4) more_vars -> .
    (5) vars -> . var_type vars_aux SEMICOLON more_vars
    (6) var_type -> . BOOL
    (7) var_type -> . INT
    (8) var_type -> . DOUBLE

    READ            reduce using rule 4 (more_vars -> .)
    WRITE           reduce using rule 4 (more_vars -> .)
    RETURN          reduce using rule 4 (more_vars -> .)
    WHILE           reduce using rule 4 (more_vars -> .)
    IF              reduce using rule 4 (more_vars -> .)
    ID              reduce using rule 4 (more_vars -> .)
    RBRACKET        reduce using rule 4 (more_vars -> .)
    BOOL            shift and go to state 7
    INT             shift and go to state 5
    DOUBLE          shift and go to state 6

    vars                           shift and go to state 3
    var_type                       shift and go to state 4
    more_vars                      shift and go to state 125

state 102

    (66) func_call -> ID is_valid_func LPAR gen_era push_false_bottom . params pop_false_bottom RPAR gen_go_sub
    (67) params -> . exp check_args more_params
    (68) params -> .
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    RPAR            reduce using rule 68 (params -> .)
    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    var_cte                        shift and go to state 71
    const                          shift and go to state 38
    params                         shift and go to state 126
    factor                         shift and go to state 70
    func_call                      shift and go to state 37
    term                           shift and go to state 72
    exp                            shift and go to state 127

state 103

    (49) read -> READ LPAR ID arr_par . to_pilaOp RPAR gen_read_quad SEMICOLON
    (106) to_pilaOp -> .

    RPAR            reduce using rule 106 (to_pilaOp -> .)

    to_pilaOp                      shift and go to state 128

state 104

    (94) factor -> LPAR add_to_pilaOptr expression . RPAR pop_false_bottom

    RPAR            shift and go to state 129


state 105

    (111) dm -> DIVISION .

    LPAR            reduce using rule 111 (dm -> DIVISION .)
    ID              reduce using rule 111 (dm -> DIVISION .)
    CTEINT          reduce using rule 111 (dm -> DIVISION .)
    CTEDOUBLE       reduce using rule 111 (dm -> DIVISION .)
    CTEBOOL         reduce using rule 111 (dm -> DIVISION .)


state 106

    (91) term_aux -> dm . add_to_pilaOptr factor gen_factor_quad term_aux
    (107) add_to_pilaOptr -> .

    LPAR            reduce using rule 107 (add_to_pilaOptr -> .)
    ID              reduce using rule 107 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 107 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 107 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 107 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 130

state 107

    (90) term -> factor gen_factor_quad term_aux .

    PLUS            reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    MINUS           reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    COMMA           reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    RPAR            reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    SEMICOLON       reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    GREATER         reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    LESS            reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    GREATEROREQUAL  reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    LESSOREQUAL     reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    EQUALEQUALS     reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    DIFFERENT       reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    AND             reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    OR              reduce using rule 90 (term -> factor gen_factor_quad term_aux .)
    RSQRTBRACKET    reduce using rule 90 (term -> factor gen_factor_quad term_aux .)


state 108

    (110) dm -> MULTIPLICATION .

    LPAR            reduce using rule 110 (dm -> MULTIPLICATION .)
    ID              reduce using rule 110 (dm -> MULTIPLICATION .)
    CTEINT          reduce using rule 110 (dm -> MULTIPLICATION .)
    CTEDOUBLE       reduce using rule 110 (dm -> MULTIPLICATION .)
    CTEBOOL         reduce using rule 110 (dm -> MULTIPLICATION .)


state 109

    (112) dm -> MOD .

    LPAR            reduce using rule 112 (dm -> MOD .)
    ID              reduce using rule 112 (dm -> MOD .)
    CTEINT          reduce using rule 112 (dm -> MOD .)
    CTEDOUBLE       reduce using rule 112 (dm -> MOD .)
    CTEBOOL         reduce using rule 112 (dm -> MOD .)


state 110

    (105) pl -> MINUS .

    LPAR            reduce using rule 105 (pl -> MINUS .)
    ID              reduce using rule 105 (pl -> MINUS .)
    CTEINT          reduce using rule 105 (pl -> MINUS .)
    CTEDOUBLE       reduce using rule 105 (pl -> MINUS .)
    CTEBOOL         reduce using rule 105 (pl -> MINUS .)


state 111

    (104) pl -> PLUS .

    LPAR            reduce using rule 104 (pl -> PLUS .)
    ID              reduce using rule 104 (pl -> PLUS .)
    CTEINT          reduce using rule 104 (pl -> PLUS .)
    CTEDOUBLE       reduce using rule 104 (pl -> PLUS .)
    CTEBOOL         reduce using rule 104 (pl -> PLUS .)


state 112

    (87) exp_aux -> pl . add_to_pilaOptr term gen_term_quad exp_aux
    (107) add_to_pilaOptr -> .

    LPAR            reduce using rule 107 (add_to_pilaOptr -> .)
    ID              reduce using rule 107 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 107 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 107 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 107 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 131

state 113

    (86) exp -> term gen_term_quad exp_aux .

    SEMICOLON       reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    AND             reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    OR              reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    RPAR            reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    RSQRTBRACKET    reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    GREATER         reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    LESS            reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    GREATEROREQUAL  reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    LESSOREQUAL     reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    EQUALEQUALS     reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    DIFFERENT       reduce using rule 86 (exp -> term gen_term_quad exp_aux .)
    COMMA           reduce using rule 86 (exp -> term gen_term_quad exp_aux .)


state 114

    (53) return_stmt -> RETURN exp gen_return_quad SEMICOLON .

    READ            reduce using rule 53 (return_stmt -> RETURN exp gen_return_quad SEMICOLON .)
    WRITE           reduce using rule 53 (return_stmt -> RETURN exp gen_return_quad SEMICOLON .)
    RETURN          reduce using rule 53 (return_stmt -> RETURN exp gen_return_quad SEMICOLON .)
    WHILE           reduce using rule 53 (return_stmt -> RETURN exp gen_return_quad SEMICOLON .)
    IF              reduce using rule 53 (return_stmt -> RETURN exp gen_return_quad SEMICOLON .)
    ID              reduce using rule 53 (return_stmt -> RETURN exp gen_return_quad SEMICOLON .)
    RBRACKET        reduce using rule 53 (return_stmt -> RETURN exp gen_return_quad SEMICOLON .)


state 115

    (58) condition -> IF LPAR expression RPAR . check_type block else_posible fill_end_condition
    (63) check_type -> .

    LBRACKET        reduce using rule 63 (check_type -> .)

    check_type                     shift and go to state 132

state 116

    (78) expression -> conc gen_conc_quad . expression_aux
    (79) expression_aux -> . ao add_to_pilaOptr conc gen_conc_quad expression_aux
    (80) expression_aux -> .
    (96) ao -> . AND
    (97) ao -> . OR

    RPAR            reduce using rule 80 (expression_aux -> .)
    SEMICOLON       reduce using rule 80 (expression_aux -> .)
    AND             shift and go to state 133
    OR              shift and go to state 135

    expression_aux                 shift and go to state 136
    ao                             shift and go to state 134

state 117

    (82) conc -> exp gen_comp_quad . conc_aux
    (83) conc_aux -> . comp add_to_pilaOptr exp gen_comp_quad
    (84) conc_aux -> .
    (98) comp -> . GREATER
    (99) comp -> . LESS
    (100) comp -> . GREATEROREQUAL
    (101) comp -> . LESSOREQUAL
    (102) comp -> . EQUALEQUALS
    (103) comp -> . DIFFERENT

    AND             reduce using rule 84 (conc_aux -> .)
    OR              reduce using rule 84 (conc_aux -> .)
    RPAR            reduce using rule 84 (conc_aux -> .)
    SEMICOLON       reduce using rule 84 (conc_aux -> .)
    GREATER         shift and go to state 139
    LESS            shift and go to state 140
    GREATEROREQUAL  shift and go to state 143
    LESSOREQUAL     shift and go to state 138
    EQUALEQUALS     shift and go to state 141
    DIFFERENT       shift and go to state 137

    conc_aux                       shift and go to state 144
    comp                           shift and go to state 142

state 118

    (51) write -> WRITE LPAR exp RPAR . gen_write_quad SEMICOLON
    (52) gen_write_quad -> .

    SEMICOLON       reduce using rule 52 (gen_write_quad -> .)

    gen_write_quad                 shift and go to state 145

state 119

    (76) arr_par -> LSQRTBRACKET exp RSQRTBRACKET . arr_par
    (76) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (77) arr_par -> .

    LSQRTBRACKET    shift and go to state 77
    EQUALS          reduce using rule 77 (arr_par -> .)
    RPAR            reduce using rule 77 (arr_par -> .)

    arr_par                        shift and go to state 146

state 120

    (64) assignation -> ID arr_par to_pilaOp EQUALS . expression gen_assignation_quad SEMICOLON
    (78) expression -> . conc gen_conc_quad expression_aux
    (82) conc -> . exp gen_comp_quad conc_aux
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    var_cte                        shift and go to state 71
    const                          shift and go to state 38
    factor                         shift and go to state 70
    func_call                      shift and go to state 37
    term                           shift and go to state 72
    conc                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 147

state 121

    (55) cycle -> WHILE cycle_start LPAR expression . RPAR check_type block cycle_end

    RPAR            shift and go to state 148


state 122

    (32) arguments -> var_type ID to_args more_args .

    RPAR            reduce using rule 32 (arguments -> var_type ID to_args more_args .)


state 123

    (34) more_args -> COMMA . var_type ID to_args more_args
    (6) var_type -> . BOOL
    (7) var_type -> . INT
    (8) var_type -> . DOUBLE

    BOOL            shift and go to state 7
    INT             shift and go to state 5
    DOUBLE          shift and go to state 6

    var_type                       shift and go to state 149

state 124

    (26) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func .

    MAIN            reduce using rule 26 (func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func .)


state 125

    (37) func_block -> LBRACKET more_vars . actual_quad_no more_statement gen_endproc_quad RBRACKET
    (38) actual_quad_no -> .

    READ            reduce using rule 38 (actual_quad_no -> .)
    WRITE           reduce using rule 38 (actual_quad_no -> .)
    RETURN          reduce using rule 38 (actual_quad_no -> .)
    WHILE           reduce using rule 38 (actual_quad_no -> .)
    IF              reduce using rule 38 (actual_quad_no -> .)
    ID              reduce using rule 38 (actual_quad_no -> .)
    RBRACKET        reduce using rule 38 (actual_quad_no -> .)

    actual_quad_no                 shift and go to state 150

state 126

    (66) func_call -> ID is_valid_func LPAR gen_era push_false_bottom params . pop_false_bottom RPAR gen_go_sub
    (109) pop_false_bottom -> .

    RPAR            reduce using rule 109 (pop_false_bottom -> .)

    pop_false_bottom               shift and go to state 151

state 127

    (67) params -> exp . check_args more_params
    (71) check_args -> .

    COMMA           reduce using rule 71 (check_args -> .)
    RPAR            reduce using rule 71 (check_args -> .)

    check_args                     shift and go to state 152

state 128

    (49) read -> READ LPAR ID arr_par to_pilaOp . RPAR gen_read_quad SEMICOLON

    RPAR            shift and go to state 153


state 129

    (94) factor -> LPAR add_to_pilaOptr expression RPAR . pop_false_bottom
    (109) pop_false_bottom -> .

    MULTIPLICATION  reduce using rule 109 (pop_false_bottom -> .)
    DIVISION        reduce using rule 109 (pop_false_bottom -> .)
    MOD             reduce using rule 109 (pop_false_bottom -> .)
    PLUS            reduce using rule 109 (pop_false_bottom -> .)
    MINUS           reduce using rule 109 (pop_false_bottom -> .)
    SEMICOLON       reduce using rule 109 (pop_false_bottom -> .)
    GREATER         reduce using rule 109 (pop_false_bottom -> .)
    LESS            reduce using rule 109 (pop_false_bottom -> .)
    GREATEROREQUAL  reduce using rule 109 (pop_false_bottom -> .)
    LESSOREQUAL     reduce using rule 109 (pop_false_bottom -> .)
    EQUALEQUALS     reduce using rule 109 (pop_false_bottom -> .)
    DIFFERENT       reduce using rule 109 (pop_false_bottom -> .)
    AND             reduce using rule 109 (pop_false_bottom -> .)
    OR              reduce using rule 109 (pop_false_bottom -> .)
    RPAR            reduce using rule 109 (pop_false_bottom -> .)
    RSQRTBRACKET    reduce using rule 109 (pop_false_bottom -> .)
    COMMA           reduce using rule 109 (pop_false_bottom -> .)

    pop_false_bottom               shift and go to state 154

state 130

    (91) term_aux -> dm add_to_pilaOptr . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    func_call                      shift and go to state 37
    const                          shift and go to state 38
    factor                         shift and go to state 155
    var_cte                        shift and go to state 71

state 131

    (87) exp_aux -> pl add_to_pilaOptr . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    func_call                      shift and go to state 37
    term                           shift and go to state 156
    const                          shift and go to state 38
    factor                         shift and go to state 70
    var_cte                        shift and go to state 71

state 132

    (58) condition -> IF LPAR expression RPAR check_type . block else_posible fill_end_condition
    (75) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 157

    block                          shift and go to state 158

state 133

    (96) ao -> AND .

    LPAR            reduce using rule 96 (ao -> AND .)
    ID              reduce using rule 96 (ao -> AND .)
    CTEINT          reduce using rule 96 (ao -> AND .)
    CTEDOUBLE       reduce using rule 96 (ao -> AND .)
    CTEBOOL         reduce using rule 96 (ao -> AND .)


state 134

    (79) expression_aux -> ao . add_to_pilaOptr conc gen_conc_quad expression_aux
    (107) add_to_pilaOptr -> .

    LPAR            reduce using rule 107 (add_to_pilaOptr -> .)
    ID              reduce using rule 107 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 107 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 107 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 107 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 159

state 135

    (97) ao -> OR .

    LPAR            reduce using rule 97 (ao -> OR .)
    ID              reduce using rule 97 (ao -> OR .)
    CTEINT          reduce using rule 97 (ao -> OR .)
    CTEDOUBLE       reduce using rule 97 (ao -> OR .)
    CTEBOOL         reduce using rule 97 (ao -> OR .)


state 136

    (78) expression -> conc gen_conc_quad expression_aux .

    RPAR            reduce using rule 78 (expression -> conc gen_conc_quad expression_aux .)
    SEMICOLON       reduce using rule 78 (expression -> conc gen_conc_quad expression_aux .)


state 137

    (103) comp -> DIFFERENT .

    LPAR            reduce using rule 103 (comp -> DIFFERENT .)
    ID              reduce using rule 103 (comp -> DIFFERENT .)
    CTEINT          reduce using rule 103 (comp -> DIFFERENT .)
    CTEDOUBLE       reduce using rule 103 (comp -> DIFFERENT .)
    CTEBOOL         reduce using rule 103 (comp -> DIFFERENT .)


state 138

    (101) comp -> LESSOREQUAL .

    LPAR            reduce using rule 101 (comp -> LESSOREQUAL .)
    ID              reduce using rule 101 (comp -> LESSOREQUAL .)
    CTEINT          reduce using rule 101 (comp -> LESSOREQUAL .)
    CTEDOUBLE       reduce using rule 101 (comp -> LESSOREQUAL .)
    CTEBOOL         reduce using rule 101 (comp -> LESSOREQUAL .)


state 139

    (98) comp -> GREATER .

    LPAR            reduce using rule 98 (comp -> GREATER .)
    ID              reduce using rule 98 (comp -> GREATER .)
    CTEINT          reduce using rule 98 (comp -> GREATER .)
    CTEDOUBLE       reduce using rule 98 (comp -> GREATER .)
    CTEBOOL         reduce using rule 98 (comp -> GREATER .)


state 140

    (99) comp -> LESS .

    LPAR            reduce using rule 99 (comp -> LESS .)
    ID              reduce using rule 99 (comp -> LESS .)
    CTEINT          reduce using rule 99 (comp -> LESS .)
    CTEDOUBLE       reduce using rule 99 (comp -> LESS .)
    CTEBOOL         reduce using rule 99 (comp -> LESS .)


state 141

    (102) comp -> EQUALEQUALS .

    LPAR            reduce using rule 102 (comp -> EQUALEQUALS .)
    ID              reduce using rule 102 (comp -> EQUALEQUALS .)
    CTEINT          reduce using rule 102 (comp -> EQUALEQUALS .)
    CTEDOUBLE       reduce using rule 102 (comp -> EQUALEQUALS .)
    CTEBOOL         reduce using rule 102 (comp -> EQUALEQUALS .)


state 142

    (83) conc_aux -> comp . add_to_pilaOptr exp gen_comp_quad
    (107) add_to_pilaOptr -> .

    LPAR            reduce using rule 107 (add_to_pilaOptr -> .)
    ID              reduce using rule 107 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 107 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 107 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 107 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 160

state 143

    (100) comp -> GREATEROREQUAL .

    LPAR            reduce using rule 100 (comp -> GREATEROREQUAL .)
    ID              reduce using rule 100 (comp -> GREATEROREQUAL .)
    CTEINT          reduce using rule 100 (comp -> GREATEROREQUAL .)
    CTEDOUBLE       reduce using rule 100 (comp -> GREATEROREQUAL .)
    CTEBOOL         reduce using rule 100 (comp -> GREATEROREQUAL .)


state 144

    (82) conc -> exp gen_comp_quad conc_aux .

    AND             reduce using rule 82 (conc -> exp gen_comp_quad conc_aux .)
    OR              reduce using rule 82 (conc -> exp gen_comp_quad conc_aux .)
    SEMICOLON       reduce using rule 82 (conc -> exp gen_comp_quad conc_aux .)
    RPAR            reduce using rule 82 (conc -> exp gen_comp_quad conc_aux .)


state 145

    (51) write -> WRITE LPAR exp RPAR gen_write_quad . SEMICOLON

    SEMICOLON       shift and go to state 161


state 146

    (76) arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .

    EQUALS          reduce using rule 76 (arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .)
    RPAR            reduce using rule 76 (arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .)


state 147

    (64) assignation -> ID arr_par to_pilaOp EQUALS expression . gen_assignation_quad SEMICOLON
    (65) gen_assignation_quad -> .

    SEMICOLON       reduce using rule 65 (gen_assignation_quad -> .)

    gen_assignation_quad           shift and go to state 162

state 148

    (55) cycle -> WHILE cycle_start LPAR expression RPAR . check_type block cycle_end
    (63) check_type -> .

    LBRACKET        reduce using rule 63 (check_type -> .)

    check_type                     shift and go to state 163

state 149

    (34) more_args -> COMMA var_type . ID to_args more_args

    ID              shift and go to state 164


state 150

    (37) func_block -> LBRACKET more_vars actual_quad_no . more_statement gen_endproc_quad RBRACKET
    (40) more_statement -> . statement more_statement
    (41) more_statement -> .
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . return_stmt
    (45) statement -> . cycle
    (46) statement -> . condition
    (47) statement -> . assignation
    (48) statement -> . func_call SEMICOLON
    (49) read -> . READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON
    (51) write -> . WRITE LPAR exp RPAR gen_write_quad SEMICOLON
    (53) return_stmt -> . RETURN exp gen_return_quad SEMICOLON
    (55) cycle -> . WHILE cycle_start LPAR expression RPAR check_type block cycle_end
    (58) condition -> . IF LPAR expression RPAR check_type block else_posible fill_end_condition
    (64) assignation -> . ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    RBRACKET        reduce using rule 41 (more_statement -> .)
    READ            shift and go to state 50
    WRITE           shift and go to state 57
    RETURN          shift and go to state 52
    WHILE           shift and go to state 63
    IF              shift and go to state 55
    ID              shift and go to state 58

    return_stmt                    shift and go to state 51
    write                          shift and go to state 53
    statement                      shift and go to state 54
    read                           shift and go to state 56
    condition                      shift and go to state 59
    cycle                          shift and go to state 60
    func_call                      shift and go to state 61
    assignation                    shift and go to state 62
    more_statement                 shift and go to state 165

state 151

    (66) func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom . RPAR gen_go_sub

    RPAR            shift and go to state 166


state 152

    (67) params -> exp check_args . more_params
    (69) more_params -> . COMMA exp check_args more_params
    (70) more_params -> .

    COMMA           shift and go to state 168
    RPAR            reduce using rule 70 (more_params -> .)

    more_params                    shift and go to state 167

state 153

    (49) read -> READ LPAR ID arr_par to_pilaOp RPAR . gen_read_quad SEMICOLON
    (50) gen_read_quad -> .

    SEMICOLON       reduce using rule 50 (gen_read_quad -> .)

    gen_read_quad                  shift and go to state 169

state 154

    (94) factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .

    MULTIPLICATION  reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    DIVISION        reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    MOD             reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    PLUS            reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    MINUS           reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    AND             reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    OR              reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    RPAR            reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    SEMICOLON       reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    RSQRTBRACKET    reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    GREATER         reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    LESS            reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    GREATEROREQUAL  reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    LESSOREQUAL     reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    EQUALEQUALS     reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    DIFFERENT       reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)
    COMMA           reduce using rule 94 (factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom .)


state 155

    (91) term_aux -> dm add_to_pilaOptr factor . gen_factor_quad term_aux
    (93) gen_factor_quad -> .

    MULTIPLICATION  reduce using rule 93 (gen_factor_quad -> .)
    DIVISION        reduce using rule 93 (gen_factor_quad -> .)
    MOD             reduce using rule 93 (gen_factor_quad -> .)
    PLUS            reduce using rule 93 (gen_factor_quad -> .)
    MINUS           reduce using rule 93 (gen_factor_quad -> .)
    SEMICOLON       reduce using rule 93 (gen_factor_quad -> .)
    GREATER         reduce using rule 93 (gen_factor_quad -> .)
    LESS            reduce using rule 93 (gen_factor_quad -> .)
    GREATEROREQUAL  reduce using rule 93 (gen_factor_quad -> .)
    LESSOREQUAL     reduce using rule 93 (gen_factor_quad -> .)
    EQUALEQUALS     reduce using rule 93 (gen_factor_quad -> .)
    DIFFERENT       reduce using rule 93 (gen_factor_quad -> .)
    AND             reduce using rule 93 (gen_factor_quad -> .)
    OR              reduce using rule 93 (gen_factor_quad -> .)
    RPAR            reduce using rule 93 (gen_factor_quad -> .)
    RSQRTBRACKET    reduce using rule 93 (gen_factor_quad -> .)
    COMMA           reduce using rule 93 (gen_factor_quad -> .)

    gen_factor_quad                shift and go to state 170

state 156

    (87) exp_aux -> pl add_to_pilaOptr term . gen_term_quad exp_aux
    (89) gen_term_quad -> .

    PLUS            reduce using rule 89 (gen_term_quad -> .)
    MINUS           reduce using rule 89 (gen_term_quad -> .)
    SEMICOLON       reduce using rule 89 (gen_term_quad -> .)
    GREATER         reduce using rule 89 (gen_term_quad -> .)
    LESS            reduce using rule 89 (gen_term_quad -> .)
    GREATEROREQUAL  reduce using rule 89 (gen_term_quad -> .)
    LESSOREQUAL     reduce using rule 89 (gen_term_quad -> .)
    EQUALEQUALS     reduce using rule 89 (gen_term_quad -> .)
    DIFFERENT       reduce using rule 89 (gen_term_quad -> .)
    AND             reduce using rule 89 (gen_term_quad -> .)
    OR              reduce using rule 89 (gen_term_quad -> .)
    RPAR            reduce using rule 89 (gen_term_quad -> .)
    RSQRTBRACKET    reduce using rule 89 (gen_term_quad -> .)
    COMMA           reduce using rule 89 (gen_term_quad -> .)

    gen_term_quad                  shift and go to state 171

state 157

    (75) block -> LBRACKET . more_statement RBRACKET
    (40) more_statement -> . statement more_statement
    (41) more_statement -> .
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . return_stmt
    (45) statement -> . cycle
    (46) statement -> . condition
    (47) statement -> . assignation
    (48) statement -> . func_call SEMICOLON
    (49) read -> . READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON
    (51) write -> . WRITE LPAR exp RPAR gen_write_quad SEMICOLON
    (53) return_stmt -> . RETURN exp gen_return_quad SEMICOLON
    (55) cycle -> . WHILE cycle_start LPAR expression RPAR check_type block cycle_end
    (58) condition -> . IF LPAR expression RPAR check_type block else_posible fill_end_condition
    (64) assignation -> . ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    RBRACKET        reduce using rule 41 (more_statement -> .)
    READ            shift and go to state 50
    WRITE           shift and go to state 57
    RETURN          shift and go to state 52
    WHILE           shift and go to state 63
    IF              shift and go to state 55
    ID              shift and go to state 58

    return_stmt                    shift and go to state 51
    write                          shift and go to state 53
    statement                      shift and go to state 54
    read                           shift and go to state 56
    condition                      shift and go to state 59
    cycle                          shift and go to state 60
    func_call                      shift and go to state 61
    assignation                    shift and go to state 62
    more_statement                 shift and go to state 172

state 158

    (58) condition -> IF LPAR expression RPAR check_type block . else_posible fill_end_condition
    (59) else_posible -> . ELSE gen_goto block
    (60) else_posible -> .

    ELSE            shift and go to state 174
    READ            reduce using rule 60 (else_posible -> .)
    WRITE           reduce using rule 60 (else_posible -> .)
    RETURN          reduce using rule 60 (else_posible -> .)
    WHILE           reduce using rule 60 (else_posible -> .)
    IF              reduce using rule 60 (else_posible -> .)
    ID              reduce using rule 60 (else_posible -> .)
    RBRACKET        reduce using rule 60 (else_posible -> .)

    else_posible                   shift and go to state 173

state 159

    (79) expression_aux -> ao add_to_pilaOptr . conc gen_conc_quad expression_aux
    (82) conc -> . exp gen_comp_quad conc_aux
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    var_cte                        shift and go to state 71
    conc                           shift and go to state 175
    const                          shift and go to state 38
    factor                         shift and go to state 70
    func_call                      shift and go to state 37
    term                           shift and go to state 72
    exp                            shift and go to state 93

state 160

    (83) conc_aux -> comp add_to_pilaOptr . exp gen_comp_quad
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    var_cte                        shift and go to state 71
    const                          shift and go to state 38
    factor                         shift and go to state 70
    func_call                      shift and go to state 37
    term                           shift and go to state 72
    exp                            shift and go to state 176

state 161

    (51) write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .

    READ            reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    WRITE           reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    RETURN          reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    WHILE           reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    IF              reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    ID              reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)
    RBRACKET        reduce using rule 51 (write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON .)


state 162

    (64) assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad . SEMICOLON

    SEMICOLON       shift and go to state 177


state 163

    (55) cycle -> WHILE cycle_start LPAR expression RPAR check_type . block cycle_end
    (75) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 157

    block                          shift and go to state 178

state 164

    (34) more_args -> COMMA var_type ID . to_args more_args
    (36) to_args -> .

    COMMA           reduce using rule 36 (to_args -> .)
    RPAR            reduce using rule 36 (to_args -> .)

    to_args                        shift and go to state 179

state 165

    (37) func_block -> LBRACKET more_vars actual_quad_no more_statement . gen_endproc_quad RBRACKET
    (39) gen_endproc_quad -> .

    RBRACKET        reduce using rule 39 (gen_endproc_quad -> .)

    gen_endproc_quad               shift and go to state 180

state 166

    (66) func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR . gen_go_sub
    (74) gen_go_sub -> .

    COMMA           reduce using rule 74 (gen_go_sub -> .)
    SEMICOLON       reduce using rule 74 (gen_go_sub -> .)
    MULTIPLICATION  reduce using rule 74 (gen_go_sub -> .)
    DIVISION        reduce using rule 74 (gen_go_sub -> .)
    MOD             reduce using rule 74 (gen_go_sub -> .)
    PLUS            reduce using rule 74 (gen_go_sub -> .)
    MINUS           reduce using rule 74 (gen_go_sub -> .)
    GREATER         reduce using rule 74 (gen_go_sub -> .)
    LESS            reduce using rule 74 (gen_go_sub -> .)
    GREATEROREQUAL  reduce using rule 74 (gen_go_sub -> .)
    LESSOREQUAL     reduce using rule 74 (gen_go_sub -> .)
    EQUALEQUALS     reduce using rule 74 (gen_go_sub -> .)
    DIFFERENT       reduce using rule 74 (gen_go_sub -> .)
    AND             reduce using rule 74 (gen_go_sub -> .)
    OR              reduce using rule 74 (gen_go_sub -> .)
    RPAR            reduce using rule 74 (gen_go_sub -> .)
    RSQRTBRACKET    reduce using rule 74 (gen_go_sub -> .)

    gen_go_sub                     shift and go to state 181

state 167

    (67) params -> exp check_args more_params .

    RPAR            reduce using rule 67 (params -> exp check_args more_params .)


state 168

    (69) more_params -> COMMA . exp check_args more_params
    (86) exp -> . term gen_term_quad exp_aux
    (90) term -> . factor gen_factor_quad term_aux
    (94) factor -> . LPAR add_to_pilaOptr expression RPAR pop_false_bottom
    (95) factor -> . var_cte to_pilaOp
    (18) var_cte -> . const
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL
    (66) func_call -> . ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub

    LPAR            shift and go to state 69
    ID              shift and go to state 40
    CTEINT          shift and go to state 33
    CTEDOUBLE       shift and go to state 30
    CTEBOOL         shift and go to state 32

    var_cte                        shift and go to state 71
    const                          shift and go to state 38
    factor                         shift and go to state 70
    func_call                      shift and go to state 37
    term                           shift and go to state 72
    exp                            shift and go to state 182

state 169

    (49) read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad . SEMICOLON

    SEMICOLON       shift and go to state 183


state 170

    (91) term_aux -> dm add_to_pilaOptr factor gen_factor_quad . term_aux
    (91) term_aux -> . dm add_to_pilaOptr factor gen_factor_quad term_aux
    (92) term_aux -> .
    (110) dm -> . MULTIPLICATION
    (111) dm -> . DIVISION
    (112) dm -> . MOD

    PLUS            reduce using rule 92 (term_aux -> .)
    MINUS           reduce using rule 92 (term_aux -> .)
    SEMICOLON       reduce using rule 92 (term_aux -> .)
    GREATER         reduce using rule 92 (term_aux -> .)
    LESS            reduce using rule 92 (term_aux -> .)
    GREATEROREQUAL  reduce using rule 92 (term_aux -> .)
    LESSOREQUAL     reduce using rule 92 (term_aux -> .)
    EQUALEQUALS     reduce using rule 92 (term_aux -> .)
    DIFFERENT       reduce using rule 92 (term_aux -> .)
    AND             reduce using rule 92 (term_aux -> .)
    OR              reduce using rule 92 (term_aux -> .)
    RPAR            reduce using rule 92 (term_aux -> .)
    RSQRTBRACKET    reduce using rule 92 (term_aux -> .)
    COMMA           reduce using rule 92 (term_aux -> .)
    MULTIPLICATION  shift and go to state 108
    DIVISION        shift and go to state 105
    MOD             shift and go to state 109

    term_aux                       shift and go to state 184
    dm                             shift and go to state 106

state 171

    (87) exp_aux -> pl add_to_pilaOptr term gen_term_quad . exp_aux
    (87) exp_aux -> . pl add_to_pilaOptr term gen_term_quad exp_aux
    (88) exp_aux -> .
    (104) pl -> . PLUS
    (105) pl -> . MINUS

    SEMICOLON       reduce using rule 88 (exp_aux -> .)
    GREATER         reduce using rule 88 (exp_aux -> .)
    LESS            reduce using rule 88 (exp_aux -> .)
    GREATEROREQUAL  reduce using rule 88 (exp_aux -> .)
    LESSOREQUAL     reduce using rule 88 (exp_aux -> .)
    EQUALEQUALS     reduce using rule 88 (exp_aux -> .)
    DIFFERENT       reduce using rule 88 (exp_aux -> .)
    AND             reduce using rule 88 (exp_aux -> .)
    OR              reduce using rule 88 (exp_aux -> .)
    RPAR            reduce using rule 88 (exp_aux -> .)
    RSQRTBRACKET    reduce using rule 88 (exp_aux -> .)
    COMMA           reduce using rule 88 (exp_aux -> .)
    PLUS            shift and go to state 111
    MINUS           shift and go to state 110

    pl                             shift and go to state 112
    exp_aux                        shift and go to state 185

state 172

    (75) block -> LBRACKET more_statement . RBRACKET

    RBRACKET        shift and go to state 186


state 173

    (58) condition -> IF LPAR expression RPAR check_type block else_posible . fill_end_condition
    (62) fill_end_condition -> .

    READ            reduce using rule 62 (fill_end_condition -> .)
    WRITE           reduce using rule 62 (fill_end_condition -> .)
    RETURN          reduce using rule 62 (fill_end_condition -> .)
    WHILE           reduce using rule 62 (fill_end_condition -> .)
    IF              reduce using rule 62 (fill_end_condition -> .)
    ID              reduce using rule 62 (fill_end_condition -> .)
    RBRACKET        reduce using rule 62 (fill_end_condition -> .)

    fill_end_condition             shift and go to state 187

state 174

    (59) else_posible -> ELSE . gen_goto block
    (61) gen_goto -> .

    LBRACKET        reduce using rule 61 (gen_goto -> .)

    gen_goto                       shift and go to state 188

state 175

    (79) expression_aux -> ao add_to_pilaOptr conc . gen_conc_quad expression_aux
    (81) gen_conc_quad -> .

    AND             reduce using rule 81 (gen_conc_quad -> .)
    OR              reduce using rule 81 (gen_conc_quad -> .)
    RPAR            reduce using rule 81 (gen_conc_quad -> .)
    SEMICOLON       reduce using rule 81 (gen_conc_quad -> .)

    gen_conc_quad                  shift and go to state 189

state 176

    (83) conc_aux -> comp add_to_pilaOptr exp . gen_comp_quad
    (85) gen_comp_quad -> .

    AND             reduce using rule 85 (gen_comp_quad -> .)
    OR              reduce using rule 85 (gen_comp_quad -> .)
    RPAR            reduce using rule 85 (gen_comp_quad -> .)
    SEMICOLON       reduce using rule 85 (gen_comp_quad -> .)

    gen_comp_quad                  shift and go to state 190

state 177

    (64) assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON .

    READ            reduce using rule 64 (assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON .)
    WRITE           reduce using rule 64 (assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON .)
    RETURN          reduce using rule 64 (assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON .)
    WHILE           reduce using rule 64 (assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON .)
    IF              reduce using rule 64 (assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON .)
    ID              reduce using rule 64 (assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON .)
    RBRACKET        reduce using rule 64 (assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON .)


state 178

    (55) cycle -> WHILE cycle_start LPAR expression RPAR check_type block . cycle_end
    (57) cycle_end -> .

    READ            reduce using rule 57 (cycle_end -> .)
    WRITE           reduce using rule 57 (cycle_end -> .)
    RETURN          reduce using rule 57 (cycle_end -> .)
    WHILE           reduce using rule 57 (cycle_end -> .)
    IF              reduce using rule 57 (cycle_end -> .)
    ID              reduce using rule 57 (cycle_end -> .)
    RBRACKET        reduce using rule 57 (cycle_end -> .)

    cycle_end                      shift and go to state 191

state 179

    (34) more_args -> COMMA var_type ID to_args . more_args
    (34) more_args -> . COMMA var_type ID to_args more_args
    (35) more_args -> .

    COMMA           shift and go to state 123
    RPAR            reduce using rule 35 (more_args -> .)

    more_args                      shift and go to state 192

state 180

    (37) func_block -> LBRACKET more_vars actual_quad_no more_statement gen_endproc_quad . RBRACKET

    RBRACKET        shift and go to state 193


state 181

    (66) func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .

    MULTIPLICATION  reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    DIVISION        reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    MOD             reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    PLUS            reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    MINUS           reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    SEMICOLON       reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    GREATER         reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    LESS            reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    GREATEROREQUAL  reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    LESSOREQUAL     reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    EQUALEQUALS     reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    DIFFERENT       reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    AND             reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    OR              reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    RPAR            reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    RSQRTBRACKET    reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)
    COMMA           reduce using rule 66 (func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub .)


state 182

    (69) more_params -> COMMA exp . check_args more_params
    (71) check_args -> .

    COMMA           reduce using rule 71 (check_args -> .)
    RPAR            reduce using rule 71 (check_args -> .)

    check_args                     shift and go to state 194

state 183

    (49) read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON .

    READ            reduce using rule 49 (read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON .)
    WRITE           reduce using rule 49 (read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON .)
    RETURN          reduce using rule 49 (read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON .)
    WHILE           reduce using rule 49 (read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON .)
    IF              reduce using rule 49 (read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON .)
    ID              reduce using rule 49 (read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON .)
    RBRACKET        reduce using rule 49 (read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON .)


state 184

    (91) term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .

    PLUS            reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    MINUS           reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    SEMICOLON       reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    GREATER         reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    LESS            reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    GREATEROREQUAL  reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    LESSOREQUAL     reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    EQUALEQUALS     reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    DIFFERENT       reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    AND             reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    OR              reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    RPAR            reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    RSQRTBRACKET    reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)
    COMMA           reduce using rule 91 (term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux .)


state 185

    (87) exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .

    SEMICOLON       reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    GREATER         reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    LESS            reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    GREATEROREQUAL  reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    LESSOREQUAL     reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    EQUALEQUALS     reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    DIFFERENT       reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    AND             reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    OR              reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    RPAR            reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    RSQRTBRACKET    reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)
    COMMA           reduce using rule 87 (exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux .)


state 186

    (75) block -> LBRACKET more_statement RBRACKET .

    ELSE            reduce using rule 75 (block -> LBRACKET more_statement RBRACKET .)
    READ            reduce using rule 75 (block -> LBRACKET more_statement RBRACKET .)
    WRITE           reduce using rule 75 (block -> LBRACKET more_statement RBRACKET .)
    RETURN          reduce using rule 75 (block -> LBRACKET more_statement RBRACKET .)
    WHILE           reduce using rule 75 (block -> LBRACKET more_statement RBRACKET .)
    IF              reduce using rule 75 (block -> LBRACKET more_statement RBRACKET .)
    ID              reduce using rule 75 (block -> LBRACKET more_statement RBRACKET .)
    RBRACKET        reduce using rule 75 (block -> LBRACKET more_statement RBRACKET .)


state 187

    (58) condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .

    READ            reduce using rule 58 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    WRITE           reduce using rule 58 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    RETURN          reduce using rule 58 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    WHILE           reduce using rule 58 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    IF              reduce using rule 58 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    ID              reduce using rule 58 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)
    RBRACKET        reduce using rule 58 (condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition .)


state 188

    (59) else_posible -> ELSE gen_goto . block
    (75) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 157

    block                          shift and go to state 195

state 189

    (79) expression_aux -> ao add_to_pilaOptr conc gen_conc_quad . expression_aux
    (79) expression_aux -> . ao add_to_pilaOptr conc gen_conc_quad expression_aux
    (80) expression_aux -> .
    (96) ao -> . AND
    (97) ao -> . OR

    RPAR            reduce using rule 80 (expression_aux -> .)
    SEMICOLON       reduce using rule 80 (expression_aux -> .)
    AND             shift and go to state 133
    OR              shift and go to state 135

    expression_aux                 shift and go to state 196
    ao                             shift and go to state 134

state 190

    (83) conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .

    AND             reduce using rule 83 (conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .)
    OR              reduce using rule 83 (conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .)
    RPAR            reduce using rule 83 (conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .)
    SEMICOLON       reduce using rule 83 (conc_aux -> comp add_to_pilaOptr exp gen_comp_quad .)


state 191

    (55) cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .

    READ            reduce using rule 55 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    WRITE           reduce using rule 55 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    RETURN          reduce using rule 55 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    WHILE           reduce using rule 55 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    IF              reduce using rule 55 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    ID              reduce using rule 55 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)
    RBRACKET        reduce using rule 55 (cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end .)


state 192

    (34) more_args -> COMMA var_type ID to_args more_args .

    RPAR            reduce using rule 34 (more_args -> COMMA var_type ID to_args more_args .)


state 193

    (37) func_block -> LBRACKET more_vars actual_quad_no more_statement gen_endproc_quad RBRACKET .

    FUNC            reduce using rule 37 (func_block -> LBRACKET more_vars actual_quad_no more_statement gen_endproc_quad RBRACKET .)
    MAIN            reduce using rule 37 (func_block -> LBRACKET more_vars actual_quad_no more_statement gen_endproc_quad RBRACKET .)


state 194

    (69) more_params -> COMMA exp check_args . more_params
    (69) more_params -> . COMMA exp check_args more_params
    (70) more_params -> .

    COMMA           shift and go to state 168
    RPAR            reduce using rule 70 (more_params -> .)

    more_params                    shift and go to state 197

state 195

    (59) else_posible -> ELSE gen_goto block .

    READ            reduce using rule 59 (else_posible -> ELSE gen_goto block .)
    WRITE           reduce using rule 59 (else_posible -> ELSE gen_goto block .)
    RETURN          reduce using rule 59 (else_posible -> ELSE gen_goto block .)
    WHILE           reduce using rule 59 (else_posible -> ELSE gen_goto block .)
    IF              reduce using rule 59 (else_posible -> ELSE gen_goto block .)
    ID              reduce using rule 59 (else_posible -> ELSE gen_goto block .)
    RBRACKET        reduce using rule 59 (else_posible -> ELSE gen_goto block .)


state 196

    (79) expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux .

    RPAR            reduce using rule 79 (expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux .)
    SEMICOLON       reduce using rule 79 (expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux .)


state 197

    (69) more_params -> COMMA exp check_args more_params .

    RPAR            reduce using rule 69 (more_params -> COMMA exp check_args more_params .)

