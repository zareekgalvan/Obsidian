Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    FALSE

Grammar

Rule 0     S' -> program
Rule 1     program -> more_vars more_func main
Rule 2     more_vars -> vars
Rule 3     more_vars -> <empty>
Rule 4     vars -> var_type vars_aux SEMICOLON more_vars
Rule 5     var_type -> BOOL
Rule 6     var_type -> INT
Rule 7     var_type -> DOUBLE
Rule 8     vars_aux -> ID arr to_var_table var_assign more_vars_aux
Rule 9     to_var_table -> <empty>
Rule 10    var_assign -> EQUALS var_cte
Rule 11    var_assign -> <empty>
Rule 12    more_vars_aux -> COMMA vars_aux
Rule 13    more_vars_aux -> <empty>
Rule 14    arr -> LSQRTBRACKET const RSQRTBRACKET arr
Rule 15    arr -> <empty>
Rule 16    var_cte -> CTEINT
Rule 17    var_cte -> CTEDOUBLE
Rule 18    var_cte -> CTEBOOL
Rule 19    var_cte -> ID arr
Rule 20    var_cte -> func_call
Rule 21    const -> CTEINT
Rule 22    const -> CTEDOUBLE
Rule 23    const -> CTEBOOL
Rule 24    more_func -> func
Rule 25    more_func -> <empty>
Rule 26    func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func
Rule 27    to_proc_dir -> <empty>
Rule 28    func_type -> VOID
Rule 29    func_type -> BOOL
Rule 30    func_type -> INT
Rule 31    func_type -> DOUBLE
Rule 32    arguments -> var_type ID to_args more_args
Rule 33    arguments -> <empty>
Rule 34    more_args -> COMMA var_type ID to_args more_args
Rule 35    more_args -> <empty>
Rule 36    to_args -> <empty>
Rule 37    func_block -> LBRACKET more_vars more_statement optional_return RBRACKET
Rule 38    optional_return -> RETURN exp SEMICOLON
Rule 39    optional_return -> <empty>
Rule 40    more_statement -> statement more_statement
Rule 41    more_statement -> <empty>
Rule 42    statement -> read
Rule 43    statement -> write
Rule 44    statement -> cicle
Rule 45    statement -> condition
Rule 46    statement -> assignation
Rule 47    statement -> func_call SEMICOLON
Rule 48    read -> READ LPAR ID arr_par RPAR SEMICOLON
Rule 49    write -> WRITE LPAR exp RPAR SEMICOLON
Rule 50    cicle -> WHILE LPAR expression RPAR block
Rule 51    condition -> IF LPAR expression RPAR block else_posible
Rule 52    else_posible -> ELSE block
Rule 53    else_posible -> <empty>
Rule 54    assignation -> ID arr_par EQUALS expression SEMICOLON
Rule 55    func_call -> ID LPAR params RPAR
Rule 56    params -> exp more_params
Rule 57    params -> <empty>
Rule 58    more_params -> COMMA exp more_params
Rule 59    more_params -> <empty>
Rule 60    block -> LBRACKET more_statement RBRACKET
Rule 61    arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par
Rule 62    arr_par -> <empty>
Rule 63    expression -> conc expression_aux
Rule 64    expression_aux -> ao add_to_pilaOptr conc expression_aux
Rule 65    expression_aux -> <empty>
Rule 66    conc -> exp conc_aux
Rule 67    conc_aux -> comp add_to_pilaOptr exp
Rule 68    conc_aux -> <empty>
Rule 69    exp -> term exp_aux
Rule 70    exp_aux -> pl add_to_pilaOptr term exp_aux
Rule 71    exp_aux -> <empty>
Rule 72    term -> factor term_aux
Rule 73    term_aux -> dm add_to_pilaOptr factor term_aux
Rule 74    term_aux -> <empty>
Rule 75    factor -> LPAR add_to_pilaOptr expression RPAR
Rule 76    factor -> var_cte
Rule 77    ao -> AND
Rule 78    ao -> OR
Rule 79    comp -> GREATER
Rule 80    comp -> LESS
Rule 81    comp -> GREATEROREQUAL
Rule 82    comp -> LESSOREQUAL
Rule 83    comp -> EQUALEQUALS
Rule 84    comp -> DIFFERENT
Rule 85    pl -> PLUS
Rule 86    pl -> MINUS
Rule 87    add_to_pilaOptr -> <empty>
Rule 88    dm -> MULTIPLICATION
Rule 89    dm -> DIVISION
Rule 90    dm -> MOD
Rule 91    main -> MAIN main_to_proc_dir main_block
Rule 92    main_to_proc_dir -> <empty>
Rule 93    main_block -> LBRACKET more_vars more_statement RBRACKET

Terminals, with rules where they appear

AND                  : 77
BOOL                 : 5 29
COMMA                : 12 34 58
CTEBOOL              : 18 23
CTEDOUBLE            : 17 22
CTEINT               : 16 21
DIFFERENT            : 84
DIVISION             : 89
DOUBLE               : 7 31
ELSE                 : 52
EQUALEQUALS          : 83
EQUALS               : 10 54
FALSE                : 
FUNC                 : 26
GREATER              : 79
GREATEROREQUAL       : 81
ID                   : 8 19 26 32 34 48 54 55
IF                   : 51
INT                  : 6 30
LBRACKET             : 37 60 93
LESS                 : 80
LESSOREQUAL          : 82
LPAR                 : 26 48 49 50 51 55 75
LSQRTBRACKET         : 14 61
MAIN                 : 91
MINUS                : 86
MOD                  : 90
MULTIPLICATION       : 88
OR                   : 78
PLUS                 : 85
RBRACKET             : 37 60 93
READ                 : 48
RETURN               : 38
RPAR                 : 26 48 49 50 51 55 75
RSQRTBRACKET         : 14 61
SEMICOLON            : 4 38 47 48 49 54
TRUE                 : 
VOID                 : 28
WHILE                : 50
WRITE                : 49
error                : 

Nonterminals, with rules where they appear

add_to_pilaOptr      : 64 67 70 73 75
ao                   : 64
arguments            : 26
arr                  : 8 14 19
arr_par              : 48 54 61
assignation          : 46
block                : 50 51 52
cicle                : 44
comp                 : 67
conc                 : 63 64
conc_aux             : 66
condition            : 45
const                : 14
dm                   : 73
else_posible         : 51
exp                  : 38 49 56 58 61 66 67
exp_aux              : 69 70
expression           : 50 51 54 75
expression_aux       : 63 64
factor               : 72 73
func                 : 24
func_block           : 26
func_call            : 20 47
func_type            : 26
main                 : 1
main_block           : 91
main_to_proc_dir     : 91
more_args            : 32 34
more_func            : 1 26
more_params          : 56 58
more_statement       : 37 40 60 93
more_vars            : 1 4 37 93
more_vars_aux        : 8
optional_return      : 37
params               : 55
pl                   : 70
program              : 0
read                 : 42
statement            : 40
term                 : 69 70
term_aux             : 72 73
to_args              : 32 34
to_proc_dir          : 26
to_var_table         : 8
var_assign           : 8
var_cte              : 10 76
var_type             : 4 32 34
vars                 : 2
vars_aux             : 4 12
write                : 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . more_vars more_func main
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    FUNC            reduce using rule 3 (more_vars -> .)
    MAIN            reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    var_type                       shift and go to state 2
    program                        shift and go to state 5
    more_vars                      shift and go to state 7

state 1

    (2) more_vars -> vars .

    FUNC            reduce using rule 2 (more_vars -> vars .)
    MAIN            reduce using rule 2 (more_vars -> vars .)
    READ            reduce using rule 2 (more_vars -> vars .)
    WRITE           reduce using rule 2 (more_vars -> vars .)
    WHILE           reduce using rule 2 (more_vars -> vars .)
    IF              reduce using rule 2 (more_vars -> vars .)
    ID              reduce using rule 2 (more_vars -> vars .)
    RBRACKET        reduce using rule 2 (more_vars -> vars .)
    RETURN          reduce using rule 2 (more_vars -> vars .)


state 2

    (4) vars -> var_type . vars_aux SEMICOLON more_vars
    (8) vars_aux -> . ID arr to_var_table var_assign more_vars_aux

    ID              shift and go to state 9

    vars_aux                       shift and go to state 8

state 3

    (6) var_type -> INT .

    ID              reduce using rule 6 (var_type -> INT .)


state 4

    (7) var_type -> DOUBLE .

    ID              reduce using rule 7 (var_type -> DOUBLE .)


state 5

    (0) S' -> program .



state 6

    (5) var_type -> BOOL .

    ID              reduce using rule 5 (var_type -> BOOL .)


state 7

    (1) program -> more_vars . more_func main
    (24) more_func -> . func
    (25) more_func -> .
    (26) func -> . FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func

    MAIN            reduce using rule 25 (more_func -> .)
    FUNC            shift and go to state 12

    more_func                      shift and go to state 11
    func                           shift and go to state 10

state 8

    (4) vars -> var_type vars_aux . SEMICOLON more_vars

    SEMICOLON       shift and go to state 13


state 9

    (8) vars_aux -> ID . arr to_var_table var_assign more_vars_aux
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .

    LSQRTBRACKET    shift and go to state 15
    EQUALS          reduce using rule 15 (arr -> .)
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)

    arr                            shift and go to state 14

state 10

    (24) more_func -> func .

    MAIN            reduce using rule 24 (more_func -> func .)


state 11

    (1) program -> more_vars more_func . main
    (91) main -> . MAIN main_to_proc_dir main_block

    MAIN            shift and go to state 17

    main                           shift and go to state 16

state 12

    (26) func -> FUNC . func_type ID to_proc_dir LPAR arguments RPAR func_block more_func
    (28) func_type -> . VOID
    (29) func_type -> . BOOL
    (30) func_type -> . INT
    (31) func_type -> . DOUBLE

    VOID            shift and go to state 20
    BOOL            shift and go to state 22
    INT             shift and go to state 21
    DOUBLE          shift and go to state 19

    func_type                      shift and go to state 18

state 13

    (4) vars -> var_type vars_aux SEMICOLON . more_vars
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    FUNC            reduce using rule 3 (more_vars -> .)
    MAIN            reduce using rule 3 (more_vars -> .)
    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    RETURN          reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    vars                           shift and go to state 1
    more_vars                      shift and go to state 23
    var_type                       shift and go to state 2

state 14

    (8) vars_aux -> ID arr . to_var_table var_assign more_vars_aux
    (9) to_var_table -> .

    EQUALS          reduce using rule 9 (to_var_table -> .)
    COMMA           reduce using rule 9 (to_var_table -> .)
    SEMICOLON       reduce using rule 9 (to_var_table -> .)

    to_var_table                   shift and go to state 24

state 15

    (14) arr -> LSQRTBRACKET . const RSQRTBRACKET arr
    (21) const -> . CTEINT
    (22) const -> . CTEDOUBLE
    (23) const -> . CTEBOOL

    CTEINT          shift and go to state 28
    CTEDOUBLE       shift and go to state 25
    CTEBOOL         shift and go to state 27

    const                          shift and go to state 26

state 16

    (1) program -> more_vars more_func main .

    $end            reduce using rule 1 (program -> more_vars more_func main .)


state 17

    (91) main -> MAIN . main_to_proc_dir main_block
    (92) main_to_proc_dir -> .

    LBRACKET        reduce using rule 92 (main_to_proc_dir -> .)

    main_to_proc_dir               shift and go to state 29

state 18

    (26) func -> FUNC func_type . ID to_proc_dir LPAR arguments RPAR func_block more_func

    ID              shift and go to state 30


state 19

    (31) func_type -> DOUBLE .

    ID              reduce using rule 31 (func_type -> DOUBLE .)


state 20

    (28) func_type -> VOID .

    ID              reduce using rule 28 (func_type -> VOID .)


state 21

    (30) func_type -> INT .

    ID              reduce using rule 30 (func_type -> INT .)


state 22

    (29) func_type -> BOOL .

    ID              reduce using rule 29 (func_type -> BOOL .)


state 23

    (4) vars -> var_type vars_aux SEMICOLON more_vars .

    FUNC            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    MAIN            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    READ            reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    WRITE           reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    WHILE           reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    IF              reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    ID              reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    RBRACKET        reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)
    RETURN          reduce using rule 4 (vars -> var_type vars_aux SEMICOLON more_vars .)


state 24

    (8) vars_aux -> ID arr to_var_table . var_assign more_vars_aux
    (10) var_assign -> . EQUALS var_cte
    (11) var_assign -> .

    EQUALS          shift and go to state 31
    COMMA           reduce using rule 11 (var_assign -> .)
    SEMICOLON       reduce using rule 11 (var_assign -> .)

    var_assign                     shift and go to state 32

state 25

    (22) const -> CTEDOUBLE .

    RSQRTBRACKET    reduce using rule 22 (const -> CTEDOUBLE .)


state 26

    (14) arr -> LSQRTBRACKET const . RSQRTBRACKET arr

    RSQRTBRACKET    shift and go to state 33


state 27

    (23) const -> CTEBOOL .

    RSQRTBRACKET    reduce using rule 23 (const -> CTEBOOL .)


state 28

    (21) const -> CTEINT .

    RSQRTBRACKET    reduce using rule 21 (const -> CTEINT .)


state 29

    (91) main -> MAIN main_to_proc_dir . main_block
    (93) main_block -> . LBRACKET more_vars more_statement RBRACKET

    LBRACKET        shift and go to state 35

    main_block                     shift and go to state 34

state 30

    (26) func -> FUNC func_type ID . to_proc_dir LPAR arguments RPAR func_block more_func
    (27) to_proc_dir -> .

    LPAR            reduce using rule 27 (to_proc_dir -> .)

    to_proc_dir                    shift and go to state 36

state 31

    (10) var_assign -> EQUALS . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    var_cte                        shift and go to state 41

state 32

    (8) vars_aux -> ID arr to_var_table var_assign . more_vars_aux
    (12) more_vars_aux -> . COMMA vars_aux
    (13) more_vars_aux -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 13 (more_vars_aux -> .)

    more_vars_aux                  shift and go to state 43

state 33

    (14) arr -> LSQRTBRACKET const RSQRTBRACKET . arr
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .

    LSQRTBRACKET    shift and go to state 15
    EQUALS          reduce using rule 15 (arr -> .)
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)
    MULTIPLICATION  reduce using rule 15 (arr -> .)
    DIVISION        reduce using rule 15 (arr -> .)
    MOD             reduce using rule 15 (arr -> .)
    PLUS            reduce using rule 15 (arr -> .)
    MINUS           reduce using rule 15 (arr -> .)
    RPAR            reduce using rule 15 (arr -> .)
    GREATER         reduce using rule 15 (arr -> .)
    LESS            reduce using rule 15 (arr -> .)
    GREATEROREQUAL  reduce using rule 15 (arr -> .)
    LESSOREQUAL     reduce using rule 15 (arr -> .)
    EQUALEQUALS     reduce using rule 15 (arr -> .)
    DIFFERENT       reduce using rule 15 (arr -> .)
    AND             reduce using rule 15 (arr -> .)
    OR              reduce using rule 15 (arr -> .)
    RSQRTBRACKET    reduce using rule 15 (arr -> .)

    arr                            shift and go to state 45

state 34

    (91) main -> MAIN main_to_proc_dir main_block .

    $end            reduce using rule 91 (main -> MAIN main_to_proc_dir main_block .)


state 35

    (93) main_block -> LBRACKET . more_vars more_statement RBRACKET
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 2
    more_vars                      shift and go to state 46
    vars                           shift and go to state 1

state 36

    (26) func -> FUNC func_type ID to_proc_dir . LPAR arguments RPAR func_block more_func

    LPAR            shift and go to state 47


state 37

    (17) var_cte -> CTEDOUBLE .

    MULTIPLICATION  reduce using rule 17 (var_cte -> CTEDOUBLE .)
    DIVISION        reduce using rule 17 (var_cte -> CTEDOUBLE .)
    MOD             reduce using rule 17 (var_cte -> CTEDOUBLE .)
    PLUS            reduce using rule 17 (var_cte -> CTEDOUBLE .)
    MINUS           reduce using rule 17 (var_cte -> CTEDOUBLE .)
    GREATER         reduce using rule 17 (var_cte -> CTEDOUBLE .)
    LESS            reduce using rule 17 (var_cte -> CTEDOUBLE .)
    GREATEROREQUAL  reduce using rule 17 (var_cte -> CTEDOUBLE .)
    LESSOREQUAL     reduce using rule 17 (var_cte -> CTEDOUBLE .)
    EQUALEQUALS     reduce using rule 17 (var_cte -> CTEDOUBLE .)
    DIFFERENT       reduce using rule 17 (var_cte -> CTEDOUBLE .)
    AND             reduce using rule 17 (var_cte -> CTEDOUBLE .)
    OR              reduce using rule 17 (var_cte -> CTEDOUBLE .)
    SEMICOLON       reduce using rule 17 (var_cte -> CTEDOUBLE .)
    RPAR            reduce using rule 17 (var_cte -> CTEDOUBLE .)
    COMMA           reduce using rule 17 (var_cte -> CTEDOUBLE .)
    RSQRTBRACKET    reduce using rule 17 (var_cte -> CTEDOUBLE .)


state 38

    (20) var_cte -> func_call .

    MULTIPLICATION  reduce using rule 20 (var_cte -> func_call .)
    DIVISION        reduce using rule 20 (var_cte -> func_call .)
    MOD             reduce using rule 20 (var_cte -> func_call .)
    PLUS            reduce using rule 20 (var_cte -> func_call .)
    MINUS           reduce using rule 20 (var_cte -> func_call .)
    GREATER         reduce using rule 20 (var_cte -> func_call .)
    LESS            reduce using rule 20 (var_cte -> func_call .)
    GREATEROREQUAL  reduce using rule 20 (var_cte -> func_call .)
    LESSOREQUAL     reduce using rule 20 (var_cte -> func_call .)
    EQUALEQUALS     reduce using rule 20 (var_cte -> func_call .)
    DIFFERENT       reduce using rule 20 (var_cte -> func_call .)
    AND             reduce using rule 20 (var_cte -> func_call .)
    OR              reduce using rule 20 (var_cte -> func_call .)
    SEMICOLON       reduce using rule 20 (var_cte -> func_call .)
    RPAR            reduce using rule 20 (var_cte -> func_call .)
    COMMA           reduce using rule 20 (var_cte -> func_call .)
    RSQRTBRACKET    reduce using rule 20 (var_cte -> func_call .)


state 39

    (18) var_cte -> CTEBOOL .

    MULTIPLICATION  reduce using rule 18 (var_cte -> CTEBOOL .)
    DIVISION        reduce using rule 18 (var_cte -> CTEBOOL .)
    MOD             reduce using rule 18 (var_cte -> CTEBOOL .)
    PLUS            reduce using rule 18 (var_cte -> CTEBOOL .)
    MINUS           reduce using rule 18 (var_cte -> CTEBOOL .)
    GREATER         reduce using rule 18 (var_cte -> CTEBOOL .)
    LESS            reduce using rule 18 (var_cte -> CTEBOOL .)
    GREATEROREQUAL  reduce using rule 18 (var_cte -> CTEBOOL .)
    LESSOREQUAL     reduce using rule 18 (var_cte -> CTEBOOL .)
    EQUALEQUALS     reduce using rule 18 (var_cte -> CTEBOOL .)
    DIFFERENT       reduce using rule 18 (var_cte -> CTEBOOL .)
    AND             reduce using rule 18 (var_cte -> CTEBOOL .)
    OR              reduce using rule 18 (var_cte -> CTEBOOL .)
    SEMICOLON       reduce using rule 18 (var_cte -> CTEBOOL .)
    RPAR            reduce using rule 18 (var_cte -> CTEBOOL .)
    COMMA           reduce using rule 18 (var_cte -> CTEBOOL .)
    RSQRTBRACKET    reduce using rule 18 (var_cte -> CTEBOOL .)


state 40

    (16) var_cte -> CTEINT .

    MULTIPLICATION  reduce using rule 16 (var_cte -> CTEINT .)
    DIVISION        reduce using rule 16 (var_cte -> CTEINT .)
    MOD             reduce using rule 16 (var_cte -> CTEINT .)
    PLUS            reduce using rule 16 (var_cte -> CTEINT .)
    MINUS           reduce using rule 16 (var_cte -> CTEINT .)
    GREATER         reduce using rule 16 (var_cte -> CTEINT .)
    LESS            reduce using rule 16 (var_cte -> CTEINT .)
    GREATEROREQUAL  reduce using rule 16 (var_cte -> CTEINT .)
    LESSOREQUAL     reduce using rule 16 (var_cte -> CTEINT .)
    EQUALEQUALS     reduce using rule 16 (var_cte -> CTEINT .)
    DIFFERENT       reduce using rule 16 (var_cte -> CTEINT .)
    AND             reduce using rule 16 (var_cte -> CTEINT .)
    OR              reduce using rule 16 (var_cte -> CTEINT .)
    SEMICOLON       reduce using rule 16 (var_cte -> CTEINT .)
    RPAR            reduce using rule 16 (var_cte -> CTEINT .)
    COMMA           reduce using rule 16 (var_cte -> CTEINT .)
    RSQRTBRACKET    reduce using rule 16 (var_cte -> CTEINT .)


state 41

    (10) var_assign -> EQUALS var_cte .

    COMMA           reduce using rule 10 (var_assign -> EQUALS var_cte .)
    SEMICOLON       reduce using rule 10 (var_assign -> EQUALS var_cte .)


state 42

    (19) var_cte -> ID . arr
    (55) func_call -> ID . LPAR params RPAR
    (14) arr -> . LSQRTBRACKET const RSQRTBRACKET arr
    (15) arr -> .

    LPAR            shift and go to state 48
    LSQRTBRACKET    shift and go to state 15
    COMMA           reduce using rule 15 (arr -> .)
    SEMICOLON       reduce using rule 15 (arr -> .)
    MULTIPLICATION  reduce using rule 15 (arr -> .)
    DIVISION        reduce using rule 15 (arr -> .)
    MOD             reduce using rule 15 (arr -> .)
    PLUS            reduce using rule 15 (arr -> .)
    MINUS           reduce using rule 15 (arr -> .)
    RPAR            reduce using rule 15 (arr -> .)
    GREATER         reduce using rule 15 (arr -> .)
    LESS            reduce using rule 15 (arr -> .)
    GREATEROREQUAL  reduce using rule 15 (arr -> .)
    LESSOREQUAL     reduce using rule 15 (arr -> .)
    EQUALEQUALS     reduce using rule 15 (arr -> .)
    DIFFERENT       reduce using rule 15 (arr -> .)
    AND             reduce using rule 15 (arr -> .)
    OR              reduce using rule 15 (arr -> .)
    RSQRTBRACKET    reduce using rule 15 (arr -> .)

    arr                            shift and go to state 49

state 43

    (8) vars_aux -> ID arr to_var_table var_assign more_vars_aux .

    SEMICOLON       reduce using rule 8 (vars_aux -> ID arr to_var_table var_assign more_vars_aux .)


state 44

    (12) more_vars_aux -> COMMA . vars_aux
    (8) vars_aux -> . ID arr to_var_table var_assign more_vars_aux

    ID              shift and go to state 9

    vars_aux                       shift and go to state 50

state 45

    (14) arr -> LSQRTBRACKET const RSQRTBRACKET arr .

    EQUALS          reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    COMMA           reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    SEMICOLON       reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MULTIPLICATION  reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    DIVISION        reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MOD             reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    PLUS            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    MINUS           reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    RPAR            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    GREATER         reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    LESS            reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    GREATEROREQUAL  reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    LESSOREQUAL     reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    EQUALEQUALS     reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    DIFFERENT       reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    AND             reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    OR              reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)
    RSQRTBRACKET    reduce using rule 14 (arr -> LSQRTBRACKET const RSQRTBRACKET arr .)


state 46

    (93) main_block -> LBRACKET more_vars . more_statement RBRACKET
    (40) more_statement -> . statement more_statement
    (41) more_statement -> .
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . cicle
    (45) statement -> . condition
    (46) statement -> . assignation
    (47) statement -> . func_call SEMICOLON
    (48) read -> . READ LPAR ID arr_par RPAR SEMICOLON
    (49) write -> . WRITE LPAR exp RPAR SEMICOLON
    (50) cicle -> . WHILE LPAR expression RPAR block
    (51) condition -> . IF LPAR expression RPAR block else_posible
    (54) assignation -> . ID arr_par EQUALS expression SEMICOLON
    (55) func_call -> . ID LPAR params RPAR

    RBRACKET        reduce using rule 41 (more_statement -> .)
    READ            shift and go to state 51
    WRITE           shift and go to state 57
    WHILE           shift and go to state 52
    IF              shift and go to state 60
    ID              shift and go to state 58

    func_call                      shift and go to state 61
    assignation                    shift and go to state 62
    read                           shift and go to state 56
    cicle                          shift and go to state 53
    write                          shift and go to state 54
    statement                      shift and go to state 55
    more_statement                 shift and go to state 63
    condition                      shift and go to state 59

state 47

    (26) func -> FUNC func_type ID to_proc_dir LPAR . arguments RPAR func_block more_func
    (32) arguments -> . var_type ID to_args more_args
    (33) arguments -> .
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    RPAR            reduce using rule 33 (arguments -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 64
    arguments                      shift and go to state 65

state 48

    (55) func_call -> ID LPAR . params RPAR
    (56) params -> . exp more_params
    (57) params -> .
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    RPAR            reduce using rule 57 (params -> .)
    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    var_cte                        shift and go to state 71
    params                         shift and go to state 68
    exp                            shift and go to state 69
    factor                         shift and go to state 70

state 49

    (19) var_cte -> ID arr .

    MULTIPLICATION  reduce using rule 19 (var_cte -> ID arr .)
    DIVISION        reduce using rule 19 (var_cte -> ID arr .)
    MOD             reduce using rule 19 (var_cte -> ID arr .)
    PLUS            reduce using rule 19 (var_cte -> ID arr .)
    MINUS           reduce using rule 19 (var_cte -> ID arr .)
    GREATER         reduce using rule 19 (var_cte -> ID arr .)
    LESS            reduce using rule 19 (var_cte -> ID arr .)
    GREATEROREQUAL  reduce using rule 19 (var_cte -> ID arr .)
    LESSOREQUAL     reduce using rule 19 (var_cte -> ID arr .)
    EQUALEQUALS     reduce using rule 19 (var_cte -> ID arr .)
    DIFFERENT       reduce using rule 19 (var_cte -> ID arr .)
    AND             reduce using rule 19 (var_cte -> ID arr .)
    OR              reduce using rule 19 (var_cte -> ID arr .)
    SEMICOLON       reduce using rule 19 (var_cte -> ID arr .)
    RPAR            reduce using rule 19 (var_cte -> ID arr .)
    COMMA           reduce using rule 19 (var_cte -> ID arr .)
    RSQRTBRACKET    reduce using rule 19 (var_cte -> ID arr .)


state 50

    (12) more_vars_aux -> COMMA vars_aux .

    SEMICOLON       reduce using rule 12 (more_vars_aux -> COMMA vars_aux .)


state 51

    (48) read -> READ . LPAR ID arr_par RPAR SEMICOLON

    LPAR            shift and go to state 72


state 52

    (50) cicle -> WHILE . LPAR expression RPAR block

    LPAR            shift and go to state 73


state 53

    (44) statement -> cicle .

    READ            reduce using rule 44 (statement -> cicle .)
    WRITE           reduce using rule 44 (statement -> cicle .)
    WHILE           reduce using rule 44 (statement -> cicle .)
    IF              reduce using rule 44 (statement -> cicle .)
    ID              reduce using rule 44 (statement -> cicle .)
    RBRACKET        reduce using rule 44 (statement -> cicle .)
    RETURN          reduce using rule 44 (statement -> cicle .)


state 54

    (43) statement -> write .

    READ            reduce using rule 43 (statement -> write .)
    WRITE           reduce using rule 43 (statement -> write .)
    WHILE           reduce using rule 43 (statement -> write .)
    IF              reduce using rule 43 (statement -> write .)
    ID              reduce using rule 43 (statement -> write .)
    RBRACKET        reduce using rule 43 (statement -> write .)
    RETURN          reduce using rule 43 (statement -> write .)


state 55

    (40) more_statement -> statement . more_statement
    (40) more_statement -> . statement more_statement
    (41) more_statement -> .
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . cicle
    (45) statement -> . condition
    (46) statement -> . assignation
    (47) statement -> . func_call SEMICOLON
    (48) read -> . READ LPAR ID arr_par RPAR SEMICOLON
    (49) write -> . WRITE LPAR exp RPAR SEMICOLON
    (50) cicle -> . WHILE LPAR expression RPAR block
    (51) condition -> . IF LPAR expression RPAR block else_posible
    (54) assignation -> . ID arr_par EQUALS expression SEMICOLON
    (55) func_call -> . ID LPAR params RPAR

    RBRACKET        reduce using rule 41 (more_statement -> .)
    RETURN          reduce using rule 41 (more_statement -> .)
    READ            shift and go to state 51
    WRITE           shift and go to state 57
    WHILE           shift and go to state 52
    IF              shift and go to state 60
    ID              shift and go to state 58

    func_call                      shift and go to state 61
    assignation                    shift and go to state 62
    read                           shift and go to state 56
    cicle                          shift and go to state 53
    write                          shift and go to state 54
    statement                      shift and go to state 55
    more_statement                 shift and go to state 74
    condition                      shift and go to state 59

state 56

    (42) statement -> read .

    READ            reduce using rule 42 (statement -> read .)
    WRITE           reduce using rule 42 (statement -> read .)
    WHILE           reduce using rule 42 (statement -> read .)
    IF              reduce using rule 42 (statement -> read .)
    ID              reduce using rule 42 (statement -> read .)
    RBRACKET        reduce using rule 42 (statement -> read .)
    RETURN          reduce using rule 42 (statement -> read .)


state 57

    (49) write -> WRITE . LPAR exp RPAR SEMICOLON

    LPAR            shift and go to state 75


state 58

    (54) assignation -> ID . arr_par EQUALS expression SEMICOLON
    (55) func_call -> ID . LPAR params RPAR
    (61) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (62) arr_par -> .

    LPAR            shift and go to state 48
    LSQRTBRACKET    shift and go to state 76
    EQUALS          reduce using rule 62 (arr_par -> .)

    arr_par                        shift and go to state 77

state 59

    (45) statement -> condition .

    READ            reduce using rule 45 (statement -> condition .)
    WRITE           reduce using rule 45 (statement -> condition .)
    WHILE           reduce using rule 45 (statement -> condition .)
    IF              reduce using rule 45 (statement -> condition .)
    ID              reduce using rule 45 (statement -> condition .)
    RBRACKET        reduce using rule 45 (statement -> condition .)
    RETURN          reduce using rule 45 (statement -> condition .)


state 60

    (51) condition -> IF . LPAR expression RPAR block else_posible

    LPAR            shift and go to state 78


state 61

    (47) statement -> func_call . SEMICOLON

    SEMICOLON       shift and go to state 79


state 62

    (46) statement -> assignation .

    READ            reduce using rule 46 (statement -> assignation .)
    WRITE           reduce using rule 46 (statement -> assignation .)
    WHILE           reduce using rule 46 (statement -> assignation .)
    IF              reduce using rule 46 (statement -> assignation .)
    ID              reduce using rule 46 (statement -> assignation .)
    RBRACKET        reduce using rule 46 (statement -> assignation .)
    RETURN          reduce using rule 46 (statement -> assignation .)


state 63

    (93) main_block -> LBRACKET more_vars more_statement . RBRACKET

    RBRACKET        shift and go to state 80


state 64

    (32) arguments -> var_type . ID to_args more_args

    ID              shift and go to state 81


state 65

    (26) func -> FUNC func_type ID to_proc_dir LPAR arguments . RPAR func_block more_func

    RPAR            shift and go to state 82


state 66

    (75) factor -> LPAR . add_to_pilaOptr expression RPAR
    (87) add_to_pilaOptr -> .

    LPAR            reduce using rule 87 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 87 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 87 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 87 (add_to_pilaOptr -> .)
    ID              reduce using rule 87 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 83

state 67

    (69) exp -> term . exp_aux
    (70) exp_aux -> . pl add_to_pilaOptr term exp_aux
    (71) exp_aux -> .
    (85) pl -> . PLUS
    (86) pl -> . MINUS

    COMMA           reduce using rule 71 (exp_aux -> .)
    RPAR            reduce using rule 71 (exp_aux -> .)
    GREATER         reduce using rule 71 (exp_aux -> .)
    LESS            reduce using rule 71 (exp_aux -> .)
    GREATEROREQUAL  reduce using rule 71 (exp_aux -> .)
    LESSOREQUAL     reduce using rule 71 (exp_aux -> .)
    EQUALEQUALS     reduce using rule 71 (exp_aux -> .)
    DIFFERENT       reduce using rule 71 (exp_aux -> .)
    AND             reduce using rule 71 (exp_aux -> .)
    OR              reduce using rule 71 (exp_aux -> .)
    RSQRTBRACKET    reduce using rule 71 (exp_aux -> .)
    SEMICOLON       reduce using rule 71 (exp_aux -> .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    exp_aux                        shift and go to state 84
    pl                             shift and go to state 87

state 68

    (55) func_call -> ID LPAR params . RPAR

    RPAR            shift and go to state 88


state 69

    (56) params -> exp . more_params
    (58) more_params -> . COMMA exp more_params
    (59) more_params -> .

    COMMA           shift and go to state 90
    RPAR            reduce using rule 59 (more_params -> .)

    more_params                    shift and go to state 89

state 70

    (72) term -> factor . term_aux
    (73) term_aux -> . dm add_to_pilaOptr factor term_aux
    (74) term_aux -> .
    (88) dm -> . MULTIPLICATION
    (89) dm -> . DIVISION
    (90) dm -> . MOD

    PLUS            reduce using rule 74 (term_aux -> .)
    MINUS           reduce using rule 74 (term_aux -> .)
    COMMA           reduce using rule 74 (term_aux -> .)
    RPAR            reduce using rule 74 (term_aux -> .)
    GREATER         reduce using rule 74 (term_aux -> .)
    LESS            reduce using rule 74 (term_aux -> .)
    GREATEROREQUAL  reduce using rule 74 (term_aux -> .)
    LESSOREQUAL     reduce using rule 74 (term_aux -> .)
    EQUALEQUALS     reduce using rule 74 (term_aux -> .)
    DIFFERENT       reduce using rule 74 (term_aux -> .)
    AND             reduce using rule 74 (term_aux -> .)
    OR              reduce using rule 74 (term_aux -> .)
    RSQRTBRACKET    reduce using rule 74 (term_aux -> .)
    SEMICOLON       reduce using rule 74 (term_aux -> .)
    MULTIPLICATION  shift and go to state 94
    DIVISION        shift and go to state 91
    MOD             shift and go to state 95

    dm                             shift and go to state 92
    term_aux                       shift and go to state 93

state 71

    (76) factor -> var_cte .

    MULTIPLICATION  reduce using rule 76 (factor -> var_cte .)
    DIVISION        reduce using rule 76 (factor -> var_cte .)
    MOD             reduce using rule 76 (factor -> var_cte .)
    PLUS            reduce using rule 76 (factor -> var_cte .)
    MINUS           reduce using rule 76 (factor -> var_cte .)
    COMMA           reduce using rule 76 (factor -> var_cte .)
    RPAR            reduce using rule 76 (factor -> var_cte .)
    GREATER         reduce using rule 76 (factor -> var_cte .)
    LESS            reduce using rule 76 (factor -> var_cte .)
    GREATEROREQUAL  reduce using rule 76 (factor -> var_cte .)
    LESSOREQUAL     reduce using rule 76 (factor -> var_cte .)
    EQUALEQUALS     reduce using rule 76 (factor -> var_cte .)
    DIFFERENT       reduce using rule 76 (factor -> var_cte .)
    AND             reduce using rule 76 (factor -> var_cte .)
    OR              reduce using rule 76 (factor -> var_cte .)
    RSQRTBRACKET    reduce using rule 76 (factor -> var_cte .)
    SEMICOLON       reduce using rule 76 (factor -> var_cte .)


state 72

    (48) read -> READ LPAR . ID arr_par RPAR SEMICOLON

    ID              shift and go to state 96


state 73

    (50) cicle -> WHILE LPAR . expression RPAR block
    (63) expression -> . conc expression_aux
    (66) conc -> . exp conc_aux
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    conc                           shift and go to state 97
    var_cte                        shift and go to state 71
    exp                            shift and go to state 98
    factor                         shift and go to state 70
    expression                     shift and go to state 99

state 74

    (40) more_statement -> statement more_statement .

    RETURN          reduce using rule 40 (more_statement -> statement more_statement .)
    RBRACKET        reduce using rule 40 (more_statement -> statement more_statement .)


state 75

    (49) write -> WRITE LPAR . exp RPAR SEMICOLON
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    var_cte                        shift and go to state 71
    exp                            shift and go to state 100
    factor                         shift and go to state 70

state 76

    (61) arr_par -> LSQRTBRACKET . exp RSQRTBRACKET arr_par
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    var_cte                        shift and go to state 71
    exp                            shift and go to state 101
    factor                         shift and go to state 70

state 77

    (54) assignation -> ID arr_par . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 102


state 78

    (51) condition -> IF LPAR . expression RPAR block else_posible
    (63) expression -> . conc expression_aux
    (66) conc -> . exp conc_aux
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    expression                     shift and go to state 103
    conc                           shift and go to state 97
    var_cte                        shift and go to state 71
    exp                            shift and go to state 98
    factor                         shift and go to state 70

state 79

    (47) statement -> func_call SEMICOLON .

    READ            reduce using rule 47 (statement -> func_call SEMICOLON .)
    WRITE           reduce using rule 47 (statement -> func_call SEMICOLON .)
    WHILE           reduce using rule 47 (statement -> func_call SEMICOLON .)
    IF              reduce using rule 47 (statement -> func_call SEMICOLON .)
    ID              reduce using rule 47 (statement -> func_call SEMICOLON .)
    RBRACKET        reduce using rule 47 (statement -> func_call SEMICOLON .)
    RETURN          reduce using rule 47 (statement -> func_call SEMICOLON .)


state 80

    (93) main_block -> LBRACKET more_vars more_statement RBRACKET .

    $end            reduce using rule 93 (main_block -> LBRACKET more_vars more_statement RBRACKET .)


state 81

    (32) arguments -> var_type ID . to_args more_args
    (36) to_args -> .

    COMMA           reduce using rule 36 (to_args -> .)
    RPAR            reduce using rule 36 (to_args -> .)

    to_args                        shift and go to state 104

state 82

    (26) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR . func_block more_func
    (37) func_block -> . LBRACKET more_vars more_statement optional_return RBRACKET

    LBRACKET        shift and go to state 106

    func_block                     shift and go to state 105

state 83

    (75) factor -> LPAR add_to_pilaOptr . expression RPAR
    (63) expression -> . conc expression_aux
    (66) conc -> . exp conc_aux
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    conc                           shift and go to state 97
    var_cte                        shift and go to state 71
    exp                            shift and go to state 98
    factor                         shift and go to state 70
    expression                     shift and go to state 107

state 84

    (69) exp -> term exp_aux .

    COMMA           reduce using rule 69 (exp -> term exp_aux .)
    RPAR            reduce using rule 69 (exp -> term exp_aux .)
    GREATER         reduce using rule 69 (exp -> term exp_aux .)
    LESS            reduce using rule 69 (exp -> term exp_aux .)
    GREATEROREQUAL  reduce using rule 69 (exp -> term exp_aux .)
    LESSOREQUAL     reduce using rule 69 (exp -> term exp_aux .)
    EQUALEQUALS     reduce using rule 69 (exp -> term exp_aux .)
    DIFFERENT       reduce using rule 69 (exp -> term exp_aux .)
    AND             reduce using rule 69 (exp -> term exp_aux .)
    OR              reduce using rule 69 (exp -> term exp_aux .)
    SEMICOLON       reduce using rule 69 (exp -> term exp_aux .)
    RSQRTBRACKET    reduce using rule 69 (exp -> term exp_aux .)


state 85

    (85) pl -> PLUS .

    LPAR            reduce using rule 85 (pl -> PLUS .)
    CTEINT          reduce using rule 85 (pl -> PLUS .)
    CTEDOUBLE       reduce using rule 85 (pl -> PLUS .)
    CTEBOOL         reduce using rule 85 (pl -> PLUS .)
    ID              reduce using rule 85 (pl -> PLUS .)


state 86

    (86) pl -> MINUS .

    LPAR            reduce using rule 86 (pl -> MINUS .)
    CTEINT          reduce using rule 86 (pl -> MINUS .)
    CTEDOUBLE       reduce using rule 86 (pl -> MINUS .)
    CTEBOOL         reduce using rule 86 (pl -> MINUS .)
    ID              reduce using rule 86 (pl -> MINUS .)


state 87

    (70) exp_aux -> pl . add_to_pilaOptr term exp_aux
    (87) add_to_pilaOptr -> .

    LPAR            reduce using rule 87 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 87 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 87 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 87 (add_to_pilaOptr -> .)
    ID              reduce using rule 87 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 108

state 88

    (55) func_call -> ID LPAR params RPAR .

    SEMICOLON       reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    MULTIPLICATION  reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    DIVISION        reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    MOD             reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    PLUS            reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    MINUS           reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    AND             reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    OR              reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    RPAR            reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    COMMA           reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    GREATER         reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    LESS            reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    GREATEROREQUAL  reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    LESSOREQUAL     reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    EQUALEQUALS     reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    DIFFERENT       reduce using rule 55 (func_call -> ID LPAR params RPAR .)
    RSQRTBRACKET    reduce using rule 55 (func_call -> ID LPAR params RPAR .)


state 89

    (56) params -> exp more_params .

    RPAR            reduce using rule 56 (params -> exp more_params .)


state 90

    (58) more_params -> COMMA . exp more_params
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    var_cte                        shift and go to state 71
    exp                            shift and go to state 109
    factor                         shift and go to state 70

state 91

    (89) dm -> DIVISION .

    LPAR            reduce using rule 89 (dm -> DIVISION .)
    CTEINT          reduce using rule 89 (dm -> DIVISION .)
    CTEDOUBLE       reduce using rule 89 (dm -> DIVISION .)
    CTEBOOL         reduce using rule 89 (dm -> DIVISION .)
    ID              reduce using rule 89 (dm -> DIVISION .)


state 92

    (73) term_aux -> dm . add_to_pilaOptr factor term_aux
    (87) add_to_pilaOptr -> .

    LPAR            reduce using rule 87 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 87 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 87 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 87 (add_to_pilaOptr -> .)
    ID              reduce using rule 87 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 110

state 93

    (72) term -> factor term_aux .

    PLUS            reduce using rule 72 (term -> factor term_aux .)
    MINUS           reduce using rule 72 (term -> factor term_aux .)
    RPAR            reduce using rule 72 (term -> factor term_aux .)
    GREATER         reduce using rule 72 (term -> factor term_aux .)
    LESS            reduce using rule 72 (term -> factor term_aux .)
    GREATEROREQUAL  reduce using rule 72 (term -> factor term_aux .)
    LESSOREQUAL     reduce using rule 72 (term -> factor term_aux .)
    EQUALEQUALS     reduce using rule 72 (term -> factor term_aux .)
    DIFFERENT       reduce using rule 72 (term -> factor term_aux .)
    AND             reduce using rule 72 (term -> factor term_aux .)
    OR              reduce using rule 72 (term -> factor term_aux .)
    SEMICOLON       reduce using rule 72 (term -> factor term_aux .)
    COMMA           reduce using rule 72 (term -> factor term_aux .)
    RSQRTBRACKET    reduce using rule 72 (term -> factor term_aux .)


state 94

    (88) dm -> MULTIPLICATION .

    LPAR            reduce using rule 88 (dm -> MULTIPLICATION .)
    CTEINT          reduce using rule 88 (dm -> MULTIPLICATION .)
    CTEDOUBLE       reduce using rule 88 (dm -> MULTIPLICATION .)
    CTEBOOL         reduce using rule 88 (dm -> MULTIPLICATION .)
    ID              reduce using rule 88 (dm -> MULTIPLICATION .)


state 95

    (90) dm -> MOD .

    LPAR            reduce using rule 90 (dm -> MOD .)
    CTEINT          reduce using rule 90 (dm -> MOD .)
    CTEDOUBLE       reduce using rule 90 (dm -> MOD .)
    CTEBOOL         reduce using rule 90 (dm -> MOD .)
    ID              reduce using rule 90 (dm -> MOD .)


state 96

    (48) read -> READ LPAR ID . arr_par RPAR SEMICOLON
    (61) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (62) arr_par -> .

    LSQRTBRACKET    shift and go to state 76
    RPAR            reduce using rule 62 (arr_par -> .)

    arr_par                        shift and go to state 111

state 97

    (63) expression -> conc . expression_aux
    (64) expression_aux -> . ao add_to_pilaOptr conc expression_aux
    (65) expression_aux -> .
    (77) ao -> . AND
    (78) ao -> . OR

    RPAR            reduce using rule 65 (expression_aux -> .)
    SEMICOLON       reduce using rule 65 (expression_aux -> .)
    AND             shift and go to state 112
    OR              shift and go to state 115

    expression_aux                 shift and go to state 114
    ao                             shift and go to state 113

state 98

    (66) conc -> exp . conc_aux
    (67) conc_aux -> . comp add_to_pilaOptr exp
    (68) conc_aux -> .
    (79) comp -> . GREATER
    (80) comp -> . LESS
    (81) comp -> . GREATEROREQUAL
    (82) comp -> . LESSOREQUAL
    (83) comp -> . EQUALEQUALS
    (84) comp -> . DIFFERENT

    AND             reduce using rule 68 (conc_aux -> .)
    OR              reduce using rule 68 (conc_aux -> .)
    RPAR            reduce using rule 68 (conc_aux -> .)
    SEMICOLON       reduce using rule 68 (conc_aux -> .)
    GREATER         shift and go to state 118
    LESS            shift and go to state 119
    GREATEROREQUAL  shift and go to state 122
    LESSOREQUAL     shift and go to state 117
    EQUALEQUALS     shift and go to state 120
    DIFFERENT       shift and go to state 116

    conc_aux                       shift and go to state 123
    comp                           shift and go to state 121

state 99

    (50) cicle -> WHILE LPAR expression . RPAR block

    RPAR            shift and go to state 124


state 100

    (49) write -> WRITE LPAR exp . RPAR SEMICOLON

    RPAR            shift and go to state 125


state 101

    (61) arr_par -> LSQRTBRACKET exp . RSQRTBRACKET arr_par

    RSQRTBRACKET    shift and go to state 126


state 102

    (54) assignation -> ID arr_par EQUALS . expression SEMICOLON
    (63) expression -> . conc expression_aux
    (66) conc -> . exp conc_aux
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    conc                           shift and go to state 97
    var_cte                        shift and go to state 71
    exp                            shift and go to state 98
    factor                         shift and go to state 70
    expression                     shift and go to state 127

state 103

    (51) condition -> IF LPAR expression . RPAR block else_posible

    RPAR            shift and go to state 128


state 104

    (32) arguments -> var_type ID to_args . more_args
    (34) more_args -> . COMMA var_type ID to_args more_args
    (35) more_args -> .

    COMMA           shift and go to state 130
    RPAR            reduce using rule 35 (more_args -> .)

    more_args                      shift and go to state 129

state 105

    (26) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block . more_func
    (24) more_func -> . func
    (25) more_func -> .
    (26) func -> . FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func

    MAIN            reduce using rule 25 (more_func -> .)
    FUNC            shift and go to state 12

    func                           shift and go to state 10
    more_func                      shift and go to state 131

state 106

    (37) func_block -> LBRACKET . more_vars more_statement optional_return RBRACKET
    (2) more_vars -> . vars
    (3) more_vars -> .
    (4) vars -> . var_type vars_aux SEMICOLON more_vars
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    READ            reduce using rule 3 (more_vars -> .)
    WRITE           reduce using rule 3 (more_vars -> .)
    WHILE           reduce using rule 3 (more_vars -> .)
    IF              reduce using rule 3 (more_vars -> .)
    ID              reduce using rule 3 (more_vars -> .)
    RETURN          reduce using rule 3 (more_vars -> .)
    RBRACKET        reduce using rule 3 (more_vars -> .)
    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 2
    vars                           shift and go to state 1
    more_vars                      shift and go to state 132

state 107

    (75) factor -> LPAR add_to_pilaOptr expression . RPAR

    RPAR            shift and go to state 133


state 108

    (70) exp_aux -> pl add_to_pilaOptr . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 134
    var_cte                        shift and go to state 71
    factor                         shift and go to state 70

state 109

    (58) more_params -> COMMA exp . more_params
    (58) more_params -> . COMMA exp more_params
    (59) more_params -> .

    COMMA           shift and go to state 90
    RPAR            reduce using rule 59 (more_params -> .)

    more_params                    shift and go to state 135

state 110

    (73) term_aux -> dm add_to_pilaOptr . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    var_cte                        shift and go to state 71
    factor                         shift and go to state 136

state 111

    (48) read -> READ LPAR ID arr_par . RPAR SEMICOLON

    RPAR            shift and go to state 137


state 112

    (77) ao -> AND .

    LPAR            reduce using rule 77 (ao -> AND .)
    CTEINT          reduce using rule 77 (ao -> AND .)
    CTEDOUBLE       reduce using rule 77 (ao -> AND .)
    CTEBOOL         reduce using rule 77 (ao -> AND .)
    ID              reduce using rule 77 (ao -> AND .)


state 113

    (64) expression_aux -> ao . add_to_pilaOptr conc expression_aux
    (87) add_to_pilaOptr -> .

    LPAR            reduce using rule 87 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 87 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 87 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 87 (add_to_pilaOptr -> .)
    ID              reduce using rule 87 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 138

state 114

    (63) expression -> conc expression_aux .

    RPAR            reduce using rule 63 (expression -> conc expression_aux .)
    SEMICOLON       reduce using rule 63 (expression -> conc expression_aux .)


state 115

    (78) ao -> OR .

    LPAR            reduce using rule 78 (ao -> OR .)
    CTEINT          reduce using rule 78 (ao -> OR .)
    CTEDOUBLE       reduce using rule 78 (ao -> OR .)
    CTEBOOL         reduce using rule 78 (ao -> OR .)
    ID              reduce using rule 78 (ao -> OR .)


state 116

    (84) comp -> DIFFERENT .

    LPAR            reduce using rule 84 (comp -> DIFFERENT .)
    CTEINT          reduce using rule 84 (comp -> DIFFERENT .)
    CTEDOUBLE       reduce using rule 84 (comp -> DIFFERENT .)
    CTEBOOL         reduce using rule 84 (comp -> DIFFERENT .)
    ID              reduce using rule 84 (comp -> DIFFERENT .)


state 117

    (82) comp -> LESSOREQUAL .

    LPAR            reduce using rule 82 (comp -> LESSOREQUAL .)
    CTEINT          reduce using rule 82 (comp -> LESSOREQUAL .)
    CTEDOUBLE       reduce using rule 82 (comp -> LESSOREQUAL .)
    CTEBOOL         reduce using rule 82 (comp -> LESSOREQUAL .)
    ID              reduce using rule 82 (comp -> LESSOREQUAL .)


state 118

    (79) comp -> GREATER .

    LPAR            reduce using rule 79 (comp -> GREATER .)
    CTEINT          reduce using rule 79 (comp -> GREATER .)
    CTEDOUBLE       reduce using rule 79 (comp -> GREATER .)
    CTEBOOL         reduce using rule 79 (comp -> GREATER .)
    ID              reduce using rule 79 (comp -> GREATER .)


state 119

    (80) comp -> LESS .

    LPAR            reduce using rule 80 (comp -> LESS .)
    CTEINT          reduce using rule 80 (comp -> LESS .)
    CTEDOUBLE       reduce using rule 80 (comp -> LESS .)
    CTEBOOL         reduce using rule 80 (comp -> LESS .)
    ID              reduce using rule 80 (comp -> LESS .)


state 120

    (83) comp -> EQUALEQUALS .

    LPAR            reduce using rule 83 (comp -> EQUALEQUALS .)
    CTEINT          reduce using rule 83 (comp -> EQUALEQUALS .)
    CTEDOUBLE       reduce using rule 83 (comp -> EQUALEQUALS .)
    CTEBOOL         reduce using rule 83 (comp -> EQUALEQUALS .)
    ID              reduce using rule 83 (comp -> EQUALEQUALS .)


state 121

    (67) conc_aux -> comp . add_to_pilaOptr exp
    (87) add_to_pilaOptr -> .

    LPAR            reduce using rule 87 (add_to_pilaOptr -> .)
    CTEINT          reduce using rule 87 (add_to_pilaOptr -> .)
    CTEDOUBLE       reduce using rule 87 (add_to_pilaOptr -> .)
    CTEBOOL         reduce using rule 87 (add_to_pilaOptr -> .)
    ID              reduce using rule 87 (add_to_pilaOptr -> .)

    add_to_pilaOptr                shift and go to state 139

state 122

    (81) comp -> GREATEROREQUAL .

    LPAR            reduce using rule 81 (comp -> GREATEROREQUAL .)
    CTEINT          reduce using rule 81 (comp -> GREATEROREQUAL .)
    CTEDOUBLE       reduce using rule 81 (comp -> GREATEROREQUAL .)
    CTEBOOL         reduce using rule 81 (comp -> GREATEROREQUAL .)
    ID              reduce using rule 81 (comp -> GREATEROREQUAL .)


state 123

    (66) conc -> exp conc_aux .

    AND             reduce using rule 66 (conc -> exp conc_aux .)
    OR              reduce using rule 66 (conc -> exp conc_aux .)
    RPAR            reduce using rule 66 (conc -> exp conc_aux .)
    SEMICOLON       reduce using rule 66 (conc -> exp conc_aux .)


state 124

    (50) cicle -> WHILE LPAR expression RPAR . block
    (60) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 140

    block                          shift and go to state 141

state 125

    (49) write -> WRITE LPAR exp RPAR . SEMICOLON

    SEMICOLON       shift and go to state 142


state 126

    (61) arr_par -> LSQRTBRACKET exp RSQRTBRACKET . arr_par
    (61) arr_par -> . LSQRTBRACKET exp RSQRTBRACKET arr_par
    (62) arr_par -> .

    LSQRTBRACKET    shift and go to state 76
    EQUALS          reduce using rule 62 (arr_par -> .)
    RPAR            reduce using rule 62 (arr_par -> .)

    arr_par                        shift and go to state 143

state 127

    (54) assignation -> ID arr_par EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 144


state 128

    (51) condition -> IF LPAR expression RPAR . block else_posible
    (60) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 140

    block                          shift and go to state 145

state 129

    (32) arguments -> var_type ID to_args more_args .

    RPAR            reduce using rule 32 (arguments -> var_type ID to_args more_args .)


state 130

    (34) more_args -> COMMA . var_type ID to_args more_args
    (5) var_type -> . BOOL
    (6) var_type -> . INT
    (7) var_type -> . DOUBLE

    BOOL            shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

    var_type                       shift and go to state 146

state 131

    (26) func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func .

    MAIN            reduce using rule 26 (func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func .)


state 132

    (37) func_block -> LBRACKET more_vars . more_statement optional_return RBRACKET
    (40) more_statement -> . statement more_statement
    (41) more_statement -> .
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . cicle
    (45) statement -> . condition
    (46) statement -> . assignation
    (47) statement -> . func_call SEMICOLON
    (48) read -> . READ LPAR ID arr_par RPAR SEMICOLON
    (49) write -> . WRITE LPAR exp RPAR SEMICOLON
    (50) cicle -> . WHILE LPAR expression RPAR block
    (51) condition -> . IF LPAR expression RPAR block else_posible
    (54) assignation -> . ID arr_par EQUALS expression SEMICOLON
    (55) func_call -> . ID LPAR params RPAR

    RETURN          reduce using rule 41 (more_statement -> .)
    RBRACKET        reduce using rule 41 (more_statement -> .)
    READ            shift and go to state 51
    WRITE           shift and go to state 57
    WHILE           shift and go to state 52
    IF              shift and go to state 60
    ID              shift and go to state 58

    func_call                      shift and go to state 61
    assignation                    shift and go to state 62
    read                           shift and go to state 56
    more_statement                 shift and go to state 147
    write                          shift and go to state 54
    condition                      shift and go to state 59
    statement                      shift and go to state 55
    cicle                          shift and go to state 53

state 133

    (75) factor -> LPAR add_to_pilaOptr expression RPAR .

    MULTIPLICATION  reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    DIVISION        reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    MOD             reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    PLUS            reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    MINUS           reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    COMMA           reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    RPAR            reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    GREATER         reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    LESS            reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    GREATEROREQUAL  reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    LESSOREQUAL     reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    EQUALEQUALS     reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    DIFFERENT       reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    AND             reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    OR              reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    RSQRTBRACKET    reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)
    SEMICOLON       reduce using rule 75 (factor -> LPAR add_to_pilaOptr expression RPAR .)


state 134

    (70) exp_aux -> pl add_to_pilaOptr term . exp_aux
    (70) exp_aux -> . pl add_to_pilaOptr term exp_aux
    (71) exp_aux -> .
    (85) pl -> . PLUS
    (86) pl -> . MINUS

    COMMA           reduce using rule 71 (exp_aux -> .)
    RPAR            reduce using rule 71 (exp_aux -> .)
    GREATER         reduce using rule 71 (exp_aux -> .)
    LESS            reduce using rule 71 (exp_aux -> .)
    GREATEROREQUAL  reduce using rule 71 (exp_aux -> .)
    LESSOREQUAL     reduce using rule 71 (exp_aux -> .)
    EQUALEQUALS     reduce using rule 71 (exp_aux -> .)
    DIFFERENT       reduce using rule 71 (exp_aux -> .)
    AND             reduce using rule 71 (exp_aux -> .)
    OR              reduce using rule 71 (exp_aux -> .)
    RSQRTBRACKET    reduce using rule 71 (exp_aux -> .)
    SEMICOLON       reduce using rule 71 (exp_aux -> .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    pl                             shift and go to state 87
    exp_aux                        shift and go to state 148

state 135

    (58) more_params -> COMMA exp more_params .

    RPAR            reduce using rule 58 (more_params -> COMMA exp more_params .)


state 136

    (73) term_aux -> dm add_to_pilaOptr factor . term_aux
    (73) term_aux -> . dm add_to_pilaOptr factor term_aux
    (74) term_aux -> .
    (88) dm -> . MULTIPLICATION
    (89) dm -> . DIVISION
    (90) dm -> . MOD

    PLUS            reduce using rule 74 (term_aux -> .)
    MINUS           reduce using rule 74 (term_aux -> .)
    COMMA           reduce using rule 74 (term_aux -> .)
    RPAR            reduce using rule 74 (term_aux -> .)
    GREATER         reduce using rule 74 (term_aux -> .)
    LESS            reduce using rule 74 (term_aux -> .)
    GREATEROREQUAL  reduce using rule 74 (term_aux -> .)
    LESSOREQUAL     reduce using rule 74 (term_aux -> .)
    EQUALEQUALS     reduce using rule 74 (term_aux -> .)
    DIFFERENT       reduce using rule 74 (term_aux -> .)
    AND             reduce using rule 74 (term_aux -> .)
    OR              reduce using rule 74 (term_aux -> .)
    RSQRTBRACKET    reduce using rule 74 (term_aux -> .)
    SEMICOLON       reduce using rule 74 (term_aux -> .)
    MULTIPLICATION  shift and go to state 94
    DIVISION        shift and go to state 91
    MOD             shift and go to state 95

    dm                             shift and go to state 92
    term_aux                       shift and go to state 149

state 137

    (48) read -> READ LPAR ID arr_par RPAR . SEMICOLON

    SEMICOLON       shift and go to state 150


state 138

    (64) expression_aux -> ao add_to_pilaOptr . conc expression_aux
    (66) conc -> . exp conc_aux
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    conc                           shift and go to state 151
    var_cte                        shift and go to state 71
    exp                            shift and go to state 98
    factor                         shift and go to state 70

state 139

    (67) conc_aux -> comp add_to_pilaOptr . exp
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    var_cte                        shift and go to state 71
    exp                            shift and go to state 152
    factor                         shift and go to state 70

state 140

    (60) block -> LBRACKET . more_statement RBRACKET
    (40) more_statement -> . statement more_statement
    (41) more_statement -> .
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . cicle
    (45) statement -> . condition
    (46) statement -> . assignation
    (47) statement -> . func_call SEMICOLON
    (48) read -> . READ LPAR ID arr_par RPAR SEMICOLON
    (49) write -> . WRITE LPAR exp RPAR SEMICOLON
    (50) cicle -> . WHILE LPAR expression RPAR block
    (51) condition -> . IF LPAR expression RPAR block else_posible
    (54) assignation -> . ID arr_par EQUALS expression SEMICOLON
    (55) func_call -> . ID LPAR params RPAR

    RBRACKET        reduce using rule 41 (more_statement -> .)
    READ            shift and go to state 51
    WRITE           shift and go to state 57
    WHILE           shift and go to state 52
    IF              shift and go to state 60
    ID              shift and go to state 58

    func_call                      shift and go to state 61
    assignation                    shift and go to state 62
    read                           shift and go to state 56
    cicle                          shift and go to state 53
    write                          shift and go to state 54
    statement                      shift and go to state 55
    more_statement                 shift and go to state 153
    condition                      shift and go to state 59

state 141

    (50) cicle -> WHILE LPAR expression RPAR block .

    READ            reduce using rule 50 (cicle -> WHILE LPAR expression RPAR block .)
    WRITE           reduce using rule 50 (cicle -> WHILE LPAR expression RPAR block .)
    WHILE           reduce using rule 50 (cicle -> WHILE LPAR expression RPAR block .)
    IF              reduce using rule 50 (cicle -> WHILE LPAR expression RPAR block .)
    ID              reduce using rule 50 (cicle -> WHILE LPAR expression RPAR block .)
    RBRACKET        reduce using rule 50 (cicle -> WHILE LPAR expression RPAR block .)
    RETURN          reduce using rule 50 (cicle -> WHILE LPAR expression RPAR block .)


state 142

    (49) write -> WRITE LPAR exp RPAR SEMICOLON .

    READ            reduce using rule 49 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    WRITE           reduce using rule 49 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    WHILE           reduce using rule 49 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    IF              reduce using rule 49 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    ID              reduce using rule 49 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    RBRACKET        reduce using rule 49 (write -> WRITE LPAR exp RPAR SEMICOLON .)
    RETURN          reduce using rule 49 (write -> WRITE LPAR exp RPAR SEMICOLON .)


state 143

    (61) arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .

    EQUALS          reduce using rule 61 (arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .)
    RPAR            reduce using rule 61 (arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par .)


state 144

    (54) assignation -> ID arr_par EQUALS expression SEMICOLON .

    READ            reduce using rule 54 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    WRITE           reduce using rule 54 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 54 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    IF              reduce using rule 54 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    ID              reduce using rule 54 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    RBRACKET        reduce using rule 54 (assignation -> ID arr_par EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 54 (assignation -> ID arr_par EQUALS expression SEMICOLON .)


state 145

    (51) condition -> IF LPAR expression RPAR block . else_posible
    (52) else_posible -> . ELSE block
    (53) else_posible -> .

    ELSE            shift and go to state 155
    READ            reduce using rule 53 (else_posible -> .)
    WRITE           reduce using rule 53 (else_posible -> .)
    WHILE           reduce using rule 53 (else_posible -> .)
    IF              reduce using rule 53 (else_posible -> .)
    ID              reduce using rule 53 (else_posible -> .)
    RBRACKET        reduce using rule 53 (else_posible -> .)
    RETURN          reduce using rule 53 (else_posible -> .)

    else_posible                   shift and go to state 154

state 146

    (34) more_args -> COMMA var_type . ID to_args more_args

    ID              shift and go to state 156


state 147

    (37) func_block -> LBRACKET more_vars more_statement . optional_return RBRACKET
    (38) optional_return -> . RETURN exp SEMICOLON
    (39) optional_return -> .

    RETURN          shift and go to state 157
    RBRACKET        reduce using rule 39 (optional_return -> .)

    optional_return                shift and go to state 158

state 148

    (70) exp_aux -> pl add_to_pilaOptr term exp_aux .

    COMMA           reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    RPAR            reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    GREATER         reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    LESS            reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    GREATEROREQUAL  reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    LESSOREQUAL     reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    EQUALEQUALS     reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    DIFFERENT       reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    AND             reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    OR              reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    RSQRTBRACKET    reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)
    SEMICOLON       reduce using rule 70 (exp_aux -> pl add_to_pilaOptr term exp_aux .)


state 149

    (73) term_aux -> dm add_to_pilaOptr factor term_aux .

    PLUS            reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    MINUS           reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    COMMA           reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    RPAR            reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    GREATER         reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    LESS            reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    GREATEROREQUAL  reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    LESSOREQUAL     reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    EQUALEQUALS     reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    DIFFERENT       reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    AND             reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    OR              reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    RSQRTBRACKET    reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)
    SEMICOLON       reduce using rule 73 (term_aux -> dm add_to_pilaOptr factor term_aux .)


state 150

    (48) read -> READ LPAR ID arr_par RPAR SEMICOLON .

    READ            reduce using rule 48 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    WRITE           reduce using rule 48 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    WHILE           reduce using rule 48 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    IF              reduce using rule 48 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    ID              reduce using rule 48 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    RBRACKET        reduce using rule 48 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)
    RETURN          reduce using rule 48 (read -> READ LPAR ID arr_par RPAR SEMICOLON .)


state 151

    (64) expression_aux -> ao add_to_pilaOptr conc . expression_aux
    (64) expression_aux -> . ao add_to_pilaOptr conc expression_aux
    (65) expression_aux -> .
    (77) ao -> . AND
    (78) ao -> . OR

    RPAR            reduce using rule 65 (expression_aux -> .)
    SEMICOLON       reduce using rule 65 (expression_aux -> .)
    AND             shift and go to state 112
    OR              shift and go to state 115

    expression_aux                 shift and go to state 159
    ao                             shift and go to state 113

state 152

    (67) conc_aux -> comp add_to_pilaOptr exp .

    AND             reduce using rule 67 (conc_aux -> comp add_to_pilaOptr exp .)
    OR              reduce using rule 67 (conc_aux -> comp add_to_pilaOptr exp .)
    RPAR            reduce using rule 67 (conc_aux -> comp add_to_pilaOptr exp .)
    SEMICOLON       reduce using rule 67 (conc_aux -> comp add_to_pilaOptr exp .)


state 153

    (60) block -> LBRACKET more_statement . RBRACKET

    RBRACKET        shift and go to state 160


state 154

    (51) condition -> IF LPAR expression RPAR block else_posible .

    READ            reduce using rule 51 (condition -> IF LPAR expression RPAR block else_posible .)
    WRITE           reduce using rule 51 (condition -> IF LPAR expression RPAR block else_posible .)
    WHILE           reduce using rule 51 (condition -> IF LPAR expression RPAR block else_posible .)
    IF              reduce using rule 51 (condition -> IF LPAR expression RPAR block else_posible .)
    ID              reduce using rule 51 (condition -> IF LPAR expression RPAR block else_posible .)
    RBRACKET        reduce using rule 51 (condition -> IF LPAR expression RPAR block else_posible .)
    RETURN          reduce using rule 51 (condition -> IF LPAR expression RPAR block else_posible .)


state 155

    (52) else_posible -> ELSE . block
    (60) block -> . LBRACKET more_statement RBRACKET

    LBRACKET        shift and go to state 140

    block                          shift and go to state 161

state 156

    (34) more_args -> COMMA var_type ID . to_args more_args
    (36) to_args -> .

    COMMA           reduce using rule 36 (to_args -> .)
    RPAR            reduce using rule 36 (to_args -> .)

    to_args                        shift and go to state 162

state 157

    (38) optional_return -> RETURN . exp SEMICOLON
    (69) exp -> . term exp_aux
    (72) term -> . factor term_aux
    (75) factor -> . LPAR add_to_pilaOptr expression RPAR
    (76) factor -> . var_cte
    (16) var_cte -> . CTEINT
    (17) var_cte -> . CTEDOUBLE
    (18) var_cte -> . CTEBOOL
    (19) var_cte -> . ID arr
    (20) var_cte -> . func_call
    (55) func_call -> . ID LPAR params RPAR

    LPAR            shift and go to state 66
    CTEINT          shift and go to state 40
    CTEDOUBLE       shift and go to state 37
    CTEBOOL         shift and go to state 39
    ID              shift and go to state 42

    func_call                      shift and go to state 38
    term                           shift and go to state 67
    var_cte                        shift and go to state 71
    exp                            shift and go to state 163
    factor                         shift and go to state 70

state 158

    (37) func_block -> LBRACKET more_vars more_statement optional_return . RBRACKET

    RBRACKET        shift and go to state 164


state 159

    (64) expression_aux -> ao add_to_pilaOptr conc expression_aux .

    RPAR            reduce using rule 64 (expression_aux -> ao add_to_pilaOptr conc expression_aux .)
    SEMICOLON       reduce using rule 64 (expression_aux -> ao add_to_pilaOptr conc expression_aux .)


state 160

    (60) block -> LBRACKET more_statement RBRACKET .

    READ            reduce using rule 60 (block -> LBRACKET more_statement RBRACKET .)
    WRITE           reduce using rule 60 (block -> LBRACKET more_statement RBRACKET .)
    WHILE           reduce using rule 60 (block -> LBRACKET more_statement RBRACKET .)
    IF              reduce using rule 60 (block -> LBRACKET more_statement RBRACKET .)
    ID              reduce using rule 60 (block -> LBRACKET more_statement RBRACKET .)
    RBRACKET        reduce using rule 60 (block -> LBRACKET more_statement RBRACKET .)
    RETURN          reduce using rule 60 (block -> LBRACKET more_statement RBRACKET .)
    ELSE            reduce using rule 60 (block -> LBRACKET more_statement RBRACKET .)


state 161

    (52) else_posible -> ELSE block .

    READ            reduce using rule 52 (else_posible -> ELSE block .)
    WRITE           reduce using rule 52 (else_posible -> ELSE block .)
    WHILE           reduce using rule 52 (else_posible -> ELSE block .)
    IF              reduce using rule 52 (else_posible -> ELSE block .)
    ID              reduce using rule 52 (else_posible -> ELSE block .)
    RBRACKET        reduce using rule 52 (else_posible -> ELSE block .)
    RETURN          reduce using rule 52 (else_posible -> ELSE block .)


state 162

    (34) more_args -> COMMA var_type ID to_args . more_args
    (34) more_args -> . COMMA var_type ID to_args more_args
    (35) more_args -> .

    COMMA           shift and go to state 130
    RPAR            reduce using rule 35 (more_args -> .)

    more_args                      shift and go to state 165

state 163

    (38) optional_return -> RETURN exp . SEMICOLON

    SEMICOLON       shift and go to state 166


state 164

    (37) func_block -> LBRACKET more_vars more_statement optional_return RBRACKET .

    FUNC            reduce using rule 37 (func_block -> LBRACKET more_vars more_statement optional_return RBRACKET .)
    MAIN            reduce using rule 37 (func_block -> LBRACKET more_vars more_statement optional_return RBRACKET .)


state 165

    (34) more_args -> COMMA var_type ID to_args more_args .

    RPAR            reduce using rule 34 (more_args -> COMMA var_type ID to_args more_args .)


state 166

    (38) optional_return -> RETURN exp SEMICOLON .

    RBRACKET        reduce using rule 38 (optional_return -> RETURN exp SEMICOLON .)

