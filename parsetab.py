
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PLUS MINUS MULTIPLICATION DIVISION MOD EQUALS EQUALEQUALS DIFFERENT GREATER LESS GREATEROREQUAL LESSOREQUAL AND OR LPAR RPAR LBRACKET RBRACKET LSQRTBRACKET RSQRTBRACKET COMMA SEMICOLON CTEINT CTEDOUBLE CTEBOOL ID FALSE READ VOID ELSE FUNC RETURN TRUE IF DOUBLE WRITE INT WHILE BOOL MAINprogram : more_vars more_func mainmore_vars : vars\n\t\t\t|vars : var_type vars_aux SEMICOLON more_varsvar_type : BOOL\n\t\t\t| INT\n\t\t\t| DOUBLEvars_aux : ID arr to_var_table var_assign more_vars_auxto_var_table :var_assign : EQUALS var_cte\n\t\t\t|more_vars_aux : COMMA vars_aux\n\t\t\t|arr : LSQRTBRACKET const RSQRTBRACKET arr\n\t\t\t|var_cte : CTEINT\n\t\t\t| CTEDOUBLE\n\t\t\t| CTEBOOL\n\t\t\t| ID arr\n\t\t\t| func_callconst : CTEINT\n\t\t\t| CTEDOUBLE\n\t\t\t| CTEBOOLmore_func : func\n\t\t\t|func : FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_functo_proc_dir :func_type : VOID \n\t\t\t| BOOL\n\t\t\t| INT\n\t\t\t| DOUBLEarguments : var_type ID to_args more_args\n\t\t\t|more_args : COMMA var_type ID to_args more_args\n\t\t\t|to_args :func_block : LBRACKET more_vars more_statement optional_return RBRACKEToptional_return : RETURN exp SEMICOLON\n\t\t\t|more_statement : statement more_statement\n\t\t\t|statement : read\n\t\t| write\n\t\t| cicle\n\t\t| condition\n\t\t| assignation\n\t\t| func_call SEMICOLONread : READ LPAR ID arr_par RPAR SEMICOLONwrite : WRITE LPAR exp RPAR SEMICOLONcicle : WHILE LPAR expression RPAR blockcondition : IF LPAR expression RPAR block else_posibleelse_posible : ELSE block\n\t\t\t|assignation : ID arr_par EQUALS expression SEMICOLONfunc_call : ID LPAR params RPARparams : exp more_params\n\t\t\t|more_params : COMMA exp more_params\n\t\t\t|block : LBRACKET more_statement RBRACKETarr_par : LSQRTBRACKET exp RSQRTBRACKET arr_par\n\t\t\t|expression : conc expression_auxexpression_aux : ao add_to_pilaOptr conc expression_aux\n\t\t\t|conc : exp conc_auxconc_aux : comp add_to_pilaOptr exp\n\t\t\t\t|exp : term exp_auxexp_aux : pl add_to_pilaOptr term exp_aux\n\t\t\t|term : factor term_auxterm_aux : dm add_to_pilaOptr factor term_aux\n\t\t\t|factor : LPAR add_to_pilaOptr expression RPAR\n\t\t\t| var_cteao : AND\n\t\t\t| ORcomp : GREATER\n\t\t\t| LESS\n\t\t\t| GREATEROREQUAL\n\t\t\t| LESSOREQUAL\n\t\t\t| EQUALEQUALS\n\t\t\t| DIFFERENTpl : PLUS\n\t\t\t| MINUSadd_to_pilaOptr :dm : MULTIPLICATION\n\t\t\t| DIVISION\n\t\t\t| MODmain : MAIN main_to_proc_dir main_blockmain_to_proc_dir :main_block : LBRACKET more_vars more_statement RBRACKET'
    
_lr_action_items = {'CTEDOUBLE':([15,31,48,66,73,75,76,78,83,85,86,87,90,91,92,94,95,102,108,110,112,113,115,116,117,118,119,120,121,122,138,139,157,],[25,37,37,-87,37,37,37,37,37,-85,-86,-87,37,-89,-87,-88,-90,37,37,37,-77,-87,-78,-84,-82,-79,-80,-83,-87,-81,37,37,37,]),'LPAR':([30,36,42,48,51,52,57,58,60,66,73,75,76,78,83,85,86,87,90,91,92,94,95,102,108,110,112,113,115,116,117,118,119,120,121,122,138,139,157,],[-27,47,48,66,72,73,75,48,78,-87,66,66,66,66,66,-85,-86,-87,66,-89,-87,-88,-90,66,66,66,-77,-87,-78,-84,-82,-79,-80,-83,-87,-81,66,66,66,]),'RETURN':([1,13,23,53,54,55,56,59,62,74,79,106,132,141,142,144,145,147,150,154,160,161,],[-2,-3,-4,-44,-43,-41,-42,-45,-46,-40,-47,-3,-41,-50,-49,-54,-53,157,-48,-51,-60,-52,]),'LESS':([33,37,38,39,40,42,45,49,67,70,71,84,88,93,98,133,134,136,148,149,],[-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,119,-75,-71,-74,-70,-73,]),'READ':([1,13,23,35,46,53,54,55,56,59,62,79,106,132,140,141,142,144,145,150,154,160,161,],[-2,-3,-4,-3,51,-44,-43,51,-42,-45,-46,-47,-3,51,51,-50,-49,-54,-53,-48,-51,-60,-52,]),'VOID':([12,],[20,]),'RPAR':([33,37,38,39,40,42,45,47,48,49,65,67,68,69,70,71,81,84,88,89,93,96,97,98,99,100,103,104,107,109,111,114,123,126,129,133,134,135,136,143,148,149,151,152,156,159,162,165,],[-15,-17,-20,-18,-16,-15,-14,-33,-57,-19,82,-71,88,-59,-74,-76,-36,-69,-55,-56,-72,-62,-65,-68,124,125,128,-35,133,-59,137,-63,-66,-62,-32,-75,-71,-58,-74,-61,-70,-73,-65,-67,-36,-64,-35,-34,]),'LBRACKET':([17,29,82,124,128,155,],[-92,35,106,140,140,140,]),'WHILE':([1,13,23,35,46,53,54,55,56,59,62,79,106,132,140,141,142,144,145,150,154,160,161,],[-2,-3,-4,-3,52,-44,-43,52,-42,-45,-46,-47,-3,52,52,-50,-49,-54,-53,-48,-51,-60,-52,]),'MULTIPLICATION':([33,37,38,39,40,42,45,49,70,71,88,133,136,],[-15,-17,-20,-18,-16,-15,-14,-19,94,-76,-55,-75,94,]),'MINUS':([33,37,38,39,40,42,45,49,67,70,71,88,93,133,134,136,149,],[-15,-17,-20,-18,-16,-15,-14,-19,86,-74,-76,-55,-72,-75,86,-74,-73,]),'SEMICOLON':([8,9,14,24,32,33,37,38,39,40,41,42,43,45,49,50,61,67,70,71,84,88,93,97,98,114,123,125,127,133,134,136,137,148,149,151,152,159,163,],[13,-15,-9,-11,-13,-15,-17,-20,-18,-16,-10,-15,-8,-14,-19,-12,79,-71,-74,-76,-69,-55,-72,-65,-68,-63,-66,142,144,-75,-71,-74,150,-70,-73,-65,-67,-64,166,]),'PLUS':([33,37,38,39,40,42,45,49,67,70,71,88,93,133,134,136,149,],[-15,-17,-20,-18,-16,-15,-14,-19,85,-74,-76,-55,-72,-75,85,-74,-73,]),'COMMA':([9,14,24,32,33,37,38,39,40,41,42,45,49,67,69,70,71,81,84,88,93,104,109,133,134,136,148,149,156,162,],[-15,-9,-11,44,-15,-17,-20,-18,-16,-10,-15,-14,-19,-71,90,-74,-76,-36,-69,-55,-72,130,90,-75,-71,-74,-70,-73,-36,130,]),'RSQRTBRACKET':([25,26,27,28,33,37,38,39,40,42,45,49,67,70,71,84,88,93,101,133,134,136,148,149,],[-22,33,-23,-21,-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,126,-75,-71,-74,-70,-73,]),'$end':([5,16,34,80,],[0,-1,-91,-93,]),'DIVISION':([33,37,38,39,40,42,45,49,70,71,88,133,136,],[-15,-17,-20,-18,-16,-15,-14,-19,91,-76,-55,-75,91,]),'DIFFERENT':([33,37,38,39,40,42,45,49,67,70,71,84,88,93,98,133,134,136,148,149,],[-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,116,-75,-71,-74,-70,-73,]),'LESSOREQUAL':([33,37,38,39,40,42,45,49,67,70,71,84,88,93,98,133,134,136,148,149,],[-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,117,-75,-71,-74,-70,-73,]),'EQUALEQUALS':([33,37,38,39,40,42,45,49,67,70,71,84,88,93,98,133,134,136,148,149,],[-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,120,-75,-71,-74,-70,-73,]),'CTEINT':([15,31,48,66,73,75,76,78,83,85,86,87,90,91,92,94,95,102,108,110,112,113,115,116,117,118,119,120,121,122,138,139,157,],[28,40,40,-87,40,40,40,40,40,-85,-86,-87,40,-89,-87,-88,-90,40,40,40,-77,-87,-78,-84,-82,-79,-80,-83,-87,-81,40,40,40,]),'EQUALS':([9,14,24,33,45,58,77,126,143,],[-15,-9,31,-15,-14,-62,102,-62,-61,]),'ELSE':([145,160,],[155,-60,]),'WRITE':([1,13,23,35,46,53,54,55,56,59,62,79,106,132,140,141,142,144,145,150,154,160,161,],[-2,-3,-4,-3,57,-44,-43,57,-42,-45,-46,-47,-3,57,57,-50,-49,-54,-53,-48,-51,-60,-52,]),'FUNC':([0,1,7,13,23,105,164,],[-3,-2,12,-3,-4,12,-37,]),'ID':([1,2,3,4,6,13,18,19,20,21,22,23,31,35,44,46,48,53,54,55,56,59,62,64,66,72,73,75,76,78,79,83,85,86,87,90,91,92,94,95,102,106,108,110,112,113,115,116,117,118,119,120,121,122,132,138,139,140,141,142,144,145,146,150,154,157,160,161,],[-2,9,-6,-7,-5,-3,30,-31,-28,-30,-29,-4,42,-3,9,58,42,-44,-43,58,-42,-45,-46,81,-87,96,42,42,42,42,-47,42,-85,-86,-87,42,-89,-87,-88,-90,42,-3,42,42,-77,-87,-78,-84,-82,-79,-80,-83,-87,-81,58,42,42,58,-50,-49,-54,-53,156,-48,-51,42,-60,-52,]),'IF':([1,13,23,35,46,53,54,55,56,59,62,79,106,132,140,141,142,144,145,150,154,160,161,],[-2,-3,-4,-3,60,-44,-43,60,-42,-45,-46,-47,-3,60,60,-50,-49,-54,-53,-48,-51,-60,-52,]),'AND':([33,37,38,39,40,42,45,49,67,70,71,84,88,93,97,98,123,133,134,136,148,149,151,152,],[-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,112,-68,-66,-75,-71,-74,-70,-73,112,-67,]),'GREATER':([33,37,38,39,40,42,45,49,67,70,71,84,88,93,98,133,134,136,148,149,],[-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,118,-75,-71,-74,-70,-73,]),'INT':([0,12,13,35,47,106,130,],[3,21,3,3,3,3,3,]),'DOUBLE':([0,12,13,35,47,106,130,],[4,19,4,4,4,4,4,]),'LSQRTBRACKET':([9,33,42,58,96,126,],[15,15,15,76,76,76,]),'BOOL':([0,12,13,35,47,106,130,],[6,22,6,6,6,6,6,]),'GREATEROREQUAL':([33,37,38,39,40,42,45,49,67,70,71,84,88,93,98,133,134,136,148,149,],[-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,122,-75,-71,-74,-70,-73,]),'CTEBOOL':([15,31,48,66,73,75,76,78,83,85,86,87,90,91,92,94,95,102,108,110,112,113,115,116,117,118,119,120,121,122,138,139,157,],[27,39,39,-87,39,39,39,39,39,-85,-86,-87,39,-89,-87,-88,-90,39,39,39,-77,-87,-78,-84,-82,-79,-80,-83,-87,-81,39,39,39,]),'RBRACKET':([1,13,23,35,46,53,54,55,56,59,62,63,74,79,106,132,140,141,142,144,145,147,150,153,154,158,160,161,166,],[-2,-3,-4,-3,-41,-44,-43,-41,-42,-45,-46,80,-40,-47,-3,-41,-41,-50,-49,-54,-53,-39,-48,160,-51,164,-60,-52,-38,]),'MAIN':([0,1,7,10,11,13,23,105,131,164,],[-3,-2,-25,-24,17,-3,-4,-25,-26,-37,]),'OR':([33,37,38,39,40,42,45,49,67,70,71,84,88,93,97,98,123,133,134,136,148,149,151,152,],[-15,-17,-20,-18,-16,-15,-14,-19,-71,-74,-76,-69,-55,-72,115,-68,-66,-75,-71,-74,-70,-73,115,-67,]),'MOD':([33,37,38,39,40,42,45,49,70,71,88,133,136,],[-15,-17,-20,-18,-16,-15,-14,-19,95,-76,-55,-75,95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'more_args':([104,162,],[129,165,]),'arr':([9,33,42,],[14,45,49,]),'optional_return':([147,],[158,]),'var_type':([0,13,35,47,106,130,],[2,2,2,64,2,146,]),'main_block':([29,],[34,]),'expression_aux':([97,151,],[114,159,]),'var_cte':([31,48,73,75,76,78,83,90,102,108,110,138,139,157,],[41,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'vars_aux':([2,44,],[8,50,]),'arr_par':([58,96,126,],[77,111,143,]),'conc':([73,78,83,102,138,],[97,97,97,97,151,]),'conc_aux':([98,],[123,]),'more_vars':([0,13,35,106,],[7,23,46,132,]),'const':([15,],[26,]),'vars':([0,13,35,106,],[1,1,1,1,]),'cicle':([46,55,132,140,],[53,53,53,53,]),'write':([46,55,132,140,],[54,54,54,54,]),'read':([46,55,132,140,],[56,56,56,56,]),'program':([0,],[5,]),'more_func':([7,105,],[11,131,]),'arguments':([47,],[65,]),'statement':([46,55,132,140,],[55,55,55,55,]),'factor':([48,73,75,76,78,83,90,102,108,110,138,139,157,],[70,70,70,70,70,70,70,70,70,136,70,70,70,]),'main_to_proc_dir':([17,],[29,]),'params':([48,],[68,]),'var_assign':([24,],[32,]),'to_proc_dir':([30,],[36,]),'add_to_pilaOptr':([66,87,92,113,121,],[83,108,110,138,139,]),'dm':([70,136,],[92,92,]),'to_args':([81,156,],[104,162,]),'func_type':([12,],[18,]),'comp':([98,],[121,]),'ao':([97,151,],[113,113,]),'func':([7,105,],[10,10,]),'condition':([46,55,132,140,],[59,59,59,59,]),'term_aux':([70,136,],[93,149,]),'func_call':([31,46,48,55,73,75,76,78,83,90,102,108,110,132,138,139,140,157,],[38,61,38,61,38,38,38,38,38,38,38,38,38,61,38,38,61,38,]),'term':([48,73,75,76,78,83,90,102,108,138,139,157,],[67,67,67,67,67,67,67,67,134,67,67,67,]),'main':([11,],[16,]),'assignation':([46,55,132,140,],[62,62,62,62,]),'func_block':([82,],[105,]),'else_posible':([145,],[154,]),'more_statement':([46,55,132,140,],[63,74,147,153,]),'to_var_table':([14,],[24,]),'more_vars_aux':([32,],[43,]),'more_params':([69,109,],[89,135,]),'pl':([67,134,],[87,87,]),'exp':([48,73,75,76,78,83,90,102,138,139,157,],[69,98,100,101,98,98,109,98,98,152,163,]),'expression':([73,78,83,102,],[99,103,107,127,]),'exp_aux':([67,134,],[84,148,]),'block':([124,128,155,],[141,145,161,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> more_vars more_func main','program',3,'p_program','ObsidianParser.py',22),
  ('more_vars -> vars','more_vars',1,'p_more_vars','ObsidianParser.py',26),
  ('more_vars -> <empty>','more_vars',0,'p_more_vars','ObsidianParser.py',27),
  ('vars -> var_type vars_aux SEMICOLON more_vars','vars',4,'p_vars','ObsidianParser.py',30),
  ('var_type -> BOOL','var_type',1,'p_var_type','ObsidianParser.py',33),
  ('var_type -> INT','var_type',1,'p_var_type','ObsidianParser.py',34),
  ('var_type -> DOUBLE','var_type',1,'p_var_type','ObsidianParser.py',35),
  ('vars_aux -> ID arr to_var_table var_assign more_vars_aux','vars_aux',5,'p_vars_aux','ObsidianParser.py',40),
  ('to_var_table -> <empty>','to_var_table',0,'p_to_var_table','ObsidianParser.py',44),
  ('var_assign -> EQUALS var_cte','var_assign',2,'p_var_assign','ObsidianParser.py',54),
  ('var_assign -> <empty>','var_assign',0,'p_var_assign','ObsidianParser.py',55),
  ('more_vars_aux -> COMMA vars_aux','more_vars_aux',2,'p_more_vars_aux','ObsidianParser.py',58),
  ('more_vars_aux -> <empty>','more_vars_aux',0,'p_more_vars_aux','ObsidianParser.py',59),
  ('arr -> LSQRTBRACKET const RSQRTBRACKET arr','arr',4,'p_arr','ObsidianParser.py',62),
  ('arr -> <empty>','arr',0,'p_arr','ObsidianParser.py',63),
  ('var_cte -> CTEINT','var_cte',1,'p_var_cte','ObsidianParser.py',66),
  ('var_cte -> CTEDOUBLE','var_cte',1,'p_var_cte','ObsidianParser.py',67),
  ('var_cte -> CTEBOOL','var_cte',1,'p_var_cte','ObsidianParser.py',68),
  ('var_cte -> ID arr','var_cte',2,'p_var_cte','ObsidianParser.py',69),
  ('var_cte -> func_call','var_cte',1,'p_var_cte','ObsidianParser.py',70),
  ('const -> CTEINT','const',1,'p_const','ObsidianParser.py',74),
  ('const -> CTEDOUBLE','const',1,'p_const','ObsidianParser.py',75),
  ('const -> CTEBOOL','const',1,'p_const','ObsidianParser.py',76),
  ('more_func -> func','more_func',1,'p_more_func','ObsidianParser.py',79),
  ('more_func -> <empty>','more_func',0,'p_more_func','ObsidianParser.py',80),
  ('func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func','func',9,'p_func','ObsidianParser.py',83),
  ('to_proc_dir -> <empty>','to_proc_dir',0,'p_to_proc_dir','ObsidianParser.py',86),
  ('func_type -> VOID','func_type',1,'p_func_type','ObsidianParser.py',102),
  ('func_type -> BOOL','func_type',1,'p_func_type','ObsidianParser.py',103),
  ('func_type -> INT','func_type',1,'p_func_type','ObsidianParser.py',104),
  ('func_type -> DOUBLE','func_type',1,'p_func_type','ObsidianParser.py',105),
  ('arguments -> var_type ID to_args more_args','arguments',4,'p_arguments','ObsidianParser.py',109),
  ('arguments -> <empty>','arguments',0,'p_arguments','ObsidianParser.py',110),
  ('more_args -> COMMA var_type ID to_args more_args','more_args',5,'p_more_args','ObsidianParser.py',114),
  ('more_args -> <empty>','more_args',0,'p_more_args','ObsidianParser.py',115),
  ('to_args -> <empty>','to_args',0,'p_to_args','ObsidianParser.py',118),
  ('func_block -> LBRACKET more_vars more_statement optional_return RBRACKET','func_block',5,'p_func_block','ObsidianParser.py',130),
  ('optional_return -> RETURN exp SEMICOLON','optional_return',3,'p_optional_return','ObsidianParser.py',133),
  ('optional_return -> <empty>','optional_return',0,'p_optional_return','ObsidianParser.py',134),
  ('more_statement -> statement more_statement','more_statement',2,'p_more_statement','ObsidianParser.py',137),
  ('more_statement -> <empty>','more_statement',0,'p_more_statement','ObsidianParser.py',138),
  ('statement -> read','statement',1,'p_statement','ObsidianParser.py',141),
  ('statement -> write','statement',1,'p_statement','ObsidianParser.py',142),
  ('statement -> cicle','statement',1,'p_statement','ObsidianParser.py',143),
  ('statement -> condition','statement',1,'p_statement','ObsidianParser.py',144),
  ('statement -> assignation','statement',1,'p_statement','ObsidianParser.py',145),
  ('statement -> func_call SEMICOLON','statement',2,'p_statement','ObsidianParser.py',146),
  ('read -> READ LPAR ID arr_par RPAR SEMICOLON','read',6,'p_read','ObsidianParser.py',149),
  ('write -> WRITE LPAR exp RPAR SEMICOLON','write',5,'p_write','ObsidianParser.py',152),
  ('cicle -> WHILE LPAR expression RPAR block','cicle',5,'p_cicle','ObsidianParser.py',155),
  ('condition -> IF LPAR expression RPAR block else_posible','condition',6,'p_condition','ObsidianParser.py',158),
  ('else_posible -> ELSE block','else_posible',2,'p_else_posible','ObsidianParser.py',161),
  ('else_posible -> <empty>','else_posible',0,'p_else_posible','ObsidianParser.py',162),
  ('assignation -> ID arr_par EQUALS expression SEMICOLON','assignation',5,'p_assignation','ObsidianParser.py',165),
  ('func_call -> ID LPAR params RPAR','func_call',4,'p_func_call','ObsidianParser.py',168),
  ('params -> exp more_params','params',2,'p_params','ObsidianParser.py',171),
  ('params -> <empty>','params',0,'p_params','ObsidianParser.py',172),
  ('more_params -> COMMA exp more_params','more_params',3,'p_more_params','ObsidianParser.py',175),
  ('more_params -> <empty>','more_params',0,'p_more_params','ObsidianParser.py',176),
  ('block -> LBRACKET more_statement RBRACKET','block',3,'p_block','ObsidianParser.py',179),
  ('arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par','arr_par',4,'p_arr_par','ObsidianParser.py',182),
  ('arr_par -> <empty>','arr_par',0,'p_arr_par','ObsidianParser.py',183),
  ('expression -> conc expression_aux','expression',2,'p_expression','ObsidianParser.py',186),
  ('expression_aux -> ao add_to_pilaOptr conc expression_aux','expression_aux',4,'p_expression_aux','ObsidianParser.py',189),
  ('expression_aux -> <empty>','expression_aux',0,'p_expression_aux','ObsidianParser.py',190),
  ('conc -> exp conc_aux','conc',2,'p_conc','ObsidianParser.py',193),
  ('conc_aux -> comp add_to_pilaOptr exp','conc_aux',3,'p_conc_aux','ObsidianParser.py',196),
  ('conc_aux -> <empty>','conc_aux',0,'p_conc_aux','ObsidianParser.py',197),
  ('exp -> term exp_aux','exp',2,'p_exp','ObsidianParser.py',200),
  ('exp_aux -> pl add_to_pilaOptr term exp_aux','exp_aux',4,'p_exp_aux','ObsidianParser.py',203),
  ('exp_aux -> <empty>','exp_aux',0,'p_exp_aux','ObsidianParser.py',204),
  ('term -> factor term_aux','term',2,'p_term','ObsidianParser.py',207),
  ('term_aux -> dm add_to_pilaOptr factor term_aux','term_aux',4,'p_term_aux','ObsidianParser.py',210),
  ('term_aux -> <empty>','term_aux',0,'p_term_aux','ObsidianParser.py',211),
  ('factor -> LPAR add_to_pilaOptr expression RPAR','factor',4,'p_factor','ObsidianParser.py',214),
  ('factor -> var_cte','factor',1,'p_factor','ObsidianParser.py',215),
  ('ao -> AND','ao',1,'p_ao','ObsidianParser.py',218),
  ('ao -> OR','ao',1,'p_ao','ObsidianParser.py',219),
  ('comp -> GREATER','comp',1,'p_comp','ObsidianParser.py',223),
  ('comp -> LESS','comp',1,'p_comp','ObsidianParser.py',224),
  ('comp -> GREATEROREQUAL','comp',1,'p_comp','ObsidianParser.py',225),
  ('comp -> LESSOREQUAL','comp',1,'p_comp','ObsidianParser.py',226),
  ('comp -> EQUALEQUALS','comp',1,'p_comp','ObsidianParser.py',227),
  ('comp -> DIFFERENT','comp',1,'p_comp','ObsidianParser.py',228),
  ('pl -> PLUS','pl',1,'p_pl','ObsidianParser.py',232),
  ('pl -> MINUS','pl',1,'p_pl','ObsidianParser.py',233),
  ('add_to_pilaOptr -> <empty>','add_to_pilaOptr',0,'p_add_to_pilaOptr','ObsidianParser.py',237),
  ('dm -> MULTIPLICATION','dm',1,'p_dm','ObsidianParser.py',241),
  ('dm -> DIVISION','dm',1,'p_dm','ObsidianParser.py',242),
  ('dm -> MOD','dm',1,'p_dm','ObsidianParser.py',243),
  ('main -> MAIN main_to_proc_dir main_block','main',3,'p_main','ObsidianParser.py',247),
  ('main_to_proc_dir -> <empty>','main_to_proc_dir',0,'p_main_to_proc_dir','ObsidianParser.py',250),
  ('main_block -> LBRACKET more_vars more_statement RBRACKET','main_block',4,'p_main_block','ObsidianParser.py',256),
]
