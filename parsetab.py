
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PLUS MINUS MULTIPLICATION DIVISION MOD EQUALS EQUALEQUALS DIFFERENT GREATER LESS GREATEROREQUAL LESSOREQUAL AND OR LPAR RPAR LBRACKET RBRACKET LSQRTBRACKET RSQRTBRACKET COMMA SEMICOLON CTEINT CTEDOUBLE CTEBOOL ID RETURN READ VOID ELSE FUNC IF DOUBLE WRITE INT WHILE BOOL MAINprogram : gen_goto_main more_vars more_func maingen_goto_main :more_vars : vars\n\t\t\t|vars : var_type vars_aux SEMICOLON more_varsvar_type : BOOL\n\t\t\t| INT\n\t\t\t| DOUBLEvars_aux : ID to_var_table arr var_assign more_vars_auxto_var_table :var_assign : EQUALS var_cte\n\t\t\t|more_vars_aux : COMMA vars_aux\n\t\t\t|arr : LSQRTBRACKET const register_space RSQRTBRACKET\n\t\t\t|register_space :var_cte : const\n\t\t\t| ID arr\n\t\t\t| func_callconst : CTEINT\n\t\t\t| CTEDOUBLE\n\t\t\t| CTEBOOLmore_func : func\n\t\t\t|func : FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_functo_proc_dir :func_type : VOID \n\t\t\t| BOOL\n\t\t\t| INT\n\t\t\t| DOUBLEarguments : var_type ID to_args more_args\n\t\t\t|more_args : COMMA var_type ID to_args more_args\n\t\t\t|to_args :func_block : LBRACKET more_vars actual_quad_no more_statement gen_endproc_quad RBRACKETactual_quad_no :gen_endproc_quad :more_statement : statement more_statement\n\t\t\t|statement : read\n\t\t| write\n\t\t| return_stmt\n\t\t| cycle\n\t\t| condition\n\t\t| assignation\n\t\t| func_call SEMICOLONread : READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLONgen_read_quad :write : WRITE LPAR exp RPAR gen_write_quad SEMICOLONgen_write_quad :return_stmt : RETURN exp gen_return_quad SEMICOLONgen_return_quad :cycle : WHILE cycle_start LPAR expression RPAR check_type block cycle_endcycle_start :cycle_end :condition : IF LPAR expression RPAR check_type block else_posible fill_end_conditionelse_posible : ELSE gen_goto block\n\t\t\t|gen_goto :fill_end_condition :check_type :assignation : ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLONgen_assignation_quad :func_call : ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_subparams : exp check_args more_params\n\t\t\t|more_params : COMMA exp check_args more_params\n\t\t\t|check_args :is_valid_func :gen_era :gen_go_sub :block : LBRACKET more_statement RBRACKETarr_par : LSQRTBRACKET exp RSQRTBRACKET arr_par\n\t\t\t|expression : conc gen_conc_quad expression_auxexpression_aux : ao add_to_pilaOptr conc gen_conc_quad expression_aux\n\t\t\t|gen_conc_quad :conc : exp gen_comp_quad conc_auxconc_aux : comp add_to_pilaOptr exp gen_comp_quad\n\t\t\t\t|gen_comp_quad :exp : term gen_term_quad exp_auxexp_aux : pl add_to_pilaOptr term gen_term_quad exp_aux\n\t\t\t|gen_term_quad :term : factor gen_factor_quad term_auxterm_aux : dm add_to_pilaOptr factor gen_factor_quad term_aux\n\t\t\t|gen_factor_quad :factor : LPAR add_to_pilaOptr expression RPAR pop_false_bottom\n\t\t\t| var_cte to_pilaOpao : AND\n\t\t\t| ORcomp : GREATER\n\t\t\t| LESS\n\t\t\t| GREATEROREQUAL\n\t\t\t| LESSOREQUAL\n\t\t\t| EQUALEQUALS\n\t\t\t| DIFFERENTpl : PLUS\n\t\t\t| MINUSto_pilaOp :add_to_pilaOptr :push_false_bottom :pop_false_bottom :dm : MULTIPLICATION\n\t\t\t| DIVISION\n\t\t\t| MODmain : MAIN main_to_proc_dir main_blockmain_to_proc_dir :main_block : LBRACKET more_vars more_statement RBRACKET gen_end_quadgen_end_quad :'
    
_lr_action_items = {'CTEDOUBLE':([25,28,52,67,69,75,76,77,84,86,97,102,105,106,108,109,110,111,112,120,130,131,133,134,135,137,138,139,140,141,142,143,159,160,168,],[30,30,30,-73,-107,30,30,30,-108,30,30,30,-111,-107,-110,-112,-105,-104,-107,30,30,30,-96,-107,-97,-103,-101,-98,-99,-102,-107,-100,30,30,30,]),'LPAR':([27,36,40,47,50,52,55,57,58,63,67,69,75,76,77,80,84,86,97,102,105,106,108,109,110,111,112,120,130,131,133,134,135,137,138,139,140,141,142,143,159,160,168,],[-27,45,-72,67,68,69,75,76,-72,-56,-73,-107,69,69,69,97,-108,69,69,69,-111,-107,-110,-112,-105,-104,-107,69,69,69,-96,-107,-97,-103,-101,-98,-99,-102,-107,-100,69,69,69,]),'RETURN':([3,14,23,35,44,51,53,54,56,59,60,62,79,101,114,125,150,157,158,161,173,177,178,183,186,187,191,195,],[-3,-4,-5,-4,52,-44,-43,52,-42,-46,-45,-47,-48,-4,-53,-38,52,52,-60,-51,-62,-64,-57,-49,-75,-58,-55,-59,]),'LESS':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,93,107,113,117,129,154,155,156,166,170,171,181,184,185,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,-88,-85,-90,-86,140,-109,-94,-93,-89,-74,-92,-88,-66,-91,-87,]),'READ':([3,14,23,35,44,51,53,54,56,59,60,62,79,101,114,125,150,157,158,161,173,177,178,183,186,187,191,195,],[-3,-4,-5,-4,50,-44,-43,50,-42,-46,-45,-47,-48,-4,-53,-38,50,50,-60,-51,-62,-64,-57,-49,-75,-58,-55,-59,]),'VOID':([13,],[20,]),'RPAR':([30,32,33,37,38,40,45,46,49,66,67,70,71,72,82,84,85,87,88,89,91,92,93,94,99,102,103,104,107,113,116,117,119,121,122,126,127,128,129,136,144,146,151,152,154,155,156,164,166,167,170,171,175,176,179,181,182,184,185,189,190,192,194,196,197,],[-22,-23,-21,-20,-18,-16,-33,-19,-15,83,-73,-93,-106,-89,-36,-108,-77,-92,-95,-88,115,-81,-85,118,-35,-68,-106,129,-90,-86,-80,-84,-77,148,-32,-109,-71,153,-109,-78,-82,-76,166,-70,-94,-93,-89,-36,-74,-67,-92,-88,-81,-85,-35,-66,-71,-91,-87,-80,-83,-34,-70,-79,-69,]),'LBRACKET':([17,26,83,115,132,148,163,174,188,],[-114,35,101,-63,157,-63,157,-61,157,]),'WHILE':([3,14,23,35,44,51,53,54,56,59,60,62,79,101,114,125,150,157,158,161,173,177,178,183,186,187,191,195,],[-3,-4,-5,-4,63,-44,-43,63,-42,-46,-45,-47,-48,-4,-53,-38,63,63,-60,-51,-62,-64,-57,-49,-75,-58,-55,-59,]),'MULTIPLICATION':([30,32,33,37,38,40,46,49,70,71,87,88,129,154,155,166,170,181,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,108,-95,-109,-94,-93,-74,108,-66,]),'MINUS':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,107,129,154,155,156,166,170,171,181,184,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,110,-90,-109,-94,-93,-89,-74,-92,110,-66,-91,]),'RSQRTBRACKET':([30,31,32,33,37,38,40,43,46,49,70,71,72,87,88,89,95,107,113,129,154,155,156,166,170,171,181,184,185,],[-22,-17,-23,-21,-20,-18,-16,49,-19,-15,-93,-106,-89,-92,-95,-88,119,-90,-86,-109,-94,-93,-89,-74,-92,-88,-66,-91,-87,]),'SEMICOLON':([9,10,15,24,29,30,32,33,37,38,39,40,41,46,48,49,61,70,71,72,73,87,88,89,90,92,93,107,113,116,117,118,129,136,144,145,147,153,154,155,156,162,166,169,170,171,175,176,181,184,185,189,190,196,],[14,-10,-16,-12,-14,-22,-23,-21,-20,-18,-11,-16,-9,-19,-13,-15,79,-93,-106,-89,-54,-92,-95,-88,114,-81,-85,-90,-86,-80,-84,-52,-109,-78,-82,161,-65,-50,-94,-93,-89,177,-74,183,-92,-88,-81,-85,-66,-91,-87,-80,-83,-79,]),'COMMA':([10,15,24,29,30,32,33,37,38,39,40,46,49,70,71,72,82,87,88,89,99,107,113,127,129,152,154,155,156,164,166,170,171,179,181,182,184,185,194,],[-10,-16,-12,42,-22,-23,-21,-20,-18,-11,-16,-19,-15,-93,-106,-89,-36,-92,-95,-88,123,-90,-86,-71,-109,168,-94,-93,-89,-36,-74,-92,-88,123,-66,-71,-91,-87,168,]),'PLUS':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,107,129,154,155,156,166,170,171,181,184,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,111,-90,-109,-94,-93,-89,-74,-92,111,-66,-91,]),'$end':([2,16,34,81,98,],[0,-1,-113,-116,-115,]),'DIVISION':([30,32,33,37,38,40,46,49,70,71,87,88,129,154,155,166,170,181,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,105,-95,-109,-94,-93,-74,105,-66,]),'DIFFERENT':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,93,107,113,117,129,154,155,156,166,170,171,181,184,185,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,-88,-85,-90,-86,137,-109,-94,-93,-89,-74,-92,-88,-66,-91,-87,]),'LESSOREQUAL':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,93,107,113,117,129,154,155,156,166,170,171,181,184,185,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,-88,-85,-90,-86,138,-109,-94,-93,-89,-74,-92,-88,-66,-91,-87,]),'EQUALEQUALS':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,93,107,113,117,129,154,155,156,166,170,171,181,184,185,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,-88,-85,-90,-86,141,-109,-94,-93,-89,-74,-92,-88,-66,-91,-87,]),'CTEINT':([25,28,52,67,69,75,76,77,84,86,97,102,105,106,108,109,110,111,112,120,130,131,133,134,135,137,138,139,140,141,142,143,159,160,168,],[33,33,33,-73,-107,33,33,33,-108,33,33,33,-111,-107,-110,-112,-105,-104,-107,33,33,33,-96,-107,-97,-103,-101,-98,-99,-102,-107,-100,33,33,33,]),'EQUALS':([10,15,24,49,58,78,96,119,146,],[-10,-16,28,-15,-77,-106,120,-77,-76,]),'ELSE':([158,186,],[174,-75,]),'WRITE':([3,14,23,35,44,51,53,54,56,59,60,62,79,101,114,125,150,157,158,161,173,177,178,183,186,187,191,195,],[-3,-4,-5,-4,57,-44,-43,57,-42,-46,-45,-47,-48,-4,-53,-38,57,57,-60,-51,-62,-64,-57,-49,-75,-58,-55,-59,]),'FUNC':([0,1,3,8,14,23,100,193,],[-2,-4,-3,13,-4,-5,13,-37,]),'ID':([3,4,5,6,7,14,18,19,20,21,22,23,28,35,42,44,51,52,53,54,56,59,60,62,65,67,68,69,75,76,77,79,84,86,97,101,102,105,106,108,109,110,111,112,114,120,125,130,131,133,134,135,137,138,139,140,141,142,143,149,150,157,158,159,160,161,168,173,177,178,183,186,187,191,195,],[-3,10,-7,-8,-6,-4,27,-31,-28,-30,-29,-5,40,-4,10,58,-44,40,-43,58,-42,-46,-45,-47,82,-73,85,-107,40,40,40,-48,-108,40,40,-4,40,-111,-107,-110,-112,-105,-104,-107,-53,40,-38,40,40,-96,-107,-97,-103,-101,-98,-99,-102,-107,-100,164,58,58,-60,40,40,-51,40,-62,-64,-57,-49,-75,-58,-55,-59,]),'IF':([3,14,23,35,44,51,53,54,56,59,60,62,79,101,114,125,150,157,158,161,173,177,178,183,186,187,191,195,],[-3,-4,-5,-4,55,-44,-43,55,-42,-46,-45,-47,-48,-4,-53,-38,55,55,-60,-51,-62,-64,-57,-49,-75,-58,-55,-59,]),'AND':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,92,93,107,113,116,117,129,144,154,155,156,166,170,171,175,176,181,184,185,189,190,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,-88,-81,-85,-90,-86,133,-84,-109,-82,-94,-93,-89,-74,-92,-88,-81,-85,-66,-91,-87,133,-83,]),'GREATER':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,93,107,113,117,129,154,155,156,166,170,171,181,184,185,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,-88,-85,-90,-86,139,-109,-94,-93,-89,-74,-92,-88,-66,-91,-87,]),'INT':([0,1,13,14,35,45,101,123,],[-2,5,21,5,5,5,5,5,]),'DOUBLE':([0,1,13,14,35,45,101,123,],[-2,6,19,6,6,6,6,6,]),'LSQRTBRACKET':([10,15,40,58,85,119,],[-10,25,25,77,77,77,]),'BOOL':([0,1,13,14,35,45,101,123,],[-2,7,22,7,7,7,7,7,]),'GREATEROREQUAL':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,93,107,113,117,129,154,155,156,166,170,171,181,184,185,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,-88,-85,-90,-86,143,-109,-94,-93,-89,-74,-92,-88,-66,-91,-87,]),'CTEBOOL':([25,28,52,67,69,75,76,77,84,86,97,102,105,106,108,109,110,111,112,120,130,131,133,134,135,137,138,139,140,141,142,143,159,160,168,],[32,32,32,-73,-107,32,32,32,-108,32,32,32,-111,-107,-110,-112,-105,-104,-107,32,32,32,-96,-107,-97,-103,-101,-98,-99,-102,-107,-100,32,32,32,]),'RBRACKET':([3,14,23,35,44,51,53,54,56,59,60,62,64,74,79,101,114,125,150,157,158,161,165,172,173,177,178,180,183,186,187,191,195,],[-3,-4,-5,-4,-41,-44,-43,-41,-42,-46,-45,-47,81,-40,-48,-4,-53,-38,-41,-41,-60,-51,-39,186,-62,-64,-57,193,-49,-75,-58,-55,-59,]),'MAIN':([0,1,3,8,11,12,14,23,100,124,193,],[-2,-4,-3,-25,-24,17,-4,-5,-25,-26,-37,]),'OR':([30,32,33,37,38,40,46,49,70,71,72,87,88,89,92,93,107,113,116,117,129,144,154,155,156,166,170,171,175,176,181,184,185,189,190,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,-89,-92,-95,-88,-81,-85,-90,-86,135,-84,-109,-82,-94,-93,-89,-74,-92,-88,-81,-85,-66,-91,-87,135,-83,]),'MOD':([30,32,33,37,38,40,46,49,70,71,87,88,129,154,155,166,170,181,],[-22,-23,-21,-20,-18,-16,-19,-15,-93,-106,109,-95,-109,-94,-93,-74,109,-66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'more_args':([99,179,],[122,192,]),'else_posible':([158,],[173,]),'arr':([15,40,],[24,46,]),'gen_read_quad':([153,],[169,]),'check_type':([115,148,],[132,163,]),'var_type':([1,14,35,45,101,123,],[4,4,4,65,4,149,]),'main_block':([26,],[34,]),'gen_era':([67,],[84,]),'ao':([116,189,],[134,134,]),'var_cte':([28,52,75,76,77,86,97,102,120,130,131,159,160,168,],[39,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'vars_aux':([4,42,],[9,48,]),'arr_par':([58,85,119,],[78,103,146,]),'conc':([75,86,97,120,159,],[92,92,92,92,175,]),'return_stmt':([44,54,150,157,],[51,51,51,51,]),'conc_aux':([117,],[144,]),'is_valid_func':([40,58,],[47,47,]),'more_func':([8,100,],[12,124,]),'term_aux':([87,170,],[107,184,]),'cycle_start':([63,],[80,]),'const':([25,28,52,75,76,77,86,97,102,120,130,131,159,160,168,],[31,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'vars':([1,14,35,101,],[3,3,3,3,]),'gen_return_quad':([73,],[90,]),'cycle_end':([178,],[191,]),'gen_end_quad':([81,],[98,]),'gen_term_quad':([72,156,],[89,171,]),'more_vars':([1,14,35,101,],[8,23,44,125,]),'write':([44,54,150,157,],[53,53,53,53,]),'gen_goto_main':([0,],[1,]),'program':([0,],[2,]),'params':([102,],[126,]),'arguments':([45,],[66,]),'statement':([44,54,150,157,],[54,54,54,54,]),'factor':([52,75,76,77,86,97,102,120,130,131,159,160,168,],[70,70,70,70,70,70,70,70,155,70,70,70,70,]),'main_to_proc_dir':([17,],[26,]),'actual_quad_no':([125,],[150,]),'register_space':([31,],[43,]),'var_assign':([24,],[29,]),'to_proc_dir':([27,],[36,]),'add_to_pilaOptr':([69,106,112,134,142,],[86,130,131,159,160,]),'gen_conc_quad':([92,175,],[116,189,]),'dm':([87,170,],[106,106,]),'to_args':([82,164,],[99,179,]),'func_type':([13,],[18,]),'comp':([117,],[142,]),'gen_comp_quad':([93,176,],[117,190,]),'gen_factor_quad':([70,155,],[87,170,]),'check_args':([127,182,],[152,194,]),'fill_end_condition':([173,],[187,]),'gen_write_quad':([118,],[145,]),'gen_goto':([174,],[188,]),'func':([8,100,],[11,11,]),'more_params':([152,194,],[167,197,]),'push_false_bottom':([84,],[102,]),'condition':([44,54,150,157,],[59,59,59,59,]),'cycle':([44,54,150,157,],[60,60,60,60,]),'func_call':([28,44,52,54,75,76,77,86,97,102,120,130,131,150,157,159,160,168,],[37,61,37,61,37,37,37,37,37,37,37,37,37,61,61,37,37,37,]),'term':([52,75,76,77,86,97,102,120,131,159,160,168,],[72,72,72,72,72,72,72,72,156,72,72,72,]),'main':([12,],[16,]),'assignation':([44,54,150,157,],[62,62,62,62,]),'func_block':([83,],[100,]),'read':([44,54,150,157,],[56,56,56,56,]),'pop_false_bottom':([126,129,],[151,154,]),'to_pilaOp':([71,78,103,],[88,96,128,]),'gen_endproc_quad':([165,],[180,]),'gen_go_sub':([166,],[181,]),'more_statement':([44,54,150,157,],[64,74,165,172,]),'to_var_table':([10,],[15,]),'gen_assignation_quad':([147,],[162,]),'more_vars_aux':([29,],[41,]),'expression_aux':([116,189,],[136,196,]),'pl':([89,171,],[112,112,]),'exp':([52,75,76,77,86,97,102,120,159,160,168,],[73,93,94,95,93,93,127,93,93,176,182,]),'expression':([75,86,97,120,],[91,104,121,147,]),'exp_aux':([89,171,],[113,185,]),'block':([132,163,188,],[158,178,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> gen_goto_main more_vars more_func main','program',4,'p_program','ObsidianParser.py',11),
  ('gen_goto_main -> <empty>','gen_goto_main',0,'p_gen_goto_main','ObsidianParser.py',15),
  ('more_vars -> vars','more_vars',1,'p_more_vars','ObsidianParser.py',20),
  ('more_vars -> <empty>','more_vars',0,'p_more_vars','ObsidianParser.py',21),
  ('vars -> var_type vars_aux SEMICOLON more_vars','vars',4,'p_vars','ObsidianParser.py',24),
  ('var_type -> BOOL','var_type',1,'p_var_type','ObsidianParser.py',27),
  ('var_type -> INT','var_type',1,'p_var_type','ObsidianParser.py',28),
  ('var_type -> DOUBLE','var_type',1,'p_var_type','ObsidianParser.py',29),
  ('vars_aux -> ID to_var_table arr var_assign more_vars_aux','vars_aux',5,'p_vars_aux','ObsidianParser.py',34),
  ('to_var_table -> <empty>','to_var_table',0,'p_to_var_table','ObsidianParser.py',38),
  ('var_assign -> EQUALS var_cte','var_assign',2,'p_var_assign','ObsidianParser.py',42),
  ('var_assign -> <empty>','var_assign',0,'p_var_assign','ObsidianParser.py',43),
  ('more_vars_aux -> COMMA vars_aux','more_vars_aux',2,'p_more_vars_aux','ObsidianParser.py',47),
  ('more_vars_aux -> <empty>','more_vars_aux',0,'p_more_vars_aux','ObsidianParser.py',48),
  ('arr -> LSQRTBRACKET const register_space RSQRTBRACKET','arr',4,'p_arr','ObsidianParser.py',51),
  ('arr -> <empty>','arr',0,'p_arr','ObsidianParser.py',52),
  ('register_space -> <empty>','register_space',0,'p_register_space','ObsidianParser.py',57),
  ('var_cte -> const','var_cte',1,'p_var_cte','ObsidianParser.py',61),
  ('var_cte -> ID arr','var_cte',2,'p_var_cte','ObsidianParser.py',62),
  ('var_cte -> func_call','var_cte',1,'p_var_cte','ObsidianParser.py',63),
  ('const -> CTEINT','const',1,'p_const','ObsidianParser.py',67),
  ('const -> CTEDOUBLE','const',1,'p_const','ObsidianParser.py',68),
  ('const -> CTEBOOL','const',1,'p_const','ObsidianParser.py',69),
  ('more_func -> func','more_func',1,'p_more_func','ObsidianParser.py',73),
  ('more_func -> <empty>','more_func',0,'p_more_func','ObsidianParser.py',74),
  ('func -> FUNC func_type ID to_proc_dir LPAR arguments RPAR func_block more_func','func',9,'p_func','ObsidianParser.py',77),
  ('to_proc_dir -> <empty>','to_proc_dir',0,'p_to_proc_dir','ObsidianParser.py',80),
  ('func_type -> VOID','func_type',1,'p_func_type','ObsidianParser.py',84),
  ('func_type -> BOOL','func_type',1,'p_func_type','ObsidianParser.py',85),
  ('func_type -> INT','func_type',1,'p_func_type','ObsidianParser.py',86),
  ('func_type -> DOUBLE','func_type',1,'p_func_type','ObsidianParser.py',87),
  ('arguments -> var_type ID to_args more_args','arguments',4,'p_arguments','ObsidianParser.py',91),
  ('arguments -> <empty>','arguments',0,'p_arguments','ObsidianParser.py',92),
  ('more_args -> COMMA var_type ID to_args more_args','more_args',5,'p_more_args','ObsidianParser.py',96),
  ('more_args -> <empty>','more_args',0,'p_more_args','ObsidianParser.py',97),
  ('to_args -> <empty>','to_args',0,'p_to_args','ObsidianParser.py',100),
  ('func_block -> LBRACKET more_vars actual_quad_no more_statement gen_endproc_quad RBRACKET','func_block',6,'p_func_block','ObsidianParser.py',107),
  ('actual_quad_no -> <empty>','actual_quad_no',0,'p_actual_quad_no','ObsidianParser.py',110),
  ('gen_endproc_quad -> <empty>','gen_endproc_quad',0,'p_gen_endproc_quad','ObsidianParser.py',115),
  ('more_statement -> statement more_statement','more_statement',2,'p_more_statement','ObsidianParser.py',120),
  ('more_statement -> <empty>','more_statement',0,'p_more_statement','ObsidianParser.py',121),
  ('statement -> read','statement',1,'p_statement','ObsidianParser.py',124),
  ('statement -> write','statement',1,'p_statement','ObsidianParser.py',125),
  ('statement -> return_stmt','statement',1,'p_statement','ObsidianParser.py',126),
  ('statement -> cycle','statement',1,'p_statement','ObsidianParser.py',127),
  ('statement -> condition','statement',1,'p_statement','ObsidianParser.py',128),
  ('statement -> assignation','statement',1,'p_statement','ObsidianParser.py',129),
  ('statement -> func_call SEMICOLON','statement',2,'p_statement','ObsidianParser.py',130),
  ('read -> READ LPAR ID arr_par to_pilaOp RPAR gen_read_quad SEMICOLON','read',8,'p_read','ObsidianParser.py',133),
  ('gen_read_quad -> <empty>','gen_read_quad',0,'p_gen_read_quad','ObsidianParser.py',136),
  ('write -> WRITE LPAR exp RPAR gen_write_quad SEMICOLON','write',6,'p_write','ObsidianParser.py',141),
  ('gen_write_quad -> <empty>','gen_write_quad',0,'p_gen_write_quad','ObsidianParser.py',144),
  ('return_stmt -> RETURN exp gen_return_quad SEMICOLON','return_stmt',4,'p_return_stmt','ObsidianParser.py',149),
  ('gen_return_quad -> <empty>','gen_return_quad',0,'p_gen_return_quad','ObsidianParser.py',152),
  ('cycle -> WHILE cycle_start LPAR expression RPAR check_type block cycle_end','cycle',8,'p_cycle','ObsidianParser.py',158),
  ('cycle_start -> <empty>','cycle_start',0,'p_cycle_start','ObsidianParser.py',161),
  ('cycle_end -> <empty>','cycle_end',0,'p_cycle_end','ObsidianParser.py',165),
  ('condition -> IF LPAR expression RPAR check_type block else_posible fill_end_condition','condition',8,'p_condition','ObsidianParser.py',169),
  ('else_posible -> ELSE gen_goto block','else_posible',3,'p_else_posible','ObsidianParser.py',172),
  ('else_posible -> <empty>','else_posible',0,'p_else_posible','ObsidianParser.py',173),
  ('gen_goto -> <empty>','gen_goto',0,'p_gen_goto','ObsidianParser.py',176),
  ('fill_end_condition -> <empty>','fill_end_condition',0,'p_fill_end_condition','ObsidianParser.py',180),
  ('check_type -> <empty>','check_type',0,'p_check_type','ObsidianParser.py',184),
  ('assignation -> ID arr_par to_pilaOp EQUALS expression gen_assignation_quad SEMICOLON','assignation',7,'p_assignation','ObsidianParser.py',188),
  ('gen_assignation_quad -> <empty>','gen_assignation_quad',0,'p_gen_assignation_quad','ObsidianParser.py',191),
  ('func_call -> ID is_valid_func LPAR gen_era push_false_bottom params pop_false_bottom RPAR gen_go_sub','func_call',9,'p_func_call','ObsidianParser.py',196),
  ('params -> exp check_args more_params','params',3,'p_params','ObsidianParser.py',200),
  ('params -> <empty>','params',0,'p_params','ObsidianParser.py',201),
  ('more_params -> COMMA exp check_args more_params','more_params',4,'p_more_params','ObsidianParser.py',204),
  ('more_params -> <empty>','more_params',0,'p_more_params','ObsidianParser.py',205),
  ('check_args -> <empty>','check_args',0,'p_check_args','ObsidianParser.py',208),
  ('is_valid_func -> <empty>','is_valid_func',0,'p_is_valid_func','ObsidianParser.py',212),
  ('gen_era -> <empty>','gen_era',0,'p_gen_era','ObsidianParser.py',216),
  ('gen_go_sub -> <empty>','gen_go_sub',0,'p_gen_go_sub','ObsidianParser.py',220),
  ('block -> LBRACKET more_statement RBRACKET','block',3,'p_block','ObsidianParser.py',224),
  ('arr_par -> LSQRTBRACKET exp RSQRTBRACKET arr_par','arr_par',4,'p_arr_par','ObsidianParser.py',227),
  ('arr_par -> <empty>','arr_par',0,'p_arr_par','ObsidianParser.py',228),
  ('expression -> conc gen_conc_quad expression_aux','expression',3,'p_expression','ObsidianParser.py',231),
  ('expression_aux -> ao add_to_pilaOptr conc gen_conc_quad expression_aux','expression_aux',5,'p_expression_aux','ObsidianParser.py',235),
  ('expression_aux -> <empty>','expression_aux',0,'p_expression_aux','ObsidianParser.py',236),
  ('gen_conc_quad -> <empty>','gen_conc_quad',0,'p_gen_conc_quad','ObsidianParser.py',238),
  ('conc -> exp gen_comp_quad conc_aux','conc',3,'p_conc','ObsidianParser.py',243),
  ('conc_aux -> comp add_to_pilaOptr exp gen_comp_quad','conc_aux',4,'p_conc_aux','ObsidianParser.py',247),
  ('conc_aux -> <empty>','conc_aux',0,'p_conc_aux','ObsidianParser.py',248),
  ('gen_comp_quad -> <empty>','gen_comp_quad',0,'p_gen_comp_quad','ObsidianParser.py',251),
  ('exp -> term gen_term_quad exp_aux','exp',3,'p_exp','ObsidianParser.py',256),
  ('exp_aux -> pl add_to_pilaOptr term gen_term_quad exp_aux','exp_aux',5,'p_exp_aux','ObsidianParser.py',260),
  ('exp_aux -> <empty>','exp_aux',0,'p_exp_aux','ObsidianParser.py',261),
  ('gen_term_quad -> <empty>','gen_term_quad',0,'p_gen_term_quad','ObsidianParser.py',264),
  ('term -> factor gen_factor_quad term_aux','term',3,'p_term','ObsidianParser.py',269),
  ('term_aux -> dm add_to_pilaOptr factor gen_factor_quad term_aux','term_aux',5,'p_term_aux','ObsidianParser.py',273),
  ('term_aux -> <empty>','term_aux',0,'p_term_aux','ObsidianParser.py',274),
  ('gen_factor_quad -> <empty>','gen_factor_quad',0,'p_gen_factor_quad','ObsidianParser.py',277),
  ('factor -> LPAR add_to_pilaOptr expression RPAR pop_false_bottom','factor',5,'p_factor','ObsidianParser.py',282),
  ('factor -> var_cte to_pilaOp','factor',2,'p_factor','ObsidianParser.py',283),
  ('ao -> AND','ao',1,'p_ao','ObsidianParser.py',290),
  ('ao -> OR','ao',1,'p_ao','ObsidianParser.py',291),
  ('comp -> GREATER','comp',1,'p_comp','ObsidianParser.py',295),
  ('comp -> LESS','comp',1,'p_comp','ObsidianParser.py',296),
  ('comp -> GREATEROREQUAL','comp',1,'p_comp','ObsidianParser.py',297),
  ('comp -> LESSOREQUAL','comp',1,'p_comp','ObsidianParser.py',298),
  ('comp -> EQUALEQUALS','comp',1,'p_comp','ObsidianParser.py',299),
  ('comp -> DIFFERENT','comp',1,'p_comp','ObsidianParser.py',300),
  ('pl -> PLUS','pl',1,'p_pl','ObsidianParser.py',304),
  ('pl -> MINUS','pl',1,'p_pl','ObsidianParser.py',305),
  ('to_pilaOp -> <empty>','to_pilaOp',0,'p_to_pilaOp','ObsidianParser.py',309),
  ('add_to_pilaOptr -> <empty>','add_to_pilaOptr',0,'p_add_to_pilaOptr','ObsidianParser.py',322),
  ('push_false_bottom -> <empty>','push_false_bottom',0,'p_push_false_bottom','ObsidianParser.py',326),
  ('pop_false_bottom -> <empty>','pop_false_bottom',0,'p_pop_false_bottom','ObsidianParser.py',330),
  ('dm -> MULTIPLICATION','dm',1,'p_dm','ObsidianParser.py',336),
  ('dm -> DIVISION','dm',1,'p_dm','ObsidianParser.py',337),
  ('dm -> MOD','dm',1,'p_dm','ObsidianParser.py',338),
  ('main -> MAIN main_to_proc_dir main_block','main',3,'p_main','ObsidianParser.py',342),
  ('main_to_proc_dir -> <empty>','main_to_proc_dir',0,'p_main_to_proc_dir','ObsidianParser.py',345),
  ('main_block -> LBRACKET more_vars more_statement RBRACKET gen_end_quad','main_block',5,'p_main_block','ObsidianParser.py',352),
  ('gen_end_quad -> <empty>','gen_end_quad',0,'p_gen_end_quad','ObsidianParser.py',354),
]
